[
    {
        "caption": "name",
        "value": "name",
        "docText": "name = Delilah\n        If set, that's the name all your Crawl characters will get. Setting\n        this will bypass the main menu by default; see `name_bypasses_menu`.",
        "meta": "dcss option"
    },
    {
        "caption": "type",
        "value": "type",
        "docText": "type = normal\n        Choose a game type. Valid values are \"normal\", \"seeded\", \"tutorial\",\n        \"arena\", \"sprint\", \"descent\", and \"hints\". If explicitly set (not just\n        left to the default), this sets the default game type at the main menu.\n        If the main menu is bypassed (e.g. by setting `name`), this option can\n        be used to determine the game type. \"descent\" is only valid in alpha\n        (development) builds.",
        "meta": "dcss option"
    },
    {
        "caption": "remember_name",
        "value": "remember_name",
        "docText": "remember_name = true\n        Crawl remembers the options (species, background etc.) you used\n        to create your last character. You may recycle them in the\n        starting screen for a new character. If this option is set to\n        true, Crawl will also remember the last name you used.\n\n        If you use this option and want to enter a name _after_\n        choosing your species and background, you must enter . at the\n        initial name prompt - hitting Enter at the name prompt will\n        simply reuse your old name if remember_name is set.",
        "meta": "dcss option"
    },
    {
        "caption": "weapon",
        "value": "weapon",
        "docText": "weapon += (short sword |...| unarmed | random | viable), <weapon>, ...\n        (List option)\n        Specifying the weapon option allows you to bypass the weapon\n        selection screen. Tridents, flails, rapiers, long swords, and war\n        axes are restricted to fighters and gladiators, and quarterstaves\n        are restricted to gladiators only. The standard weapon prompt will be\n        shown if an illegal choice for the selected background is specified.\n        The \"viable\" option makes a random choice from among the \"good\" weapons\n        for the chosen character. Specifying more than one option causes the\n        game to randomly select a weapon from the given list. The combo option\n        overrides (and is overridden by) this option.",
        "meta": "dcss option"
    },
    {
        "caption": "species",
        "value": "species",
        "docText": "species += (Human |...| Vampire | random | viable), <species>, ...\n        (List option)\n        The usual abbreviations (Hu, HO, etc.) work. \"viable\" will choose a\n        viable species for a given background if the background is chosen\n        first. Specifying multiple species causes one to be selected at\n        random from the given species. The combo option overrides (and is\n        overridden by) this option.",
        "meta": "dcss option"
    },
    {
        "caption": "background",
        "value": "background",
        "docText": "background += (Fighter |...| Wanderer | random | viable), <background>, ...\n        (List option)\n        Here again the abbreviations (Fi, HW, AK, etc.) can be used. The same\n        caveat applies to \"viable\": it is only really meaningful if the\n        species option is also set. Specifying multiple backgrounds causes\n        one to be selected at random from the given species. The combo option\n        overrides (and is overridden by) this option.",
        "meta": "dcss option"
    },
    {
        "caption": "combo",
        "value": "combo",
        "docText": "combo += (HuFi . short sword | Human Monk | ...), <combo>, ...\n        (List option)\n        Specifies a complete set of species, background, and (where\n        applicable) weapon. If a combo requires a weapon choice and one isn't\n        specified, it is prompted for. Combos may be abbreviated or specified\n        in full. If multiple combos are specified, one is selected randomly\n        from the specified combos. The weapon, species, and background\n        options are overridden by (and override) this option.",
        "meta": "dcss option"
    },
    {
        "caption": "restart_after_game",
        "value": "restart_after_game",
        "docText": "restart_after_game = maybe/true\n        When set to true, at the game end, crawl will return to the main menu.\n        If set to maybe, crawl will return to the main menu only if the startup\n        options don't bypass the main menu, otherwise it will exit. If set to\n        false, it will exit unconditionally. This option is set to true for\n        local tiles builds by default, and maybe by default for other builds.\n        This option is ignored for online games.",
        "meta": "dcss option"
    },
    {
        "caption": "restart_after_save",
        "value": "restart_after_save",
        "docText": "restart_after_save = true\n        When the game is saved, return to the main menu. This option\n        only has an effect if restart_after_game is set to maybe or true.\n        This option is ignored for online games.",
        "meta": "dcss option"
    },
    {
        "caption": "newgame_after_quit",
        "value": "newgame_after_quit",
        "docText": "newgame_after_quit = false\n        When true, if a name/combo is set, quit will do a fast restart. On this\n        setting, with restart_after_game as non-false, it may be possible to\n        exit crawl only via saving.",
        "meta": "dcss option"
    },
    {
        "caption": "name_bypasses_menu",
        "value": "name_bypasses_menu",
        "docText": "name_bypasses_menu = true\n        When set to true, having a valid name set via options will skip the main\n        menu and jump right to a game or character selection (if there is no\n        save).",
        "meta": "dcss option"
    },
    {
        "caption": "default_manual_training",
        "value": "default_manual_training",
        "docText": "default_manual_training = false (persistent)\n        When set to true, new characters will start with skill training\n        set to manual mode instead of automatic mode. This will also set the\n        [!] selection on the skill (m) menu to \"cost\" by default, instead of\n        \"training\".",
        "meta": "dcss option"
    },
    {
        "caption": "autopickup_starting_ammo",
        "value": "autopickup_starting_ammo",
        "docText": "autopickup_starting_ammo = true\n        When set, at game start, autopickup is forced on (as per the \\ menu)\n        for the player's starting ammunition type. Even when this option is\n        set, autopickup of those items can be disabled from the \\ menu once\n        the game has begun.",
        "meta": "dcss option"
    },
    {
        "caption": "game_seed",
        "value": "game_seed",
        "docText": "game_seed = none\n        A number indicating the seed to initialize the random number generator\n        from. Within certain limits, the same seed will deterministically lead\n        to the same dungeon. If set to \"none\" or 0, the seed will be chosen\n        randomly. This can also be set directly via the command line with\n        \"-seed\", which will override any rc file setting. This value is an\n        unsigned 64 bit integer.",
        "meta": "dcss option"
    },
    {
        "caption": "pregen_dungeon",
        "value": "pregen_dungeon",
        "docText": "pregen_dungeon = incremental\n        This setting determines the level generation mode for new games, which\n        interacts with random seeding (see the \"Seeded play\" section of the\n        manual). In order to generate a stable dungeon from a seed, levels need\n        to be generated in a consistent order. The recommended setting of\n        `incremental` will generate levels as needed when entering a new level\n        so that the game always generates levels in the same order, potentially\n        catching up when skipping levels in the standard order.\n\n        When set to `true` or `full`, the game will pregenerate the entire\n        connected dungeon when starting a new character. This leads to\n        deterministic dungeon generation relative to a particular game seed,\n        and no load times when entering levels, but at the cost of a slow game\n        start. Some servers may disallow full pregeneration for online play.\n\n        When set to `false` or `classic`, the game will generate all levels on\n        level entry, as was the rule before 0.23. Dungeons will not be stable\n        given a seed with this option.",
        "meta": "dcss option"
    },
    {
        "caption": "suppress_startup_errors",
        "value": "suppress_startup_errors",
        "docText": "suppress_startup_errors = false\n        If this is false, and an error is detected as the game first starts\n        (such as a mistake in a configuration file), bring up a screen before\n        loading to display these.\n\n        The main menu will contain a warning of errors regardless of this\n        setting, and it does not affect what happens with errors detected as a\n        character is loaded.",
        "meta": "dcss option"
    },
    {
        "caption": "map",
        "value": "map",
        "docText": "map = \"\"\n        This can be used to choose a sprint map. If set in an rc file, this\n        value skips the sprint map selection submenu. Valid options are:\n        dungeon_sprint_1, the_violet_keep_of_menkaure, dungeon_sprint_mu,\n        dungeon_sprint_fedhas, sprint_v, arena_sprint, pitsprint, meatsprint,\n        and linesprint.",
        "meta": "dcss option"
    },
    {
        "caption": "fully_random",
        "value": "fully_random",
        "docText": "fully_random = false\n        Set to true to choose a combo randomly. If either species or job is\n        set to `viable`, this will choose a combo from \"recommended\"\n        characters, otherwise, it will choose combos entirely randomly. When\n        set, the character selection menus are replaced with a prompt that\n        offers you a combo, and allows you to accept or reroll.",
        "meta": "dcss option"
    },
    {
        "caption": "arena_teams",
        "value": "arena_teams",
        "docText": "arena_teams = \"\"\n        Set to preselect teams in arena mode. When set, arena mode goes directly\n        to the competition.",
        "meta": "dcss option"
    },
    {
        "caption": "crawl_dir",
        "value": "crawl_dir",
        "docText": "crawl_dir = <path>\n        A path to be used for the relative paths when looking for other\n        files. The default for this value is dependent on the system and\n        build type. This option can also be set the `CRAWL_DIR` environment\n        variable. When set, this will override the following three directory\n        options if they have been previously set.",
        "meta": "dcss option"
    },
    {
        "caption": "save_dir",
        "value": "save_dir",
        "docText": "save_dir = saves/\n        Directory where saves and bones are stored. A relative path\n        will be interpreted relative to the value of `crawl_dir`.",
        "meta": "dcss option"
    },
    {
        "caption": "morgue_dir",
        "value": "morgue_dir",
        "docText": "morgue_dir = morgues/\n        Directory where morgue dumps files (morgue*.txt and\n        morgue*.lst) as well as character dumps files are written. A relative\n        path will be interpreted relative to the value of `crawl_dir`.",
        "meta": "dcss option"
    },
    {
        "caption": "macro_dir",
        "value": "macro_dir",
        "docText": "macro_dir = <path>\n        Directory for reading macro.txt.\n        It should end with the path delimiter. The default value for this\n        is dependent on system and build type.",
        "meta": "dcss option"
    },
    {
        "caption": "sounds_on",
        "value": "sounds_on",
        "docText": "sounds_on = true\n        (Requires \"Sound support\"; check your version info)\n        If true, plays sound effects in various situations.",
        "meta": "dcss option"
    },
    {
        "caption": "sound",
        "value": "sound",
        "docText": "sound ^= <regex>:<path to sound file>, <regex>:<path>,\n        (Ordered list option)\n        Plays the sound file if a message contains regex. In case of\n        multiple matching regexes, only the sound of the last regex\n        is played. The regex should not include commas or colons.\n        For example\n             sound += LOW HITPOINT WARNING:sound\\sounds2\\danger3.wav\n        There are certain pre-defined regexes, as well, which can be\n        used to get a sound to trigger for something that cannot\n        otherwise be matched using a regex string. For example,\n        using FIRE_PROMPT_SOUND for the regex will cause Crawl to\n        play a sound whenever the fire prompt is opened. Check\n        sound.h for a full listing of all these pre-defined regex\n        strings.",
        "meta": "dcss option"
    },
    {
        "caption": "sound_file_path",
        "value": "sound_file_path",
        "docText": "sound_file_path = <path>\n        When playing sounds (with the option above), the contents of\n        this variable is appended to the start of the path. This is\n        intended to make it easier to take one configuration across\n        several platforms. These two lines are equivalent to the\n        example above:\n             sound_file_path = sound\\sounds2\\\n             sound += LOW HITPOINT WARNING:danger3.wav\n        The most recent instance of this option is the one that\n        takes effect, and is not applied retroactively to previous\n        instances of the sound option.",
        "meta": "dcss option"
    },
    {
        "caption": "one_SDL_sound_channel",
        "value": "one_SDL_sound_channel",
        "docText": "one_SDL_sound_channel = false\n        When true, only one sound can play at a time (if using SDL).\n        Is false by default since non-SDL sound backends don't\n        support such control.",
        "meta": "dcss option"
    },
    {
        "caption": "autopickup",
        "value": "autopickup",
        "docText": "autopickup = $?!+\"/♦\n        The above is the default list. The valid symbols are\n        )       Weapons\n        (       Missiles\n        [       Armour\n        /       Wands\n        ?       Scrolls\n        \" or =  Jewellery\n        !       Potions\n        + or :  Books\n        |       Staves\n        0       Orbs\n        }       Misc. items\n        $       Gold\n        ♦       Gems\n        Note that _whether_ items are picked up automatically or not, is\n        controlled by the in-game toggle Ctrl-A. Also note that picking\n        up takes a turn, but only one turn (regardless of the number of\n        items). If you teleport or blink onto a square with interesting\n        items, these will not be picked up.",
        "meta": "dcss option"
    },
    {
        "caption": "autopickup_exceptions",
        "value": "autopickup_exceptions",
        "docText": "autopickup_exceptions ^= <pickup-regex, >don't-pickup-regex, ...\n        (Ordered list option)\n        A set of regexes that force matching items to be picked up (if\n        prefixed with <), or never picked up (if prefixed with >).\n        The list is order sensitive: the first matching rule will be applied to\n        an item.\n\n        An example:\n             autopickup_exceptions += <curare-tipped dart\n        Forces autopickup to grab all curare-tipped darts, even if\n        missiles are not set in the \"autopickup\" option.\n\n        Whitespace between <> and the match expression is significant,\n        so the following won't work:\n             autopickup_exceptions += <   box of beasts\n\n        autopickup_exceptions replace the older ban_pickup. Using\n             autopickup_exceptions += >uselessness, >inaccuracy\n        is the same as using\n             ban_pickup += uselessness, inaccuracy\n\n        If the regexes are not prefixed with < or >, > is implied, so\n        the option setting above can also be written as\n             autopickup_exceptions += uselessness, inaccuracy\n\n        You can use multiple autopickup_exceptions lines. Some examples:\n             autopickup_exceptions += inaccuracy, immolation\n             autopickup_exceptions += uselessness, noise, torment\n\n        Unless you clear the list of exceptions, you won't need to set\n        autopickup exceptions for potions except maybe for very special\n        cases.",
        "meta": "dcss option"
    },
    {
        "caption": "default_autopickup",
        "value": "default_autopickup",
        "docText": "default_autopickup = true\n        When set to false, the game starts with autopickup turned off.\n        You can still toggle autopickup in-game with Ctrl-A.",
        "meta": "dcss option"
    },
    {
        "caption": "pickup_thrown",
        "value": "pickup_thrown",
        "docText": "pickup_thrown = true\n        pickup_thrown = true causes autopickup to pick up thrown missiles,\n        Be aware that autopickup uses a turn, though it won't trigger if\n        there are hostile monsters in sight.",
        "meta": "dcss option"
    },
    {
        "caption": "assign_item_slot",
        "value": "assign_item_slot",
        "docText": "assign_item_slot = (forward | backward)\n        When picking up items, the inventory slot into which the item\n        goes is normally the first free slot from a-zA-Z (this is the\n        default \"forward\" behaviour). Setting assign_item_slot to\n        \"backward\" changes the slot assignment to the first letter after\n        the last slot.\n        For instance, if you have items on 'a' and 'c', then with\n          assign_item_slot = forward, the next item will go into 'b',\n          assign_item_slot = backward, the next item will go to 'd'\n        instead.\n        With \"backward\", items dropped/fired and picked up later are\n        more likely to get their old slot back.",
        "meta": "dcss option"
    },
    {
        "caption": "pickup_menu_limit",
        "value": "pickup_menu_limit",
        "docText": "pickup_menu_limit = 1\n        If there are more items than this on your square, a menu will be\n        displayed when picking up multiple items instead of prompting for each\n        item. If zero, never use the menu. If negative, use the value of\n        item_stack_summary_minimum - 1, instead.\n\n        Note that no matter the value of the option, picking up will always\n        take one turn.",
        "meta": "dcss option"
    },
    {
        "caption": "drop_filter",
        "value": "drop_filter",
        "docText": "drop_filter += <regex>, <regex>, ...\n        (List option)\n        When selecting items using the global (de)select keys (',' or\n        '-') in a multidrop menu, you can choose to select only items\n        that match a search regex using this option.\n\n        For instance, to quickly select items forbidden by your god, you could\n        use:\n             drop_filter += forbidden\n\n        drop_filter will match against the same keywords menu_colour uses,\n        except that it lacks identification status. It defaults to\n        useless_item.\n\n        When a drop_filter is set, using the select/deselect keys will\n        set/clear selection of items that match the filter\n        expression(s).",
        "meta": "dcss option"
    },
    {
        "caption": "drop_disables_autopickup",
        "value": "drop_disables_autopickup",
        "docText": "drop_disables_autopickup = false\n        drop_disables_autopickup = true automatically removes dropped\n        non-missile items from autopickup.",
        "meta": "dcss option"
    },
    {
        "caption": "friend_highlight",
        "value": "friend_highlight",
        "docText": "friend_highlight = hi:green\n        Highlight friends in some way. This is very helpful for summoners. The\n        default setting shows friends with a green background. If the friend is\n        itself green, it'll show up as black on green.",
        "meta": "dcss option"
    },
    {
        "caption": "neutral_highlight",
        "value": "neutral_highlight",
        "docText": "neutral_highlight = hi:lightgrey\n        Highlight neutral monsters in some way. Useful both to get out of\n        a neutral monster's path, and to avoid accidentally killing it.\n        The default setting shows neutrals with a dark grey background. Since\n        there are no darkgrey monster glyphs anymore, this works fine.",
        "meta": "dcss option"
    },
    {
        "caption": "unusual_highlight",
        "value": "unusual_highlight",
        "docText": "unusual_highlight = hi:magenta\n        Highlight hostile monsters carrying unusual items. Useful to show if a\n        monster should be handled with care because it has an atypical item,\n        such as a wand or a distortion weapon.\n\n        This is used in conjunction with the unusual_monster_items option:\n        unusual_monster_items determines which items will cause a monster to be\n        highlighted.",
        "meta": "dcss option"
    },
    {
        "caption": "stab_highlight",
        "value": "stab_highlight",
        "docText": "stab_highlight = hi:blue\n        This option highlights monsters that are fully unaware of the player\n        and therefore are will not attack, and are guaranteed to take stab\n        damage if attacked appropriately by the player.",
        "meta": "dcss option"
    },
    {
        "caption": "may_stab_highlight",
        "value": "may_stab_highlight",
        "docText": "may_stab_highlight = hi:brown\n        This option highlights monsters that are having trouble paying\n        attention to the player by, for example, being confused or\n        distracted. These monsters may be able to be stabbed, depending\n        on Stealth and weapon skill levels and various other factors, and will\n        (at least) have trouble attacking the player with their current status.",
        "meta": "dcss option"
    },
    {
        "caption": "heap_highlight",
        "value": "heap_highlight",
        "docText": "heap_highlight = reverse\n        Highlights heaps of items (more than one item or stack).",
        "meta": "dcss option"
    },
    {
        "caption": "feature_item_highlight",
        "value": "feature_item_highlight",
        "docText": "feature_item_highlight = reverse\n        Highlights features (stairs, shops, altars) that would otherwise be\n        hidden by items. If you use this option, the item glyph(s) on the\n        square are hidden by the feature symbol.",
        "meta": "dcss option"
    },
    {
        "caption": "trap_item_highlight",
        "value": "trap_item_highlight",
        "docText": "trap_item_highlight = reverse\n        Highlights traps that would otherwise be hidden by items. If you\n        use this option, the item glyph(s) on the square are hidden by the trap\n        symbol (^).",
        "meta": "dcss option"
    },
    {
        "caption": "level_map_cursor_step",
        "value": "level_map_cursor_step",
        "docText": "level_map_cursor_step = 7\n        How many squares the cursor moves on the level map when using\n        Shift-direction.",
        "meta": "dcss option"
    },
    {
        "caption": "view_max_width",
        "value": "view_max_width",
        "docText": "view_max_width = 33 (max 81)\n        Sets the maximum width of the viewport (defaults to 33).\n        Making this larger will allow Crawl to show a wider viewport\n        on larger terminals. This is ignored in tiles, the viewport will\n        always use all the available space.",
        "meta": "dcss option"
    },
    {
        "caption": "view_max_height",
        "value": "view_max_height",
        "docText": "view_max_height = 21 (max 71)\n        Similar to view_max_width, but sets the viewport's maximum height.\n        In tiles, this value is used to set when space starts to be affected\n        to the message area instead of the viewport. When the message area\n        reaches msg_max_height, the remaining space goes to the viewport.\n        If for performance reason you need a smaller viewport, either reduce\n        the window size, or increase the message area.",
        "meta": "dcss option"
    },
    {
        "caption": "view_lock_x",
        "value": "view_lock_x",
        "docText": "view_lock_x = true\n        Keeps the player character centred horizontally in the\n        viewport, continuously scrolling the viewport to match the\n        PC's movements. If this is not set, the player character can\n        move horizontally within the viewport, and the viewport will\n        scroll only when the character's line-of-sight reaches the\n        left or right edge.",
        "meta": "dcss option"
    },
    {
        "caption": "view_lock_y",
        "value": "view_lock_y",
        "docText": "view_lock_y = true\n        Keeps the character centred vertically in the viewport.",
        "meta": "dcss option"
    },
    {
        "caption": "view_lock",
        "value": "view_lock",
        "docText": "view_lock = true\n        Aliased option that sets both view_lock_x and view_lock_y.",
        "meta": "dcss option"
    },
    {
        "caption": "centre_on_scroll",
        "value": "centre_on_scroll",
        "docText": "centre_on_scroll = false\n        If this is set, the viewport centres on the player character\n        whenever it scrolls (this option is irrelevant if view_lock_x\n        and view_lock_y are set).",
        "meta": "dcss option"
    },
    {
        "caption": "symmetric_scroll",
        "value": "symmetric_scroll",
        "docText": "symmetric_scroll = true\n        If this is set, the viewport will scroll in a manner consistent\n        with the character movement that caused the scroll.\n\n        To illustrate, let's say the PC is at the lower edge of the\n        viewport, but is near the horizontal centre. Now the PC moves\n        diagonally down and right, forcing the viewport to scroll up\n        one line. If symmetric_scroll is set, the viewport will also\n        scroll left one column to match the PC's diagonal movement. If\n        symmetric_scroll is not set, the viewport will only scroll up,\n        not horizontally. symmetric_scroll can be less disorienting\n        than free scrolling.\n\n        This option is not relevant if view_lock or centre_on_scroll\n        are set.",
        "meta": "dcss option"
    },
    {
        "caption": "scroll_margin_x",
        "value": "scroll_margin_x",
        "docText": "scroll_margin_x = 2\n        How far from the left or right edges scrolling starts. By\n        default, if the PC's square of line-of-sight is closer than\n        two squares from the edge, the viewport scrolls. If set at\n        zero, the viewport scrolls only when the LOS circle reaches\n        the viewport edge.",
        "meta": "dcss option"
    },
    {
        "caption": "scroll_margin_y",
        "value": "scroll_margin_y",
        "docText": "scroll_margin_y = 2\n        How far from the top or bottom edges scrolling starts.",
        "meta": "dcss option"
    },
    {
        "caption": "scroll_margin",
        "value": "scroll_margin",
        "docText": "scroll_margin = 2\n        An aliased option that sets both scroll_margin_x and\n        scroll_margin_y.",
        "meta": "dcss option"
    },
    {
        "caption": "always_show_exclusions",
        "value": "always_show_exclusions",
        "docText": "always_show_exclusions = true\n        If true, display travel exclusions and their exclusion radius in\n        the viewport. Exclusions are always visible on the level map\n        (access with X) regardless of the value of this option.\n        Exclusions are also visible in terrain-only mode (access with |).\n        This option has no effect in tiles builds, where exclusions are\n        always shown both in the viewport and on the level map.",
        "meta": "dcss option"
    },
    {
        "caption": "travel_delay",
        "value": "travel_delay",
        "docText": "travel_delay = 20 (defaults to -1 for online servers)\n        How long travel waits after each move (milliseconds), and also\n        how long auto-explore waits after each move unless explore_delay\n        is set. Depends on platform. Setting to -1 will jump to end of\n        travel - you will not see the individual moves.",
        "meta": "dcss option"
    },
    {
        "caption": "explore_delay",
        "value": "explore_delay",
        "docText": "explore_delay = -1\n        How long auto-explore waits after each move (milliseconds). Depends on\n        platform. In particular, setting travel_delay = -1 and\n        explore_delay = 20 means you will see the individual moves of\n        autoexplore, but not the individual moves of other forms of travel.\n        Setting to -1 means the auto-explore delay will be the same as\n        travel_delay.",
        "meta": "dcss option"
    },
    {
        "caption": "rest_delay",
        "value": "rest_delay",
        "docText": "rest_delay = 0 (defaults to -1 for online servers)\n        How long resting waits after each move (milliseconds). Depends on\n        platform. Setting rest_delay = -1 will prevent the display updating\n        during resting.",
        "meta": "dcss option"
    },
    {
        "caption": "travel_avoid_terrain",
        "value": "travel_avoid_terrain",
        "docText": "travel_avoid_terrain = (shallow water | deep water)\n        Prevent travel from routing through shallow water. By default,\n        no terrain is avoided. For merfolk and/or characters with\n        permanent flight,\n             travel_avoid_terrain = shallow water, deep water\n        will prevent travel or explore from going through any water.\n        This option supports list syntax.",
        "meta": "dcss option"
    },
    {
        "caption": "explore_greedy",
        "value": "explore_greedy",
        "docText": "explore_greedy = true\n        Greedy explore travels to items that are eligible for\n        autopickup in addition to exploring the level, but is\n        otherwise identical to regular explore. Explore greed is\n        disabled if autopickup is off (Ctrl-A).",
        "meta": "dcss option"
    },
    {
        "caption": "explore_greedy_visit",
        "value": "explore_greedy_visit",
        "docText": "explore_greedy_visit = artefacts,glowing_items\nexplore_greedy_visit += stacks\n        (List option)\n        Greedy exploration will visit squares with items based on\n        these conditions.\n\n        stacks: makes explore_greedy visit all stacks even if they don't\n        necessarily have target auto pickup items\n\n        glowing_items: makes explore_greedy visit glowing_items,\n        even if not in a stack\n\n        artefacts: makes explore_greedy visit artefacts, even\n        if not in a stack",
        "meta": "dcss option"
    },
    {
        "caption": "explore_greedy_visit",
        "value": "explore_greedy_visit",
        "docText": "explore_greedy_visit = artefacts,glowing_items\nexplore_greedy_visit += stacks\n        (List option)\n        Greedy exploration will visit squares with items based on\n        these conditions.\n\n        stacks: makes explore_greedy visit all stacks even if they don't\n        necessarily have target auto pickup items\n\n        glowing_items: makes explore_greedy visit glowing_items,\n        even if not in a stack\n\n        artefacts: makes explore_greedy visit artefacts, even\n        if not in a stack",
        "meta": "dcss option"
    },
    {
        "caption": "explore_item_greed",
        "value": "explore_item_greed",
        "docText": "explore_item_greed = 10\n        Greedy exploration treats items as if they were this much closer (or\n        further away, if negative) when deciding whether to visit a square with\n        an item or explore a new square.",
        "meta": "dcss option"
    },
    {
        "caption": "explore_stop",
        "value": "explore_stop",
        "docText": "explore_stop  = items,stairs,shops,altars,portals,branches,runed_doors\nexplore_stop += greedy_pickup_smart,greedy_visited_item_stack\n        (List option)\n        Explore will stop for one of these conditions. Whatever you\n        set this option to, anything that stops travel will also stop\n        explore.\n\n        The \"branches\" condition stops for branch entrances but not for\n        other kinds of stairs or portals.\n\n        NOTE: runrest_ignore_message has no effect on explore_stop.\n\n        When using non-greedy explore, items causes explore to stop\n        when any new item comes into view. When using greedy explore,\n        the conditions act as follows:\n\n        items: stop when items that aren't eligible for autopickup come\n            into view.\n\n        greedy_items: stop when items that are eligible for autopickup\n            come into view.\n\n        greedy_pickup: stop after you automatically pick up any item\n            eligible for autopickup, excluding gold, but including\n            items thrown/fired by the player. You can make certain items\n            *not* trigger this with the option explore_stop_pickup_ignore\n\n        greedy_pickup_gold: stop when automatically picking up gold during\n            greedy explore.\n\n        greedy_pickup_smart: Similar to greedy_pickup, but tries to be\n            smart about it, meaning only stopping for items which aren't\n            similar to any you already have in your inventory. It\n            doesn't stop for automatically picking up items which were\n            thrown/fired by the player; you can add \"greedy_pickup_thrown\"\n            if you want to stop for those.\n\n        greedy_pickup_thrown: Stops after you pick up any item you've\n            thrown/fired. greedy_pickup automatically does this, but\n            greedy_pickup_smart does not. explore_stop_pickup_ignore\n            does not affect this condition.\n\n        greedy_visited_item_stack: Stop when visiting a stack of items\n            previously unknown to the player, even if the stack contains\n            nothing eligible for autopickup.\n\n        glowing_items: like items, but only for items which are\n            glowing/runed/embroidered/etc.\n\n        artefacts: like items, but only for artefacts.\n\n        runes: like items, but only for runes.",
        "meta": "dcss option"
    },
    {
        "caption": "explore_stop",
        "value": "explore_stop",
        "docText": "explore_stop  = items,stairs,shops,altars,portals,branches,runed_doors\nexplore_stop += greedy_pickup_smart,greedy_visited_item_stack\n        (List option)\n        Explore will stop for one of these conditions. Whatever you\n        set this option to, anything that stops travel will also stop\n        explore.\n\n        The \"branches\" condition stops for branch entrances but not for\n        other kinds of stairs or portals.\n\n        NOTE: runrest_ignore_message has no effect on explore_stop.\n\n        When using non-greedy explore, items causes explore to stop\n        when any new item comes into view. When using greedy explore,\n        the conditions act as follows:\n\n        items: stop when items that aren't eligible for autopickup come\n            into view.\n\n        greedy_items: stop when items that are eligible for autopickup\n            come into view.\n\n        greedy_pickup: stop after you automatically pick up any item\n            eligible for autopickup, excluding gold, but including\n            items thrown/fired by the player. You can make certain items\n            *not* trigger this with the option explore_stop_pickup_ignore\n\n        greedy_pickup_gold: stop when automatically picking up gold during\n            greedy explore.\n\n        greedy_pickup_smart: Similar to greedy_pickup, but tries to be\n            smart about it, meaning only stopping for items which aren't\n            similar to any you already have in your inventory. It\n            doesn't stop for automatically picking up items which were\n            thrown/fired by the player; you can add \"greedy_pickup_thrown\"\n            if you want to stop for those.\n\n        greedy_pickup_thrown: Stops after you pick up any item you've\n            thrown/fired. greedy_pickup automatically does this, but\n            greedy_pickup_smart does not. explore_stop_pickup_ignore\n            does not affect this condition.\n\n        greedy_visited_item_stack: Stop when visiting a stack of items\n            previously unknown to the player, even if the stack contains\n            nothing eligible for autopickup.\n\n        glowing_items: like items, but only for items which are\n            glowing/runed/embroidered/etc.\n\n        artefacts: like items, but only for artefacts.\n\n        runes: like items, but only for runes.",
        "meta": "dcss option"
    },
    {
        "caption": "explore_stop_pickup_ignore",
        "value": "explore_stop_pickup_ignore",
        "docText": "explore_stop_pickup_ignore += <regex>, <regex>, ...\n        (List option)\n        If explore_stop has greedy_pickup or greedy_pickup_smart set,\n        then picking up any items matching any of the regexes in the list\n        will *not* stop auto-explore.\n\n        This option has no effect on items which were thrown by the player.",
        "meta": "dcss option"
    },
    {
        "caption": "explore_wall_bias",
        "value": "explore_wall_bias",
        "docText": "explore_wall_bias = 0\n        Adjusts how much autoexplore favours attempting to discover room\n        perimeters and corners. At higher values, autoexplore will more\n        heavily favour visiting squares that are next to walls; at 0 it\n        will not favour them at all. At negative values it will prefer\n        to stay away from walls. Note that setting this to a non-0 value\n        generally makes it slower to completely explore a level.",
        "meta": "dcss option"
    },
    {
        "caption": "travel_key_stop",
        "value": "travel_key_stop",
        "docText": "travel_key_stop = true\n        If set to true then travel will stop at any keypress.",
        "meta": "dcss option"
    },
    {
        "caption": "travel_one_unsafe_move",
        "value": "travel_one_unsafe_move",
        "docText": "travel_one_unsafe_move = false\n        If set to true then travel will make one move before conducting safety\n        checks for nearby danger.",
        "meta": "dcss option"
    },
    {
        "caption": "tc_reachable",
        "value": "tc_reachable",
        "docText": "tc_reachable      = blue\ntc_dangerous      = cyan\ntc_disconnected   = darkgrey\ntc_excluded       = lightmagenta\ntc_exclude_circle = red\ntc_forbidden      = lightcyan\n        The above six settle the colouring of the level map ('X').\n        They are\n          reachable: all squares safely reachable (without leaving the\n                     level)\n          dangerous: squares which are only connected to you via traps,\n                     etc.\n          disconnected: squares which cannot be reached without leaving\n                        the level\n          excluded: the colour for the centre of travel exclusions ('e')\n          excluded_circle: the colour for travel exclusions apart from\n                           centre\n          forbidden: squares which cannot be reached without crossing excluded\n                     squares.",
        "meta": "dcss option"
    },
    {
        "caption": "tc_dangerous",
        "value": "tc_dangerous",
        "docText": "tc_reachable      = blue\ntc_dangerous      = cyan\ntc_disconnected   = darkgrey\ntc_excluded       = lightmagenta\ntc_exclude_circle = red\ntc_forbidden      = lightcyan\n        The above six settle the colouring of the level map ('X').\n        They are\n          reachable: all squares safely reachable (without leaving the\n                     level)\n          dangerous: squares which are only connected to you via traps,\n                     etc.\n          disconnected: squares which cannot be reached without leaving\n                        the level\n          excluded: the colour for the centre of travel exclusions ('e')\n          excluded_circle: the colour for travel exclusions apart from\n                           centre\n          forbidden: squares which cannot be reached without crossing excluded\n                     squares.",
        "meta": "dcss option"
    },
    {
        "caption": "tc_disconnected",
        "value": "tc_disconnected",
        "docText": "tc_reachable      = blue\ntc_dangerous      = cyan\ntc_disconnected   = darkgrey\ntc_excluded       = lightmagenta\ntc_exclude_circle = red\ntc_forbidden      = lightcyan\n        The above six settle the colouring of the level map ('X').\n        They are\n          reachable: all squares safely reachable (without leaving the\n                     level)\n          dangerous: squares which are only connected to you via traps,\n                     etc.\n          disconnected: squares which cannot be reached without leaving\n                        the level\n          excluded: the colour for the centre of travel exclusions ('e')\n          excluded_circle: the colour for travel exclusions apart from\n                           centre\n          forbidden: squares which cannot be reached without crossing excluded\n                     squares.",
        "meta": "dcss option"
    },
    {
        "caption": "tc_excluded",
        "value": "tc_excluded",
        "docText": "tc_reachable      = blue\ntc_dangerous      = cyan\ntc_disconnected   = darkgrey\ntc_excluded       = lightmagenta\ntc_exclude_circle = red\ntc_forbidden      = lightcyan\n        The above six settle the colouring of the level map ('X').\n        They are\n          reachable: all squares safely reachable (without leaving the\n                     level)\n          dangerous: squares which are only connected to you via traps,\n                     etc.\n          disconnected: squares which cannot be reached without leaving\n                        the level\n          excluded: the colour for the centre of travel exclusions ('e')\n          excluded_circle: the colour for travel exclusions apart from\n                           centre\n          forbidden: squares which cannot be reached without crossing excluded\n                     squares.",
        "meta": "dcss option"
    },
    {
        "caption": "tc_exclude_circle",
        "value": "tc_exclude_circle",
        "docText": "tc_reachable      = blue\ntc_dangerous      = cyan\ntc_disconnected   = darkgrey\ntc_excluded       = lightmagenta\ntc_exclude_circle = red\ntc_forbidden      = lightcyan\n        The above six settle the colouring of the level map ('X').\n        They are\n          reachable: all squares safely reachable (without leaving the\n                     level)\n          dangerous: squares which are only connected to you via traps,\n                     etc.\n          disconnected: squares which cannot be reached without leaving\n                        the level\n          excluded: the colour for the centre of travel exclusions ('e')\n          excluded_circle: the colour for travel exclusions apart from\n                           centre\n          forbidden: squares which cannot be reached without crossing excluded\n                     squares.",
        "meta": "dcss option"
    },
    {
        "caption": "tc_forbidden",
        "value": "tc_forbidden",
        "docText": "tc_reachable      = blue\ntc_dangerous      = cyan\ntc_disconnected   = darkgrey\ntc_excluded       = lightmagenta\ntc_exclude_circle = red\ntc_forbidden      = lightcyan\n        The above six settle the colouring of the level map ('X').\n        They are\n          reachable: all squares safely reachable (without leaving the\n                     level)\n          dangerous: squares which are only connected to you via traps,\n                     etc.\n          disconnected: squares which cannot be reached without leaving\n                        the level\n          excluded: the colour for the centre of travel exclusions ('e')\n          excluded_circle: the colour for travel exclusions apart from\n                           centre\n          forbidden: squares which cannot be reached without crossing excluded\n                     squares.",
        "meta": "dcss option"
    },
    {
        "caption": "runrest_ignore_message",
        "value": "runrest_ignore_message",
        "docText": "runrest_ignore_message ^= <regex>, <regex>, ...\nrunrest_stop_message ^= <regex>, <regex>, ...\n        (List option)\n        Use these to force messages to interrupt travel and resting, or not.\n        These are matched against full message text. To limit a substring\n        match to a message channel, prefix the substring with the channel name\n        and a colon (see section 3-k below on Message Channels). For instance,\n        if you want travel to stop when you're hit by divine retribution, you\n        could use:\n             runrest_stop_message ^= god:wrath finds you\n\n        Or to remind yourself to renew expiring spells:\n             runrest_stop_message ^= Your transformation is almost over\n             runrest_stop_message ^= You are starting to lose your buoyancy\n\n        Or you can explicitly ignore some messages:\n             runrest_ignore_message ^= pleased with you,exalted\n\n        Note that monster talk and dungeon noises already do not interrupt\n        running or resting, by default.\n\n        Multiple lines can be used. The earliest match among both ignore and\n        stop messages overrides later lines. The file runrest_messages.txt\n        contains a number of default settings. These options accept `^=` to\n        prepend and `+=` to add; the former is necessary in order to override\n        defaults, including overriding defaults for `ignore` matches with\n        `stop` matches and vice versa.\n\n        Resetting either option has the effect of resetting both.\n\n        Note also that runrest_ignore_message has no effect on what\n        explore_stop stops for.",
        "meta": "dcss option"
    },
    {
        "caption": "runrest_stop_message",
        "value": "runrest_stop_message",
        "docText": "runrest_ignore_message ^= <regex>, <regex>, ...\nrunrest_stop_message ^= <regex>, <regex>, ...\n        (List option)\n        Use these to force messages to interrupt travel and resting, or not.\n        These are matched against full message text. To limit a substring\n        match to a message channel, prefix the substring with the channel name\n        and a colon (see section 3-k below on Message Channels). For instance,\n        if you want travel to stop when you're hit by divine retribution, you\n        could use:\n             runrest_stop_message ^= god:wrath finds you\n\n        Or to remind yourself to renew expiring spells:\n             runrest_stop_message ^= Your transformation is almost over\n             runrest_stop_message ^= You are starting to lose your buoyancy\n\n        Or you can explicitly ignore some messages:\n             runrest_ignore_message ^= pleased with you,exalted\n\n        Note that monster talk and dungeon noises already do not interrupt\n        running or resting, by default.\n\n        Multiple lines can be used. The earliest match among both ignore and\n        stop messages overrides later lines. The file runrest_messages.txt\n        contains a number of default settings. These options accept `^=` to\n        prepend and `+=` to add; the former is necessary in order to override\n        defaults, including overriding defaults for `ignore` matches with\n        `stop` matches and vice versa.\n\n        Resetting either option has the effect of resetting both.\n\n        Note also that runrest_ignore_message has no effect on what\n        explore_stop stops for.",
        "meta": "dcss option"
    },
    {
        "caption": "interrupt_<delay>",
        "value": "interrupt_<delay>",
        "docText": "interrupt_<delay> += <activity_interrupt_type>, <activity_interrupt_type>, ...\n        (List option)\n        Use this option to not interrupt a delayed action on a certain trigger.\n        For example, use\n            interrupt_travel -= sense_monster\n        to not interrupt autotravel when a monster is sensed but not seen.\n\n        Possible delay types are: armour_on, armour_off, ascending_stairs,\n        descending_stairs, drop_item, exsanguinate, jewellery_on, macro,\n        macro_process_key, memorise, multidrop, passwall, rest, revivify,\n        run, shaft_self, travel. (These are derived from the `name()`\n        functions in delay.h.)\n\n        Possible interrupt types are: abyss_exit_spawned, ally_attacked,\n        ancestor_hp, force, full_hp, full_mp, hp_loss, hit_monster, keypress,\n        message, mimic, monster, monster_attack, stat, sense_monster, teleport.\n        (These are derived from the `activity_interrupt_names` array in\n        delay.cc.)",
        "meta": "dcss option"
    },
    {
        "caption": "delay_safe_poison",
        "value": "delay_safe_poison",
        "docText": "delay_safe_poison = <% of hp>:<% of mhp>\n        Poison damage will be ignored if it is projected to drop your hp\n        by less than x% of your current hp and less than y% of your max\n        hp if you have defined delay_safe_poison = x:y. This applies to all\n        delays. Only one delay_safe_poison line is considered. Note that for\n        this to work with running and resting, Crawl needs to know to ignore\n        the \"You feel sick\" messages as well as the damage. For example,\n             runrest_ignore_message ^= You feel.*sick\n             delay_safe_poison = 80:100\n        are the defaults.",
        "meta": "dcss option"
    },
    {
        "caption": "runrest_ignore_monster",
        "value": "runrest_ignore_monster",
        "docText": "runrest_ignore_monster ^= <regex>:<distance>, <regex>:<distance>, ...\n        (Ordered list option)\n        Any monster matching the regular expression will only interrupt your\n        activity if the distance between you and the monster is less than the\n        specified number. E.g. with\n             runrest_ignore_monster ^= bat:3\n        bats, vampire bats, fire bats, and battlespheres will be considered\n        safe for travel, explore and resting as long as the distance is at\n        least 3. If a monster matches multiple expressions, its distance is\n        compared with the first match.",
        "meta": "dcss option"
    },
    {
        "caption": "rest_wait_both",
        "value": "rest_wait_both",
        "docText": "rest_wait_both = false\n        If rest_wait_both is set to true then resting will only stop\n        when both HP and MP are fully restored, not when either one of\n        them is restored.",
        "meta": "dcss option"
    },
    {
        "caption": "rest_wait_ancestor",
        "value": "rest_wait_ancestor",
        "docText": "rest_wait_ancestor = false\n        If rest_wait_ancestor is set to true then resting will only stop when\n        the ancestor's health is fully restored in addition to player HP or MP\n        (or both, if rest_wait_both is set).",
        "meta": "dcss option"
    },
    {
        "caption": "rest_wait_percent",
        "value": "rest_wait_percent",
        "docText": "rest_wait_percent = 100\n        When resting, if your HP or MP is below this percentage of being full,\n        it will stop resting when this percent of maximum HP or MP is refilled.\n        Resting after this point will still rest up to 100%.",
        "meta": "dcss option"
    },
    {
        "caption": "explore_auto_rest",
        "value": "explore_auto_rest",
        "docText": "explore_auto_rest = true\n        If true, auto-explore waits until your HP and MP are both at\n        rest_wait_percent before moving.",
        "meta": "dcss option"
    },
    {
        "caption": "auto_exclude",
        "value": "auto_exclude",
        "docText": "auto_exclude += <monster name>, <monster name>, ...\n        (List option)\n        Whenever you encounter a sleeping or stationary monster during\n        exploration that is included in this list, a travel exclusion is\n        automatically set centred on this monster, meaning autoexplore won't\n        ever bring you into its line of sight. If the monster dies or wakes up\n        while you are in sight, this exclusion is automatically removed again.",
        "meta": "dcss option"
    },
    {
        "caption": "travel_open_doors",
        "value": "travel_open_doors",
        "docText": "travel_open_doors = (avoid | approach | open)\n        Configure how autoexplore/travel interacts with doors.\n           avoid = Autoexplore/travel will treat closed doors like walls. If\n                   the only way for exploration or travel to continue is through\n                   a closed door, it will stop by a closed door.\n        approach = Autoexplore/travel will not open doors, instead stopping\n                   in front of any door in its path.\n            open = Autoexplore/travel will open doors. (default)\n        This does not affect runed doors, which are always avoided.",
        "meta": "dcss option"
    },
    {
        "caption": "auto_switch",
        "value": "auto_switch",
        "docText": "auto_switch = false\n        This option will allow you to automatically switch to an appropriate\n        weapon when attacking in melee, as long as the one you are wielding\n        and the one you switch to are both in slot 'a' or 'b'. An \"appropriate\"\n        weapon is one that is intended for melee, not inscribed with a\n        non-attack inscription (`!a`), and not hated by the player's god.",
        "meta": "dcss option"
    },
    {
        "caption": "easy_unequip",
        "value": "easy_unequip",
        "docText": "easy_unequip = true\n        Allows auto removal of armour and jewellery when dropping it.",
        "meta": "dcss option"
    },
    {
        "caption": "equip_unequip",
        "value": "equip_unequip",
        "docText": "equip_unequip = false\n        If this is true, selecting an already-equipped piece of equipment via\n        the 'w', 'W' or 'P' menus (for weapons, armour or jewellery\n        respectively) will unequip that item.",
        "meta": "dcss option"
    },
    {
        "caption": "jewellery_prompt",
        "value": "jewellery_prompt",
        "docText": "jewellery_prompt = false\n        If this is true, equipping rings will always prompt for the slot to\n        use, instead of automatically equipping the ring if there is an\n        available empty slot. Unequipping jewellery will also always prompt for\n        an item to remove, instead of skipping the prompt if only one item\n        of jewellery is equipped.",
        "meta": "dcss option"
    },
    {
        "caption": "easy_confirm",
        "value": "easy_confirm",
        "docText": "easy_confirm = (none | safe | all)\n        Make confirmation questions easier to answer:\n           none = force capitals on Y/N questions and stat increases\n           safe = force only on dangerous questions and stat increases (default)\n            all = never force capitals\n        WARNING TO PUTTY USERS: If your Putty configuration sets the\n        numeric keypad to \"NetHack mode\", the keypad '7' will be mapped\n        to the letter 'y', which can result in accidentally answering\n        yes to questions.",
        "meta": "dcss option"
    },
    {
        "caption": "simple_targeting",
        "value": "simple_targeting",
        "docText": "simple_targeting = false\n        If set to true, disables smart targeting for explosion and bouncing\n        bolt spells, making them automatically target the closest monster in\n        range rather than trying to find a spot that affects multiple monsters\n        while avoiding the player. This applies to target selection when\n        zapping as well as autotarget selection for quivered spells.",
        "meta": "dcss option"
    },
    {
        "caption": "force_spell_targeter",
        "value": "force_spell_targeter",
        "docText": "force_spell_targeter = hailstorm, starburst, frozen ramparts, ignition,\n                       eringya's noxious bog, cause fear, alistair's\n                       intoxication, discord, dispersal, metabolic englaciation,\n                       dazzling flash, flame wave, anguish, plasma beam\n        Force showing a targeter for the listed spells when casting normally,\n        even if the spell isn't targeted. This for practical purposes only has\n        an effect on statically targeted spells, such as the ones in the\n        default value; it is particularly useful for spells with an unusual\n        targeting pattern. If \"all\" appears in the options list, the rest of\n        the list (however constructed) will be ignored, and targeters will\n        be shown with every spell.",
        "meta": "dcss option"
    },
    {
        "caption": "force_ability_targeter",
        "value": "force_ability_targeter",
        "docText": "force_ability_targeter = sanctuary, cleansing flame, word of chaos, recite,\n                         elemental force, oozemancy, breathe lightning, torment,\n                         drain life, slouch, disaster area, apocalypse,\n                         corrupt, foxfire swarm\n        Force showing a targeter for the listed abilities when activating them\n        normally, even if the ability isn't targeted. This for practical\n        purposes only has an effect on statically targeted abilities, such as\n        the ones in the default value; it is particularly useful for abilities\n        with an unusual targeting pattern. If \"all\" appears in the options list,\n        the rest of the list (however constructed) will be ignored, and\n        targeters will be shown with every ability.",
        "meta": "dcss option"
    },
    {
        "caption": "allow_self_target",
        "value": "allow_self_target",
        "docText": "allow_self_target = prompt\n        Allow targeting yourself with risky magic (e.g., the spell Stone Arrow\n        or a wand of paralysis.) Values: (yes | no | prompt).\n        When set to 'yes', you are a valid target. When set to 'no', you cannot\n        target yourself with such spells. When set to 'prompt' (the default),\n        you will be required to confirm self-targeting. This option has no\n        effect on area-effect spells, such as Mephitic Cloud, where you are\n        always a valid target.",
        "meta": "dcss option"
    },
    {
        "caption": "prompt_menu",
        "value": "prompt_menu",
        "docText": "prompt_menu = true (tiles default), false (console default)\n        Always show prompt menus as popups if possible, rather than in the\n        message pane. This currently applies to Y/N prompts, and to the `G`o\n        menu.",
        "meta": "dcss option"
    },
    {
        "caption": "ability_menu",
        "value": "ability_menu",
        "docText": "ability_menu = true\n        Always show the full-screen 'a'bility menu. If false, 'a' prompts\n        in the message area, and the menu can be seen with '?' or '*'.",
        "meta": "dcss option"
    },
    {
        "caption": "spell_menu",
        "value": "spell_menu",
        "docText": "spell_menu = false\n        If set to true, the full-screen spell selection menu will always be\n        shown when using 'z'. If false, 'z' prompts in the message area, and\n        the menu can be seen with '?' or '*'.",
        "meta": "dcss option"
    },
    {
        "caption": "easy_floor_use",
        "value": "easy_floor_use",
        "docText": "easy_floor_use = true\n        If set to true, item interaction menus that allow using items from the\n        ground will respond to switching from inventory items to floor items by\n        pressing ',' whenever there is only one floor item, by selecting that\n        item rather than toggling the menu. For example, 'r,' will read the\n        scroll on the ground, if there is only one. This will work even if\n        there are no matching items in your inventory.",
        "meta": "dcss option"
    },
    {
        "caption": "sort_menus",
        "value": "sort_menus",
        "docText": "sort_menus = [menu:](true | false | auto:X)[:sort_order]\n        Controls if and how items are sorted in inventory and pickup\n        menus.\n\n        When sort_menus = false (the default), items are not sorted, and\n        will be ordered by inventory letter (or in the order they're\n        stacked for items on the floor).\n\n        When sort_menus = true, items are sorted according to the specified\n        sort_order, with the default being:\n             equipped, basename, qualname, curse, qty\n\n        If sort_menus = auto:X, items are sorted if there are at least\n        X items in the same category. For instance:\n             sort_menus = auto:5\n        will sort item classes that have at least 5 items. For instance,\n        having 4 kinds of potions would not sort them, but having 5\n        would.\n\n        You can explicitly specify sort criteria in the sort_menus\n        option as:\n             sort_menus = true : art, basename, qualname, curse, qty\n\n        Two items will be compared based on the first sort criteria\n        where they differ. So with the sort_menus line given above,\n        if only one of two different items is a known artefact, it will be\n        listed first, else (if both or neither are artefacts) if their\n        basenames are different they will be alphabetically compared using\n        their basenames; if the basenames are the same but the qualified\n        names are different it will compare their qualified names, and so\n        on.\n\n        The available sort criteria are:\n\n        * basename:\n          This is the name of the item type. The basename for all of\n          \"a +0 robe\", \"an embroidered robe\" and \"the cursed +2 robe of\n          Ponies\" is just \"robe\". The basename for both of \"a brass\n          ring\" and \"a ring of fire resistance\" are \"ring\".\n\n        * qualname:\n          The name of the item without articles (a/an/the), quantities,\n          enchantments, or curse-status. The qualified names for the\n          robes described above are \"robe\", \"embroidered robe\" and \"robe\n          of Ponies\", respectively. The qualified names for the rings\n          described above are \"brass ring\" and \"ring of fire\n          resistance\", respectively.\n\n        * fullname:\n          This is the name of the item as displayed in menus (including\n          (quantities, curse-status, etc.)\n\n        * dbname:\n          Sorts based on an item's unique internal name which is linked\n          to its description. Items with the same description will be\n          grouped together.\n\n        * curse:\n          Curse-status of the item (if known). Uncursed items show up\n          first.\n\n        * equipped:\n          Equipped items show up first.\n\n        * art:\n          Identified artefacts show up first.\n\n        * ego:\n          Identified ego items show up first.\n\n        * glowing:\n          Unidentified glowing/shiny/runed/etc items show up first.\n\n        * identified:\n          Identified items show up before unidentified ones of the\n          same type. An item is regarded as identified once you know\n          its subtype or ego.\n\n        * qty:\n          The quantity for stackable items (such as scrolls, potions,\n          etc.)\n\n        * slot:\n          The inventory letter for items in inventory; irrelevant for\n          items on the floor.\n\n        * charged:\n          Makes wands known or assumed to have some charges left appear\n          before wands known to be empty; irrelevant for all other item\n          types.\n\n        You can ask for a descending order sort by prefixing one or more\n        sort criteria with > as:\n             sort_menus = true : basename, >qty\n\n        You can also request sorting only for specific menus:\n             sort_menus = pickup: true\n        or\n             sort_menus = inv: true\n        (Menu types must be specified as name:, with no space between\n        name and colon.)\n\n        By default only pickup menus are sorted, and the sort criteria are:\n             \"equipped, basename, qualname, curse, qty\".\n        All other menus (drop, inv) will be sorted by inventory letter.\n\n        The menu selectors available are:\n\n        pickup: All pickup menus, stash-search menus, etc. for items not\n                in your inventory.\n        drop:   The item drop menu.\n        inv:    Inventory listings for any command (but not for dropping\n                items).\n        any:    All menus; this is the default when unspecified.\n\n        For example,\n             sort_menus = true : equipped, basename, qualname, curse, qty\n        will produce the same inventory and drop menus as by default,\n        with the exception that all worn/wielded items come first. This\n        can be convenient if you use the '.' command to select\n        subsequent items.\n        If you define sort_menus differently for two or more selectors,\n        the last one matching will always take precedence, i.e. \"any\"\n        as last setting would override any of the others.",
        "meta": "dcss option"
    },
    {
        "caption": "spell_slot",
        "value": "spell_slot",
        "docText": "spell_slot ^= <regex>:<list of spell letters>\n        (Ordered list option, one value per line)\n        When you memorise any spell that matches the regex, it will assign\n        itself to the first available letter in the list. A + in the list of\n        letters turns on \"overwrite mode\": all letters up to the next \"-\" are\n        considered available even if already assigned; in that case, any\n        spell already assigned to that slot, as long as it does not also\n        match the same <regex>, will be moved.\n\n        If all letters in the list are occupied for each regex the spell\n        matches, it will use the default ordering abc...xyzABC..XYZ. If a\n        spell matches multiple regexes, only the first is considered.\n\n        Examples:\n        * if you want Apportation to be placed on A:\n            spell_slot ^= Apportation:A\n        * if you want Ozocubu's Armour to be placed on r normally or R if\n          r is unavailable:\n            spell_slot ^= Ozocubu's Armour:rR\n        * if you want the first \"Bolt\" spell to be placed on a, even if\n          there is already a non-bolt spell there:\n            spell_slot ^= Bolt:+a\n        * if you want to change the default spell slot assignment\n          to use capital letters: (place this after all other\n          spell_slot lines):\n            spell_slot += .*:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "meta": "dcss option"
    },
    {
        "caption": "item_slot",
        "value": "item_slot",
        "docText": "item_slot ^= <regex>:<inventory letters>\n        (Ordered list option, one value per line)\n        Uses the same interface as spell_slot, except that overwrite mode\n        is on by default; overwrite mode can be disabled with a - in the\n        list of letters.\n\n        Additionally, the item_slot option is applied on an item when it is\n        identified, so it can be moved to the right place even if it was\n        picked up unidentified.",
        "meta": "dcss option"
    },
    {
        "caption": "ability_slot",
        "value": "ability_slot",
        "docText": "ability_slot ^= <regex>:<ability letters>\n        (Ordered list option, one value per line)\n        Uses the same interface as spell_slot, but applies to abilities\n        in the 'a' menu.",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_stop",
        "value": "autofight_stop",
        "docText": "autofight_stop = 50\n        Autofight will not act if your HP is at or lower than this\n        percentage of your max HP. Disabled when set to 0. This setting applies\n        both to autofight and to autofire.",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_warning",
        "value": "autofight_warning",
        "docText": "autofight_warning = 0\n        Enforce a minimum time (in milliseconds) between autofight commands.\n        If you issue two consecutive autofight commands within this amount\n        of time (for example, by holding down the tab key), the subsequent\n        commands will be ignored, and the message \"You should not fight\n        recklessly!\" printed to the danger channel. Any value less than\n        or equal to zero disables this check.",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_fires",
        "value": "autofight_fires",
        "docText": "autofight_fires = false\n        If your quiver contains contains a fireable action that does direct\n        damage to the enemy, regular CMD_AUTOFIGHT (tab on the default\n        binding) will trigger it at enemies out of melee range. Without this\n        option, only a wielded launcher (a bow, crossbow or sling) will be\n        triggered by CMD_AUTOFIGHT. If an action that does direct damage is\n        quivered but out of range, you will move towards the enemy. If an\n        action is quivered that does not do direct damage, CMD_AUTOFIGHT will\n        ignore it entirely. To prevent moving altogether, rebind with\n        CMD_AUTOFIGHT_NOMOVE instead of CMD_AUTOFIGHT. (Legacy name:\n        `autofight_throw`.)",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_nomove_fires",
        "value": "autofight_nomove_fires",
        "docText": "autofight_nomove_fires = true\n        This option modifies the behavior of CMD_AUTOFIGHT_NOMOVE (unbound by\n        default) in a similar way to how `autofight_fires`, above, modifies\n        CMD_AUTOFIGHT. (Legacy name: `autofight_throw_nomove`.)",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_fire_stop",
        "value": "autofight_fire_stop",
        "docText": "autofight_fire_stop = false\n        When firing missiles or throwing objects using autofight, if this\n        option is true, shots will stop at the target (like \"f.\") rather than\n        continuing past. Note that this setting may be decidedly suboptimal\n        for missiles of penetration.",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_caught",
        "value": "autofight_caught",
        "docText": "autofight_caught = false\n        If true, autofight will attempt to escape webs or nets that are\n        holding you, even if no enemies are in view.",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_wait",
        "value": "autofight_wait",
        "docText": "autofight_wait = false\n        If true, ===hit_closest_nomove while not in range of an enemy will\n        wait for a turn instead of aborting autofight.",
        "meta": "dcss option"
    },
    {
        "caption": "autofight_prompt_range",
        "value": "autofight_prompt_range",
        "docText": "autofight_prompt_range = true\n        When wielding a weapon that would normally cause a prompt on attacking\n        (such as a weapon with a !a inscription, or one disliked by your god),\n        if this option is true then the prompt will be displayed when autofight\n        tries to walk towards an enemy, instead of only when actually trying\n        to attack.",
        "meta": "dcss option"
    },
    {
        "caption": "automagic_enable",
        "value": "automagic_enable",
        "docText": "automagic_enable = false\n        Option to enable the old automagic system; new players are recommended\n        to just use quivered spells. If true, autofight (i.e. tab on the\n        default bindings) will cast a spell in a designated slot at a target.\n        Initial spell slot is a. (deprecated)",
        "meta": "dcss option"
    },
    {
        "caption": "automagic_slot",
        "value": "automagic_slot",
        "docText": "automagic_slot = a\n        Setting this changes the initial spell slot for the old automagic\n        system. Can be changed for games in progress in-game by setting a macro\n        to call ===am_set_spell.",
        "meta": "dcss option"
    },
    {
        "caption": "automagic_fight",
        "value": "automagic_fight",
        "docText": "automagic_fight = false\n        With the old automagic system enabled, setting this to true causes\n        a fallback to regular autofight (e.g. melee) when trying to cast a\n        spell that you either do not have enough magic points for, or are below\n        the set threshold. If false, a message will appear and no further\n        action is taken.",
        "meta": "dcss option"
    },
    {
        "caption": "automagic_stop",
        "value": "automagic_stop",
        "docText": "automagic_stop = 0\n        Similar to autofight_stop, if magic points are below this number\n        (percentage of total), casting via autofight/autofire is prevented.\n        Disabled when set to 0.",
        "meta": "dcss option"
    },
    {
        "caption": "fail_severity_to_confirm",
        "value": "fail_severity_to_confirm",
        "docText": "fail_severity_to_confirm = 3\n        Ask for confirmation when attempting to cast a spell where a miscast\n        would cause severe penalties. Prompt if the miscast severity of the\n        spell (the colour shown in the spellcasting menu) is greater than\n        or equal to the number specified:\n\n          5: magenta (miscasting may deal greater damage than max HP)\n          4: dark red (up to 70% damage)\n          3: light red (up to 50% damage)\n          2: yellow (up to 30% damage)\n          1: white (up to 10% damage)\n\n        If the value 0 or -1 is given, never prompt about miscasts.",
        "meta": "dcss option"
    },
    {
        "caption": "easy_door",
        "value": "easy_door",
        "docText": "easy_door = true\n        When (O)pening or (C)losing doors, do not prompt for a direction\n        if there is only one adjacent door. This option does not affect\n        opening doors by walking into them.",
        "meta": "dcss option"
    },
    {
        "caption": "warn_hatches",
        "value": "warn_hatches",
        "docText": "warn_hatches = false\n        Ask for confirmation before using a one-way escape hatch or shaft.",
        "meta": "dcss option"
    },
    {
        "caption": "enable_recast_spell",
        "value": "enable_recast_spell",
        "docText": "enable_recast_spell = true\n        If enabled, allows recasting the previously cast spell by pressing\n        Enter or '.' at the spellcasting prompt.",
        "meta": "dcss option"
    },
    {
        "caption": "confirm_action",
        "value": "confirm_action",
        "docText": "confirm_action += <regex>, <regex>, ...\n        (List option)\n        Casting a spell or ability with a name matching any of the given regular\n        expressions will prompt before use.",
        "meta": "dcss option"
    },
    {
        "caption": "regex_search",
        "value": "regex_search",
        "docText": "regex_search = false\n        If enabled, searching for items with ^F uses regular expression syntax\n        by default, instead of substring searching. Note that regardless of\n        this setting, queries prefixed with / will be performed as a regular\n        expression search and queries prefixed with = will be performed as a\n        substring search.",
        "meta": "dcss option"
    },
    {
        "caption": "autopickup_search",
        "value": "autopickup_search",
        "docText": "autopickup_search = false\n        If enabled, items are annotated with {autopickup} while searching\n        with ^F if they would be picked up by autopickup. This means that\n        searching for \"autopickup\" will list all such items. Note that this\n        option may slow down your game if you have a complicated custom\n        autopickup function.",
        "meta": "dcss option"
    },
    {
        "caption": "bad_item_prompt",
        "value": "bad_item_prompt",
        "docText": "bad_item_prompt = true\n        Ask for confirmation before using bad or dangerous scrolls and potions.",
        "meta": "dcss option"
    },
    {
        "caption": "auto_hide_spells",
        "value": "auto_hide_spells",
        "docText": "auto_hide_spells = false\n        When set to true, spells added to the library will automatically be\n        hidden.",
        "meta": "dcss option"
    },
    {
        "caption": "menu_arrow_control",
        "value": "menu_arrow_control",
        "docText": "menu_arrow_control = true\n        If set to false, disable using arrow keys to control menu selection.\n        This has no effect on mouse interactions with menus, and only affects\n        menus that use hotkeys for selection. (E.g. the main menu for local\n        play is not affected.)",
        "meta": "dcss option"
    },
    {
        "caption": "single_column_item_menus",
        "value": "single_column_item_menus",
        "docText": "single_column_item_menus = true\n        If set to false, certain item menus will list items in two columns,\n        as long as the menu is too long to fit in the current screen. If set\n        to true, all menus will use a single column under any circumstances.\n        This option is only available on local tiles and console; on WebTiles\n        all menus are single-column regardless of the value of this option.",
        "meta": "dcss option"
    },
    {
        "caption": "hp_warning",
        "value": "hp_warning",
        "docText": "hp_warning = 10\n        hp_warning gives \"* * * LOW HITPOINT WARNING * * *\" on the\n        danger channel when the player takes damage and their hitpoints\n        are less than this percentage of their maximum (use 0 to turn\n        off these messages).",
        "meta": "dcss option"
    },
    {
        "caption": "mp_warning",
        "value": "mp_warning",
        "docText": "mp_warning = 0\n        mp_warning gives \"* * * LOW MAGIC WARNING * * *\" on the danger\n        channel when the player's magic points drop below this\n        percentage of their maximum (use 0 to turn off these messages).",
        "meta": "dcss option"
    },
    {
        "caption": "hp_colour",
        "value": "hp_colour",
        "docText": "hp_colour = 70:yellow, 40:red\n        (List option)\n        hp_colour colours your Health appropriately in the status\n        display. In the default setting, your health will appear in\n        red if at less than 25%, yellow if at less than 50%, and in\n        the default colour otherwise.",
        "meta": "dcss option"
    },
    {
        "caption": "mp_colour",
        "value": "mp_colour",
        "docText": "mp_colour = 50:yellow, 25:red\n        (List option)\n        mp_colour does to Magic what hp_colour does to Health.",
        "meta": "dcss option"
    },
    {
        "caption": "stat_colour",
        "value": "stat_colour",
        "docText": "stat_colour = 1:lightred, 3:red\n        (List option)\n        stat_colour colours your stats if they drop below a given value,\n        in the order of their definition. This check takes place before\n        the ones for e.g. Might or degeneration.\n        For normal grey colouring, set it to\n           stat_colour -= 3:red",
        "meta": "dcss option"
    },
    {
        "caption": "status_caption_colour",
        "value": "status_caption_colour",
        "docText": "status_caption_colour = brown\n        Sets the colour that is used to display the captions in the status\n        area (for instance the \"Health:\" in \"Health: 10/10\").",
        "meta": "dcss option"
    },
    {
        "caption": "enemy_hp_colour",
        "value": "enemy_hp_colour",
        "docText": "enemy_hp_colour = green green brown brown magenta red\n        Colours enemy health appropriately in the monster pane. The\n        colourings correspond to full health, lightly wounded, moderately\n        wounded, heavily wounded, severely wounded, and almost dead. In\n        addition to colour names, \"default\" can be used in this list, and\n        omitted colour slots will be set to the default.",
        "meta": "dcss option"
    },
    {
        "caption": "clear_messages",
        "value": "clear_messages",
        "docText": "clear_messages = false\n        Setting this option to true will cause messages to cleared\n        between player actions (default is false which will delay the\n        clearing of messages until the message space is full).",
        "meta": "dcss option"
    },
    {
        "caption": "show_more",
        "value": "show_more",
        "docText": "show_more = true\n        Setting this option to false will cause the game not to prompt\n        if more than a window-full of messages are output at once. This\n        option has no effect if clear_messages is set. Additionally, it\n        has no effect on whether force_more_message triggers.",
        "meta": "dcss option"
    },
    {
        "caption": "small_more",
        "value": "small_more",
        "docText": "small_more = false\n        With small_more = false (default), the --more-- prompt is on a\n        separate line at the bottom of the message window. With\n        small_more = true, it is just the bottom left character.\n        Note: This will overwrite the first letter of the last message\n              line if clear_messages is set.",
        "meta": "dcss option"
    },
    {
        "caption": "show_newturn_mark",
        "value": "show_newturn_mark",
        "docText": "show_newturn_mark = true\n        When set to false, this option disables the underscore (_) displayed in\n        front of the first line of a turn.",
        "meta": "dcss option"
    },
    {
        "caption": "show_game_time",
        "value": "show_game_time",
        "docText": "show_game_time = true\n        By default, the counter in the stat area displays elapsed game time.\n        Most actions take one unit of time, but some are quicker (putting on a\n        ring, wielding a weapon, ...) and others are slower (swinging a weapon\n        with low skill, changing armour, ...).\n        When set to false, the counter will display player turns instead, which\n        is the number of actions taken regardless of their duration. It is this\n        turn count which is used for scoring (and this turn count is always\n        visible on the % overview screen).\n        The duration of the last action is displayed in parenthesis, after the\n        time/player turns display.",
        "meta": "dcss option"
    },
    {
        "caption": "equip_bar",
        "value": "equip_bar",
        "docText": "equip_bar = false\n        When set to true, this option replaces the noise bar with an\n        \"equipment bar\" showing the glyphs of all currently equipped items,\n        with gaps for available but currently unfilled equipment slots.",
        "meta": "dcss option"
    },
    {
        "caption": "animate_equip_bar",
        "value": "animate_equip_bar",
        "docText": "animate_equip_bar = false\n        When set to true, any items displayed in the equipment bar that have a\n        variable colour will be animated.",
        "meta": "dcss option"
    },
    {
        "caption": "item_stack_summary_minimum",
        "value": "item_stack_summary_minimum",
        "docText": "item_stack_summary_minimum = 4\n        If you step over a stack with this number or more of items in\n        it, the first description line will contain a summary of all the\n        items in the stack (up to 50 items), in a format which looks\n        like this:\n          Items here: !! \"\"\" ( )))))) [[[\n        Non-random artefacts and evokers will be coloured in lightcyan; random\n        artefacts will be in yellow; glowing or runed items will be in white,\n        unless you already know that they are not ego items.",
        "meta": "dcss option"
    },
    {
        "caption": "mlist_min_height",
        "value": "mlist_min_height",
        "docText": "mlist_min_height = 4\n        If there is extra space available for the message area and\n        monster list, the monster list will expand to this height\n        before letting the message area get more.\n        (Note that the monster list is only available for ASCII.)",
        "meta": "dcss option"
    },
    {
        "caption": "mlist_allow_alternative_layout",
        "value": "mlist_allow_alternative_layout",
        "docText": "mlist_allow_alternative_layout = false\n        Display the monster list wherever Crawl may find space on\n        your console display, usually to the left of the map, rather\n        than using the fixed position below the stat area.\n        This option is not supported in the tiles build.",
        "meta": "dcss option"
    },
    {
        "caption": "monster_item_view_coordinates",
        "value": "monster_item_view_coordinates",
        "docText": "monster_item_view_coordinates = false\n        Display player-centred coordinates in the ^x view description.",
        "meta": "dcss option"
    },
    {
        "caption": "monster_item_view_features",
        "value": "monster_item_view_features",
        "docText": "monster_item_view_features += <regex>, <regex>\n        (List option)\n        Display features matching the <regex> in the ^x view description. Each\n        <regex> is a regular expression describing a dungeon feature. This\n        regex should match the description when using the 'x' command. In case\n        the regex matches several descriptions, all such features are listed.\n\n        Two special keywords are active here, if any pattern matches the string\n        \"stair\" all features that can be interacted with using the stair\n        commands are shown; if any pattern matches \"trap\" all trap features\n        (including webs) are shown.",
        "meta": "dcss option"
    },
    {
        "caption": "msg_min_height",
        "value": "msg_min_height",
        "docText": "msg_min_height = 7\n        You can reduce this to give more space to the map display. The\n        minimum value is 5. In console, if this value is large enough\n        that the map won't fit, crawl will not start.",
        "meta": "dcss option"
    },
    {
        "caption": "msg_max_height",
        "value": "msg_max_height",
        "docText": "msg_max_height = 10\n        In console, if there is extra space available after the monster list\n        has expanded, the message area will expand up to this height.\n        The monster list will get the rest.\n        In tiles, control the maximum size of the message area. The viewport\n        will get the rest.",
        "meta": "dcss option"
    },
    {
        "caption": "msg_webtiles_height",
        "value": "msg_webtiles_height",
        "docText": "msg_webtiles_height = -1\n        This will set the height of the messages pane in (only) WebTiles,\n        scaling the map accordingly. Values less than `msg_min_height` will\n        have no impact; in this case the height of the message pane is\n        inherited from console (and so will typically be 7). One of these\n        lines may be reserved for `more` messages depending on other\n        settings.",
        "meta": "dcss option"
    },
    {
        "caption": "messages_at_top",
        "value": "messages_at_top",
        "docText": "messages_at_top = false\n        Put the message window at the top of the screen. This moves\n        the last message close to the centre of the view when not\n        using clear_messages=true.",
        "meta": "dcss option"
    },
    {
        "caption": "msg_condense_repeats",
        "value": "msg_condense_repeats",
        "docText": "msg_condense_repeats = true\n        If the same message is repeated multiple times during the same\n        turn, then it will be output in a condensed format indicating\n        how many times it was repeated. If the same output (including the\n        counter) is repeated over several turns, the Show Previous Message\n        command (Ctrl-P) will likewise condense them into one. For example:\n            The killer bee misses you. x5",
        "meta": "dcss option"
    },
    {
        "caption": "msg_condense_short",
        "value": "msg_condense_short",
        "docText": "msg_condense_short = true\n        If set, short messages on the same channel don't all start a new\n        line.",
        "meta": "dcss option"
    },
    {
        "caption": "show_travel_trail",
        "value": "show_travel_trail",
        "docText": "show_travel_trail = false (defaults to true for online servers)\n        When set to true, the path taken during autoexplore or travel\n        will be highlighted. The console colour and glyph of the travel trail\n        can be further configured using the feature option to override the\n        \"travel trail\" feature. If a travel trail is currently being displayed,\n        the Clear Map command (Ctrl-C) clears the trail instead of the map\n        (pressing it a second time then clears the map as usual).",
        "meta": "dcss option"
    },
    {
        "caption": "skill_focus",
        "value": "skill_focus",
        "docText": "skill_focus = true\n        When set to true, skills cycle between disabled, enabled and focus in\n        the skill screen. When set to false, they only toggle between enabled\n        and disabled. Setting the option to \"toggle\" adds a toggle to the skill\n        screen to change the behaviour in-game.",
        "meta": "dcss option"
    },
    {
        "caption": "default_show_all_skills",
        "value": "default_show_all_skills",
        "docText": "default_show_all_skills = false\n        When set to true, the skill (m) menu defaults to showing all skills,\n        even untrained and untrainable ones. As usual, '*' toggles back to\n        trainable mode. This option does not affect hints and tutorial games.",
        "meta": "dcss option"
    },
    {
        "caption": "monster_list_colour",
        "value": "monster_list_colour",
        "docText": "monster_list_colour = friendly:green, neutral:brown, good_neutral:brown\nmonster_list_colour += trivial:darkgrey, easy:lightgrey, tough:yellow,\n                       nasty:lightred, unusual:lightmagenta\n        (List option)\n        Change the colours used to display monster names in the monster list.\n        Valid keys, and their initial colours, are:\n\n           Monster attitudes:\n             friendly       - green\n             neutral        - brown (\"indifferent\")\n             good_neutral   - brown (\"peaceful\")\n\n           Threat levels for hostile monsters:\n             trivial        - darkgrey\n             easy           - lightgrey\n             tough          - yellow\n             nasty          - lightred\n             unusual        - lightmagenta\n\n        If a category is unset or has a missing colour, its colour defaults to\n        lightgrey. For removal with `-=`, the category name can be used alone,\n        and will clear any mapping for that category (setting it to lightgrey).",
        "meta": "dcss option"
    },
    {
        "caption": "monster_list_colour",
        "value": "monster_list_colour",
        "docText": "monster_list_colour = friendly:green, neutral:brown, good_neutral:brown\nmonster_list_colour += trivial:darkgrey, easy:lightgrey, tough:yellow,\n                       nasty:lightred, unusual:lightmagenta\n        (List option)\n        Change the colours used to display monster names in the monster list.\n        Valid keys, and their initial colours, are:\n\n           Monster attitudes:\n             friendly       - green\n             neutral        - brown (\"indifferent\")\n             good_neutral   - brown (\"peaceful\")\n\n           Threat levels for hostile monsters:\n             trivial        - darkgrey\n             easy           - lightgrey\n             tough          - yellow\n             nasty          - lightred\n             unusual        - lightmagenta\n\n        If a category is unset or has a missing colour, its colour defaults to\n        lightgrey. For removal with `-=`, the category name can be used alone,\n        and will clear any mapping for that category (setting it to lightgrey).",
        "meta": "dcss option"
    },
    {
        "caption": "view_delay",
        "value": "view_delay",
        "docText": "view_delay = 600\n        Controls the speed of animations from, e.g., ranged and magical\n        attacks and invocations with visual effects.",
        "meta": "dcss option"
    },
    {
        "caption": "reduce_animations",
        "value": "reduce_animations",
        "docText": "reduce_animations = false\n        If set to true, simplify some animations so that incremental steps are\n        not drawn. For example, for casting a beam spell or firing a ranged\n        weapon, only the final beam path is shown. Defaults to `true` for\n        webtiles games.",
        "meta": "dcss option"
    },
    {
        "caption": "use_animations",
        "value": "use_animations",
        "docText": "use_animations = beam, range, hp, monster_in_sight, pickup, monster, player\nuse_animations += branch_entry\n        Controls whether or not to run special animations, such as when being\n        banished. All animations are enabled by default, and the categories\n        that can be enabled/disabled independently are:\n\n          beam             - Animation for casting a beam spell or firing a\n                             ranged weapon.\n          range            - Flashes the screen with an overlay indicating the\n                             actual range of an attempted spell, if there are\n                             no monsters within the spell's range.\n          hp               - Flashes the screen red whenever you take damage\n                             below the level indicated by the hp_warning\n                             option.\n          monster_in_sight - When attempting to rest, run, travel, or explore\n                             with dangerous monsters in view, flashes the parts\n                             of the screen where monsters aren't, in order to\n                             help make the monsters themselves more visible.\n          pickup           - Various animations that occur when picking up\n                             items. Currently only runes and the orb have\n                             animations.\n          monster          - Animations that run when a monster uses an ability\n                             or casts a spell.\n          player           - Animations that run when the player uses an\n                             ability or casts a spell.\n          branch_entry     - Animations that run when you enter a new branch.\n                             Currently only the Abyss and Zot have animations.",
        "meta": "dcss option"
    },
    {
        "caption": "use_animations",
        "value": "use_animations",
        "docText": "use_animations = beam, range, hp, monster_in_sight, pickup, monster, player\nuse_animations += branch_entry\n        Controls whether or not to run special animations, such as when being\n        banished. All animations are enabled by default, and the categories\n        that can be enabled/disabled independently are:\n\n          beam             - Animation for casting a beam spell or firing a\n                             ranged weapon.\n          range            - Flashes the screen with an overlay indicating the\n                             actual range of an attempted spell, if there are\n                             no monsters within the spell's range.\n          hp               - Flashes the screen red whenever you take damage\n                             below the level indicated by the hp_warning\n                             option.\n          monster_in_sight - When attempting to rest, run, travel, or explore\n                             with dangerous monsters in view, flashes the parts\n                             of the screen where monsters aren't, in order to\n                             help make the monsters themselves more visible.\n          pickup           - Various animations that occur when picking up\n                             items. Currently only runes and the orb have\n                             animations.\n          monster          - Animations that run when a monster uses an ability\n                             or casts a spell.\n          player           - Animations that run when the player uses an\n                             ability or casts a spell.\n          branch_entry     - Animations that run when you enter a new branch.\n                             Currently only the Abyss and Zot have animations.",
        "meta": "dcss option"
    },
    {
        "caption": "unusual_monster_items",
        "value": "unusual_monster_items",
        "docText": "unusual_monster_items += <regex>, <regex>, ...\n        (List option)\n        Monsters whose inventory items match a regex in this comma-separated\n        list will display with unusual threat level. E.g.\n            unusual_monster_items =  wand\n            unusual_monster_items += disto,chaos\n            unusual_monster_items += curare,atropa,datura,dispersal\n            unusual_monster_items += throwing net\n        The item descriptions matched against are the short item names that\n        ordinarily display when a monster is examined with 'xv'.\n\n        This option determines which monsters will be regarded as \"unusual\" for\n        the options tile_show_threat_levels (tiles only), monster_list_colour,\n        and unusual_highlight (console only).",
        "meta": "dcss option"
    },
    {
        "caption": "darken_beyond_range",
        "value": "darken_beyond_range",
        "docText": "darken_beyond_range = true\n        If set to true, everything beyond range when targeting will be\n        coloured grey. Setting this to false will also disable the \"range\"\n        category of the use_animations option.",
        "meta": "dcss option"
    },
    {
        "caption": "show_blood",
        "value": "show_blood",
        "docText": "show_blood = true\n        Setting this option to false will hide blood splatters in the floor\n        and on the walls. In tiles, corpses will be displayed as skeletons.",
        "meta": "dcss option"
    },
    {
        "caption": "food_snacking_frequency",
        "value": "food_snacking_frequency",
        "docText": "food_snacking_frequency = 40\n        Controls the frequency of producing flavour messages when walking on a\n        cache of fruit, meat, or baked goods, with the number corresponding to a\n        percent chance. As one would expect, 100% means always, 0% means never,\n        and the default 40% means two-fifths of the time. Unless the frequency\n        is set to 100%, the chance is lowered to a fourth if there are hostile\n        enemies in sight in most situations.",
        "meta": "dcss option"
    },
    {
        "caption": "fountain_line_frequency",
        "value": "fountain_line_frequency",
        "docText": "fountain_line_frequency = 40\n        Controls the frequency of producing flavour messages when walking on\n        any type of fountain, with the number corresponding to a percent\n        chance. As with the previous option, 100% means always, 0% means\n        never, the default 40% means two-fifths of the time, and a non-100%\n        frequency has lowered chances if hostile enemies are in sight.",
        "meta": "dcss option"
    },
    {
        "caption": "force_more_message",
        "value": "force_more_message",
        "docText": "force_more_message += <regex>, <regex>\n        (List option)\n        Any message that contains a regex specified here will enforce a\n        --More-- prompt, so it can be used to highlight really important\n        events. This option ignores the show_more option. This option will\n        not interrupt travel delays by default; use runrest_stop_message\n        for that instead. The syntax is identical to that of\n        runrest_ignore_message (3-f).",
        "meta": "dcss option"
    },
    {
        "caption": "flash_screen_message",
        "value": "flash_screen_message",
        "docText": "flash_screen_message += <regex>, <regex>\n        (List option)\n        Any message that contains a regex specified here will flash the\n        screen yellow, so it can be used to highlight very important events\n        indeed.\n        The syntax is identical to that of force_more_message.",
        "meta": "dcss option"
    },
    {
        "caption": "cloud_status",
        "value": "cloud_status",
        "docText": "cloud_status = true\n        Whether to show the \"Cloud\" status light; defaults to true, except if\n        playing with tiles, where you can see the cloud on top of you, where it\n        defaults to false.",
        "meta": "dcss option"
    },
    {
        "caption": "always_show_zot",
        "value": "always_show_zot",
        "docText": "always_show_zot = false\n        Whether to show the \"Zot\" status light at all times, even when you've\n        got plenty of time left.",
        "meta": "dcss option"
    },
    {
        "caption": "always_show_gems",
        "value": "always_show_gems",
        "docText": "always_show_gems = false\n        Whether to show the \"Gem\" status light, indicating how long until the\n        gem in the current branch shatters (if applicable).",
        "meta": "dcss option"
    },
    {
        "caption": "more_gem_info",
        "value": "more_gem_info",
        "docText": "more_gem_info = false\n        Whether to show held gem time limits and sfx for shattering.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_show",
        "value": "action_panel_show",
        "docText": "action_panel_show = true\n        Whether to show or hide the action panel. This option is automatically\n        saved between games, and is only available on Webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel",
        "value": "action_panel",
        "docText": "action_panel = /?!}\n        The above is the default list of items to show on the action panel.\n        The valid symbols are\n        ?       Scrolls\n        !       Potions\n        }       Misc. items\n        /       Wands\n        If set to an empty string, the panel will be hidden entirely. The order\n        of item types in this option determines the order of item types in the\n        action panel; sub-order is determined by inventory letter. This option\n        is only available on Webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_filter",
        "value": "action_panel_filter",
        "docText": "action_panel_filter += <regex>, <regex>, ...\n        (List option)\n        Any item matching the filter expression(s) will not be shown on the\n        action panel. This option is only available on Webtiles.\n        The file dat/defaults/misc.txt contains default settings.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_show_unidentified",
        "value": "action_panel_show_unidentified",
        "docText": "action_panel_show_unidentified = false\n        When set to true, the action panel will show unidentified scrolls\n        and potions. This option is only available on Webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_scale",
        "value": "action_panel_scale",
        "docText": "action_panel_scale = 100 (persistent)\n        A percentage scale factor to apply to the action panel. This option is\n        automatically saved between games, and only available on Webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_orientation",
        "value": "action_panel_orientation",
        "docText": "action_panel_orientation = horizontal (persistent)\n        (values: horizontal | vertical)\n        When set to 'horizontal', the action panel will be placed along the top\n        edge of the screen. When set to 'vertical', the panel will be placed\n        along the left edge. This option is automatically saved between games,\n        and is only available on Webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_font_family",
        "value": "action_panel_font_family",
        "docText": "action_panel_font_family = monospace (persistent)\naction_panel_font_size = 16 (persistent)\n        Font used for displaying quantities of items in the action panel.\n        The size option is automatically saved between games, and both are only\n        available on Webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_font_size",
        "value": "action_panel_font_size",
        "docText": "action_panel_font_family = monospace (persistent)\naction_panel_font_size = 16 (persistent)\n        Font used for displaying quantities of items in the action panel.\n        The size option is automatically saved between games, and both are only\n        available on Webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "action_panel_glyphs",
        "value": "action_panel_glyphs",
        "docText": "action_panel_glyphs = false\n        If set to true, show glyphs instead of tiles in the action panel. This\n        option is only available on webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "menu_colour",
        "value": "menu_colour",
        "docText": "menu_colour ^= <match>:<colour>:<regex>, <colour>:<regex>, ...\n        (Ordered list option)\n        For menus and other screens that print items (and a few other cases; see\n        list below) this option allows you to control the colour that is used to\n        display a line by using a regular expression. For example, the default\n        options use the following line:\n            menu_colour += lightmagenta:.*orb.*Zot\n        to highlight the orb of Zot as purple in the item pickup menu. For\n        items, the regular expression is also checked against various item\n        annotations as described below. For example, the following line:\n            menu_colour += yellow:.*emergency_item.*\n        causes items that get the `emergency_item` annotation (such as scrolls\n        of teleportation) to be highlighted in yellow in inventory and other\n        item menus.\n\n        There can be several statements in a list, and also several menu_colour\n        lines. When using several menu_colour lines, the colour of the _first_\n        matching regex is applied; the option supports `^=`, which is useful\n        for overriding default settings without building the list from scratch.\n        For a list of colours, check the colour option in 5-a.\n\n        The `match` part specifies which listings are affected by the\n        colouring. If you specify 'item', or completely skip the <match>:\n        part, then the pattern will apply to all item-related categories.\n        Possible item-related values for match are:\n            inventory     (inventory and pickup/drop menus)\n            pickup        (pickup menus, and items on the floor)\n            equip         (the [ and \" screens)\n            use_item      (equip, unequip, read, quaff, etc)\n            shop          (shop menus)\n            stash         (the results from Ctrl-F)\n            description   (the \\ screen)\n            stats         (wielded/quivered items on the main screen stats\n                           panel)\n            resists       (items on the % screen)\n\n        Possible non-item-related values are as follows; these require an\n        explicit `match`:\n            help          (the manual)\n            notes         (the ?: screen)\n\n        Items are annotated with many useful tags that make controlling colour\n        easier. Items are annotated with their base type (armour, weapon, wand,\n        etc.) They are also annotated with certain tags indicating usefulness:\n            forbidden       (Your god would hate it if you used this item.)\n            emergency_item  (This item is invaluable in emergencies.)\n            good_item       (This item is generally a good item.)\n            dangerous_item  (Using this item can be dangerous.)\n            bad_item        (This item is generally a bad item.)\n            useless_item    (This item is of no use to you.)\n\n        as well as a range of other properties:\n            equipped        (Equipped items.)\n            ego             (Items with an offensive/defensive magical brand.)\n            artefact        (For artefacts, whether identified or not.)\n            unrand          (For non-random artefacts.)\n            melee           (Melee weapons, including magical staves.)\n            ranged          (Ranged weapons.)\n            evoker          (Elemental evokers.)\n            identified      (The item is fully identified.)\n            known           (You recognize the item's subtype.)\n            unidentified    (You don't recognize the item's subtype.)\n            god gift        (an item gifted to you by a god.)\n            cursed          (Cursed by Ashenzari.)\n\n        (Of course, some of these will only apply to some menus inherently: only\n        carried items can be equipped, only non-carried items can be\n        unidentified, etc.)\n\n        When looking for menu_colour matches, these prefixes are treated as if\n        they are prepended to the actual item name, for example:\n            identified evil_item forbidden misc a piece from Xom's\n            chessboard (15/15)\n\n        The same prefixes can also be used for highlighting prompts pertaining\n        to items matching the description, or to define autopickup_exceptions.\n\n        For more examples, see the default settings in\n        `dat/defaults/menu_colours.txt`.\n\n        menu_colour can also be used to colour in-game morgue notes (readable\n        in colour with `?:`), by using the `notes` match. For example, the\n        following line will show level-ups in green:\n            menu_colour ^= notes:green:Reached XP level",
        "meta": "dcss option"
    },
    {
        "caption": "message_colour",
        "value": "message_colour",
        "docText": "message_colour ^= <colour>:<channel>:<regex>, <colour>:<regex>, ...\n        (Ordered list option)\n        message_colour allows you to override colours for individual\n        messages. For instance, if you find the low hp warning to be\n        insufficiently attention grabbing, you could do something like\n             message_colour += yellow:LOW HITPOINT WARNING\n        You can also narrow the message match to a specific channel:\n             message_colour += lightred:god:xom\n        If you don't want to see a message at all, you can mute it:\n             message_colour += mute:You start resting",
        "meta": "dcss option"
    },
    {
        "caption": "fire_items_start",
        "value": "fire_items_start",
        "docText": "fire_items_start = a\n        Sets the first inventory item to consider when cycling through missiles\n        to fire via the quiver. The default is a.",
        "meta": "dcss option"
    },
    {
        "caption": "fire_order",
        "value": "fire_order",
        "docText": "fire_order  = launcher, throwing, inscribed, spell, evokable, ability\n        (Ordered list option)\n        Controls the order of items when cycling the quiver. Types\n        should be separated by commas and items that appear first get\n        higher priority. Absent action types are not used when cycling\n        the quiver. This option also affects autoquivering on game start.\n\n        'launcher' refers to firing a wielded ranged weapon (i.e. crossbow,\n        bow, sling). 'throwing' refers to all throwing ammo. Specific throwing\n        ammo types can be referred to by name ('javelin', 'boomerang', 'stone',\n        'rock', 'net', 'dart'), but order of these only affects order internal\n        to throwing ammo types; 'inscribed' can also be used to control the\n        order of ammo that has been inscribed with \"+f\". See the \"Inscriptions\"\n        section of Crawl's manual for more information about inscriptions. Ammo\n        types can be separated with a \"/\" to indicate that inventory order\n        should determine cycle order. Order within types is determined by letter\n        order in the relevant submenu (e.g. inventory for throwing, etc).",
        "meta": "dcss option"
    },
    {
        "caption": "fire_order_spell",
        "value": "fire_order_spell",
        "docText": "fire_order_spell = all\n        (list option)\n        This allows you to exclude or include spells from the fire order by\n        name. Order within spells is determined by letter assignment, this\n        only controls what is in the list. This can be a comma separated list\n        of spells by name, and supports += and -=. It allows two special values:\n        'all' is shorthand for all spells, and 'attack' is shorthand for the\n        list of spells that are considered damage spells for autofight\n        purposes; see autofight_fires for more information.",
        "meta": "dcss option"
    },
    {
        "caption": "fire_order_ability",
        "value": "fire_order_ability",
        "docText": "fire_order_ability = all\nfire_order_ability -= berserk\n        (list option)\n        This allows you to exclude or include abilities from the fire order by\n        name. Order within abilities is determined by letter assignment, this\n        only controls what is in the list. This can be a comma separated list\n        of abilities by name, and supports += and -=. It allows two special\n        values: 'all' is shorthand for all spells, and 'attack' is shorthand for\n        the list of abilities that are considered damage spells for autofight\n        purposes; see autofight_fires for more information.",
        "meta": "dcss option"
    },
    {
        "caption": "fire_order_ability",
        "value": "fire_order_ability",
        "docText": "fire_order_ability = all\nfire_order_ability -= berserk\n        (list option)\n        This allows you to exclude or include abilities from the fire order by\n        name. Order within abilities is determined by letter assignment, this\n        only controls what is in the list. This can be a comma separated list\n        of abilities by name, and supports += and -=. It allows two special\n        values: 'all' is shorthand for all spells, and 'attack' is shorthand for\n        the list of abilities that are considered damage spells for autofight\n        purposes; see autofight_fires for more information.",
        "meta": "dcss option"
    },
    {
        "caption": "fail_severity_to_quiver",
        "value": "fail_severity_to_quiver",
        "docText": "fail_severity_to_quiver = 2\n        Exclude spells with this miscast level or higher from quiver cycling\n        and automatic quivering. -1 can be used to exclude spells entirely from\n        automatic quivering. See fail_severity_to_confirm for a breakdown of\n        miscast values.",
        "meta": "dcss option"
    },
    {
        "caption": "launcher_autoquiver",
        "value": "launcher_autoquiver",
        "docText": "launcher_autoquiver = true\n        If set to true, change the quiver to the launcher on wielding it;\n        if set to false, the quiver is unchanged on wielding a launcher.\n        (Firing via tab or `v` will still work.).",
        "meta": "dcss option"
    },
    {
        "caption": "quiver_menu_focus",
        "value": "quiver_menu_focus",
        "docText": "quiver_menu_focus = false (persistent)\n        If set to true, start the quiver menu in \"focused\" mode where action\n        lettering is drawn from item/spell/ability lettering and only one of\n        these can be selected at a time. Otherwise, any action can be selected\n        from the menu, but lettering is not stable in this menu. This option\n        is persistent so that the current value in the quiver menu is saved\n        across games and automatically reloaded unless set explicitly.",
        "meta": "dcss option"
    },
    {
        "caption": "channel.CHANNEL_NAME",
        "value": "channel.CHANNEL_NAME",
        "docText": "channel.CHANNEL_NAME = (COLOUR | mute | default | on | off | plain)\n    CHANNEL_NAME can currently be one of these:\n       plain           = regular text (and things \"uncoloured\")\n       prompt          = input prompts to the player\n       god             = messages from the gods\n       duration        = messages about character spells/effects wearing off\n       danger          = serious threats to the character's existence\n       warning         = various other warnings\n       recovery        = recovery from disease/stat loss/poison conditions\n       talk            = monsters talking\n       talk_visual     = monster performing some action that the player sees\n       timed_portal    = portal timeout messages\n       sound           = other sounds\n       intrinsic_gain  = level/stat/species power gains\n       mutation        = gain/lose mutations\n       monster_spell   = messages about monsters gesturing or casting spells\n       monster_enchant = messages pertaining to monster enchantments\n       monster_warning = monsters coming into view\n       friend_spell    = as monster_spell, but only for friendly monsters\n       friend_enchant  = as monster_enchant, but only for friendly monsters\n       friend_action   = other actions by friendly monsters\n       monster_damage  = messages telling how damaged a monster is\n       monster_target  = messages marking the monster as a target (unused)\n       banishment      = messages about banishing and being banished to the Abyss\n       equipment       = messages indicating worn/wielded equipment\n       floor           = messages when looking at or walking over a floor item\n       multiturn       = indicates long actions (wearing armour, dissecting etc.)\n       examine         = messages from examining your surroundings\n       examine_filter  = boring messages from examining your surroundings\n       diagnostic      = debugging messages\n       error           = error messages\n       tutorial        = messages from the tutorial\n       orb             = messages about the Orb of Zot\n       hell_effect     = messages about environmental effects of the Hells\n       dgl_message     = messages from watchers (online console games only)\n\n    The channel options are\n       mute        = show no messages from channel (dangerous, be careful!)\n       default     = turn channel on to its default scheme\n       alternative = turn channel on to its alternative \"colourful\" scheme\n       on          = same as default\n       plain       = make channel the same colour as the \"plain\" channel\n                     (won't do anything silly like \"mute\" if plain == mute,\n                     though)\n       off         = same as plain",
        "meta": "dcss option"
    },
    {
        "caption": "autoinscribe",
        "value": "autoinscribe",
        "docText": "autoinscribe += <regex>:<inscription>\n        (Ordered list option, one value per line)\n        Any item whose description contains the regex will be automatically\n        inscribed (if autopickup is toggled on).\n\n        For example, it can be used to avoid accidentally using charges of\n        potentially dangerous wands, as in\n             autoinscribe += wand of polymorph:!V\n\n        The menu colour prefixes (forbidden etc.) can also be used here.\n        For example:\n             autoinscribe += (bad|dangerous)_item.*scroll:!r\n        will prevent accidentally reading any identified bad or\n        potentially dangerous scrolls.\n\n        Unlike most ordered list options, multiple matching entries all have\n        an effect: the order only determines the order of the inscriptions.",
        "meta": "dcss option"
    },
    {
        "caption": "show_god_gift",
        "value": "show_god_gift",
        "docText": "show_god_gift = unident|yes|no\n        Appends {god gift} to items that originated as one. If set to\n        \"unident\", items will lose this tag once their properties are\n        fully known. Regardless of this setting, you can see the item's\n        origin in its description.",
        "meta": "dcss option"
    },
    {
        "caption": "macros",
        "value": "macros",
        "docText": "macros += M \\{9} za\n        This options adds a macro or keymap.\n\n        Each definition consists of exactly three arguments separated by\n        spaces. The first one describes whether it is a macro or a keymap.\n        Keymaps are generally most useful for renaming keys entirely and are\n        processed before macros. If you don't know which to use, you probably\n        want a macro.\n\n        \"M\" macros (processed when entering game commands)\n\n        Specialized keymap contexts:\n        \"K1\" level-map context keymap (during the `X` view only)\n        \"K2\" targeting context keymap (during targeting and `x` view)\n        \"K3\" confirmation context keymap (when responding to a y/n prompt)\n        \"K4\" menu context keymap (all menus, except the skill menu)\n\n        Default keymap context:\n        \"K\" default context keymap (any other context)\n\n        The second argument describes the trigger key and consists the\n        character or keycode of that key (for example 'a', 'A' or \\{9} for the\n        A, Shift-A or Tab keys). The third argument describes the macro or\n        keymap action and consists the command sequence to be associated with\n        the second argument. (for example \"zap\" for zapping the spell in slot a\n        at the previous target). Function keys, numpad keys, and navigation\n        keys can be entered via text keycodes (examples: \\{F2}, \\{NP-},\n        \\{PgUp}, \\{Down}, etc).\n\n        If you have any macros/keymaps in your rc file, they will automatically\n        be saved to your macro.txt file on load, silently overriding any\n        macros/keymaps already saved to your macro.txt file.\n\n        This syntax is based on but not identical to the format used in the\n        macro.txt file.",
        "meta": "dcss option"
    },
    {
        "caption": "flush.failure",
        "value": "flush.failure",
        "docText": "flush.failure = true\nflush.command = false\nflush.message = false\n        These are useful when using macros. Setting one of these\n        sub-options to true will cause the entire input buffer to be\n        dumped and thus effectively stop the macro. The sub-options\n        currently are\n           failure -- when spells/abilities get miscast\n           command -- whenever the game is about to get the next command\n           message -- whenever the game outputs a non-mute message",
        "meta": "dcss option"
    },
    {
        "caption": "flush.command",
        "value": "flush.command",
        "docText": "flush.failure = true\nflush.command = false\nflush.message = false\n        These are useful when using macros. Setting one of these\n        sub-options to true will cause the entire input buffer to be\n        dumped and thus effectively stop the macro. The sub-options\n        currently are\n           failure -- when spells/abilities get miscast\n           command -- whenever the game is about to get the next command\n           message -- whenever the game outputs a non-mute message",
        "meta": "dcss option"
    },
    {
        "caption": "flush.message",
        "value": "flush.message",
        "docText": "flush.failure = true\nflush.command = false\nflush.message = false\n        These are useful when using macros. Setting one of these\n        sub-options to true will cause the entire input buffer to be\n        dumped and thus effectively stop the macro. The sub-options\n        currently are\n           failure -- when spells/abilities get miscast\n           command -- whenever the game is about to get the next command\n           message -- whenever the game outputs a non-mute message",
        "meta": "dcss option"
    },
    {
        "caption": "additional_macro_file",
        "value": "additional_macro_file",
        "docText": "additional_macro_file = path/to/filename\n        Add an additional macro file to be loaded after macro.txt.\n        You can have multiple additional_macro_file lines.",
        "meta": "dcss option"
    },
    {
        "caption": "bindkey",
        "value": "bindkey",
        "docText": "bindkey = [^D] CMD_CHARACTER_DUMP\n        Change which key invokes which command at a lower level of\n        operation than macros. Useful in that macros cannot (yet)\n        invoke each other, but a macro can invoke a command whose\n        key has changed.\n        The syntax is always the same: [key] command\n        First, in square brackets, list the key you want to use, with\n        ^X meaning Ctrl-X. After that name the command to be bound to\n        that key. You can bind several commands to the same key, as long\n        as they take effect in different areas of the game, i.e. one\n        targeting command and one for the main game. Likewise, you can\n        bind the same command to different keys. You can use the \\{} syntax\n        from macro binds to write keycodes, and keycodes like \"F1\", \"NP+\",\n        and \"Down\" can appear directly in [].\n        For a full list of possible commands, see keybind.txt.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_show_items",
        "value": "tile_show_items",
        "docText": "tile_show_items = <glyphs>\n        This option controls the order of items in the tiles\n        inventory. By default, its value is: !?/=([)}:|\n        Items with glyphs not in the list will be shown last.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_skip_title",
        "value": "tile_skip_title",
        "docText": "tile_skip_title = false\n        When this is set to true, you won't be prompted for a key at the title\n        screen when the game has finished loading and will be taken directly to\n        the starting menu.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_menu_icons",
        "value": "tile_menu_icons",
        "docText": "tile_menu_icons = true\n        Causes inventory menus and a few other ones to include tiled icons\n        and the menus to be displayed in up to two columns to make up for\n        the reduction of space.\n        If you would rather have the plain menus set this option to false.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_player_col",
        "value": "tile_player_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_monster_col",
        "value": "tile_monster_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_neutral_col",
        "value": "tile_neutral_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_peaceful_col",
        "value": "tile_peaceful_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_friendly_col",
        "value": "tile_friendly_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_plant_col",
        "value": "tile_plant_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_item_col",
        "value": "tile_item_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_unseen_col",
        "value": "tile_unseen_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_floor_col",
        "value": "tile_floor_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_wall_col",
        "value": "tile_wall_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_mapped_floor_col",
        "value": "tile_mapped_floor_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_mapped_wall_col",
        "value": "tile_mapped_wall_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_explore_horizon_col",
        "value": "tile_explore_horizon_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_door_col",
        "value": "tile_door_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_downstairs_col",
        "value": "tile_downstairs_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_upstairs_col",
        "value": "tile_upstairs_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_branchstairs_col",
        "value": "tile_branchstairs_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_portal_col",
        "value": "tile_portal_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_transporter_col",
        "value": "tile_transporter_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_transporter_landing_col",
        "value": "tile_transporter_landing_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_feature_col",
        "value": "tile_feature_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_trap_col",
        "value": "tile_trap_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_water_col",
        "value": "tile_water_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_deep_water_col",
        "value": "tile_deep_water_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_lava_col",
        "value": "tile_lava_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_excluded_col",
        "value": "tile_excluded_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_excl_centre_col",
        "value": "tile_excl_centre_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "tile_window_col",
        "value": "tile_window_col",
        "docText": "tile_player_col              = white\ntile_monster_col             = #660000\ntile_neutral_col             = #660000\ntile_peaceful_col            = #664400\ntile_friendly_col            = #664400\ntile_plant_col               = #446633\ntile_item_col                = #005544\ntile_unseen_col              = black\ntile_floor_col               = #333333\ntile_wall_col                = #666666\ntile_mapped_floor_col        = #222266\ntile_mapped_wall_col         = #444499\ntile_explore_horizon_col     = #6b301b\ntile_door_col                = #775544\ntile_downstairs_col          = #ff00ff\ntile_upstairs_col            = cyan\ntile_branchstairs_col        = #ff7788\ntile_portal_col              = #ffdd00\ntile_transporter_col         = #0000ff\ntile_transporter_landing_col = #5200aa\ntile_feature_col             = #997700\ntile_trap_col                = #aa6644\ntile_water_col               = #114455\ntile_deep_water_col          = #001122\ntile_lava_col                = #552211\ntile_excluded_col            = #552266\ntile_excl_centre_col         = #552266\ntile_window_col              = #558855\n    These options allow configuring the colours used for the minimap of the dungeon\n    level. Using RGB hex codes is also allowed, such as #00ff00 for green.\n       tile_player_col              - colour of player position, as well as of\n                                      map centre during level map mode ('X')\n       tile_monster_col             - colour of hostile monsters\n       tile_neutral_col             - colour of neutral monsters\n       tile_peaceful_col            - colour of peaceful monsters\n       tile_friendly_col            - colour of friendly monsters\n       tile_plant_col               - colour of zero xp monsters (plant and fungus)\n       tile_item_col                - colour of known or detected items\n       tile_unseen_col              - colour of unseen areas (usually stone)\n       tile_floor_col               - colour of floor\n       tile_wall_col                - colour of any wall type\n       tile_mapped_floor_col        - colour of floor detected via magic mapping\n       tile_mapped_wall_col         - colour of walls detected via magic mapping\n       tile_explore_horizon_col     - colour of the edge of explored territory\n       tile_door_col                - colour of known doors, open or closed\n       tile_downstairs_col          - colour of downstairs\n       tile_upstairs_col            - colour of upstairs, including branch exits\n       tile_branchstairs_col        - colour of branch entrances\n       tile_portal_col              - colour of any portal\n       tile_transporter_col         - colour of transporters\n       tile_transporter_landing_col - colour of transporter destinations\n       tile_feature_col             - colour of any non-stair, non-portal feature\n                                      (altar, shop, fountain, ...)\n       tile_trap_col                - colour of known traps of any type\n       tile_water_col               - colour of shallow water\n       tile_deep_water_col          - colour of deep water\n       tile_lava_col                - colour of lava\n       tile_excluded_col            - colour of squares excluded for autotravel\n                                      (will only override tile_floor_col colour)\n       tile_excl_centre_col         - colour of exclusion centre (overrides\n                                      tile_floor_col and tile_item_col, only)\n       tile_window_col              - colour of the rectangular view window",
        "meta": "dcss option"
    },
    {
        "caption": "custom_text_colours",
        "value": "custom_text_colours",
        "docText": "custom_text_colours = lightmagenta:#fd59fa, blue:#005afa\n        Remaps any of the 16 basic terminal colours used by Crawl's interface,\n        specified as pairs of colour names and RGB hex codes. Any colours not\n        included in the list will use their default values.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_update_rate",
        "value": "tile_update_rate",
        "docText": "tile_update_rate = 1000\n        The number of milliseconds that tick by before the screen is redrawn\n        without any input. If game response is slow, try increasing this\n        number. If, on the other hand, response time is fine but it takes too\n        long for redrawings to happen, set it to a lower value.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_runrest_rate",
        "value": "tile_runrest_rate",
        "docText": "tile_runrest_rate = 100\n        The number of milliseconds that tick by before the screen is redrawn\n        when running or resting. If Crawl is slow while running or resting,\n        increase this number.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_key_repeat_delay",
        "value": "tile_key_repeat_delay",
        "docText": "tile_key_repeat_delay = 200\n        If you hold down a key, there's a delay until the pressed key will\n        take action. This option controls this delay, in milliseconds. If it\n        is set to 0 key presses will never repeat.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_tooltip_ms",
        "value": "tile_tooltip_ms",
        "docText": "tile_tooltip_ms = 500\n        The number of milliseconds before a tooltip appears when hovering the\n        mouse over part of the screen. Setting this option to 0 will\n        deactivate the tooltips entirely.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_tag_pref",
        "value": "tile_tag_pref",
        "docText": "tile_tag_pref = (none| named | enemy | tutorial )\n        This setting determines which monsters receive a text tag in the local\n        tiles dungeon view.\n            auto     - choses depending on game mode\n            none     - turns off all tags\n            all      - shows tags for all enemies\n            named    - shows names of all named monsters, ally or enemy\n            enemy    - shows names of named enemy monsters\n            tutorial - shows names of all monsters not yet killed this game\n                       and of named enemy monsters\n        Examples of \"named monsters\" are uniques and ghosts. In auto mode,\n        regular games use \"enemy\", arena mode uses \"named\", and tutorial/hints\n        modes use \"tutorial\".",
        "meta": "dcss option"
    },
    {
        "caption": "tile_window_width",
        "value": "tile_window_width",
        "docText": "tile_window_width  = -90\ntile_window_height = -90\n        Options for setting the width and height of the window, in pixels. When\n        positive, these set the window size directly. When set to 0, the window\n        is auto-sized. When set to a negative number, these values will be\n        interpreted as the screen's resolution minus the given value. The width\n        may be overridden by `tile_window_ratio`, below, in which case\n        `tile_window_width` is used as a maximum width. On some window\n        managers, the position of OS user interface elements may enforce\n        smaller values for these. For example, on MacOS the window will not\n        overlap with the dock or menu bar.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_window_height",
        "value": "tile_window_height",
        "docText": "tile_window_width  = -90\ntile_window_height = -90\n        Options for setting the width and height of the window, in pixels. When\n        positive, these set the window size directly. When set to 0, the window\n        is auto-sized. When set to a negative number, these values will be\n        interpreted as the screen's resolution minus the given value. The width\n        may be overridden by `tile_window_ratio`, below, in which case\n        `tile_window_width` is used as a maximum width. On some window\n        managers, the position of OS user interface elements may enforce\n        smaller values for these. For example, on MacOS the window will not\n        overlap with the dock or menu bar.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_window_ratio",
        "value": "tile_window_ratio",
        "docText": "tile_window_ratio  = 1618\n        When set to a positive value, tiles will use this value to determine\n        the window width as a ratio of the window height, scaled by 1000. In\n        particular: w = h * tile_window_ratio / 1000.\n        If this value is set, `tile_window_width` is used as a maximum width.\n        The minimum width is determined by UI layout. This value is ignored in\n        full screen mode. Set to a value <= 0 to disable.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_window_limit_size",
        "value": "tile_window_limit_size",
        "docText": "tile_window_limit_size = true\n        Limits the minimum window size. It should only be disabled for testing\n        purposes.",
        "meta": "dcss option"
    },
    {
        "caption": "game_scale",
        "value": "game_scale",
        "docText": "game_scale = 1\n        An integer scale value between 1 and 8 that will increase the size of\n        all UI elements. This can be used to simulate high-dpi rendering on\n        high resolution displays that don't directly support high-dpi, or adjust\n        scaling for very large displays. For a 4k display, we recommend a value\n        of 3 or 4, and a 2k display will typically look best with a value of 2.\n        Local tiles only.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_map_pixels",
        "value": "tile_map_pixels",
        "docText": "tile_map_pixels = 0\n        The maximum number of pixels each minimap square should take up. If you\n        have a low resolution, and feel like the inventory is too small, you\n        can try setting this to 1 to get more space for the inventory. The\n        downside is that travelling by clicking on the minimap becomes much\n        harder. If set to zero, it will auto-size the minimap.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_viewport_scale",
        "value": "tile_viewport_scale",
        "docText": "tile_viewport_scale = 1.0\n        A scale factor to apply to the dungeon view. The minimum value is 0.2\n        and the maximum value is determined by resolution; zoom will be capped\n        so that at a minimum, your line of sight is always visible. This can\n        also be adjusted in-game in local tiles with ctrl-'-' and ctrl-'='\n        (or ctrl-'+' on some keyboards).",
        "meta": "dcss option"
    },
    {
        "caption": "tile_map_scale",
        "value": "tile_map_scale",
        "docText": "tile_map_scale = 0.6\n        A scale factor to apply to the dungeon view in map mode (X). This can\n        also be adjusted in map mode in tiles with '{' and '}', as well as in\n        local tiles with ctrl-'-' and ctrl-'=' (or ctrl-'+' on some keyboards).",
        "meta": "dcss option"
    },
    {
        "caption": "tile_cell_pixels",
        "value": "tile_cell_pixels",
        "docText": "tile_cell_pixels = 32\n        The width and height of tiles in the dungeon view at 1.0 scale, in\n        (logical) pixels. This is a legacy option, and it is recommended that\n        you adjust scaling via tile_viewport_scale instead.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_sidebar_pixels",
        "value": "tile_sidebar_pixels",
        "docText": "tile_sidebar_pixels = 32\n        The width and height of tiles in the local tiles sidebar view,\n        in (logical) pixels.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_filter_scaling",
        "value": "tile_filter_scaling",
        "docText": "tile_filter_scaling = false\n        Used in conjunction with tile_cell_pixels or tile_sidebar_pixels.\n        Setting it to true filters the textures resulting in a smoother but\n        blurrier image.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_force_overlay",
        "value": "tile_force_overlay",
        "docText": "tile_force_overlay = false\n        Setting this option to true will force the message window to appear as\n        an overlay on top of the screen. If you use this option, making your\n        tile_font_msg_size smaller will make the overlay smaller while retaining\n        the same number of lines. Increase the view_max_height option if you\n        find yourself with unused screen estate.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_overlay_col",
        "value": "tile_overlay_col",
        "docText": "tile_overlay_col = #646464\n        Background color of the message window overlay, as when\n        tile_force_overlay is set to true. Used in conjunction with\n        tile_overlay_alpha_percent.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_overlay_alpha_percent",
        "value": "tile_overlay_alpha_percent",
        "docText": "tile_overlay_alpha_percent = 40\n        Transparency value for the message window overlay background, as when\n        tile_force_overlay is set to true. Setting this option to 0 will cause\n        the message window to only display text without any background. And\n        setting this option to 100 will force an opaque background to the\n        message window.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_full_screen",
        "value": "tile_full_screen",
        "docText": "tile_full_screen = auto\n        Setting this option to true or false will force full screen mode to be\n        on or off. Setting it to anything else will put it in auto mode, which\n        enables full screen mode only if the screen resolution is smaller than\n        width 1200, or height 800.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_use_small_layout",
        "value": "tile_use_small_layout",
        "docText": "tile_use_small_layout = auto\n        Alternative layout designed for very small screens. It is enabled by\n        default on Android.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_crt_file",
        "value": "tile_font_crt_file",
        "docText": "tile_font_crt_file  = VeraMono.ttf\ntile_font_stat_file = VeraMono.ttf\ntile_font_msg_file  = VeraMono.ttf\ntile_font_tip_file  = VeraMono.ttf\ntile_font_lbl_file  = Vera.ttf\n        Fonts used in various sections of the screen for local tiles. For\n        WebTiles use tile_font_*_family instead. If you want to use another\n        font, you'll have to place the corresponding *.ttf file into the\n        dat/tiles/ folder.\n        Screen regions are as follows:\n            crt  - non-map screens (menus, message history, etc.)\n            stat - stat area (hit points, AC, etc.)\n            msg  - message area\n            tip  - tooltips (mouseover information)\n            lbl  - item/monster names in inventory/main map",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_stat_file",
        "value": "tile_font_stat_file",
        "docText": "tile_font_crt_file  = VeraMono.ttf\ntile_font_stat_file = VeraMono.ttf\ntile_font_msg_file  = VeraMono.ttf\ntile_font_tip_file  = VeraMono.ttf\ntile_font_lbl_file  = Vera.ttf\n        Fonts used in various sections of the screen for local tiles. For\n        WebTiles use tile_font_*_family instead. If you want to use another\n        font, you'll have to place the corresponding *.ttf file into the\n        dat/tiles/ folder.\n        Screen regions are as follows:\n            crt  - non-map screens (menus, message history, etc.)\n            stat - stat area (hit points, AC, etc.)\n            msg  - message area\n            tip  - tooltips (mouseover information)\n            lbl  - item/monster names in inventory/main map",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_msg_file",
        "value": "tile_font_msg_file",
        "docText": "tile_font_crt_file  = VeraMono.ttf\ntile_font_stat_file = VeraMono.ttf\ntile_font_msg_file  = VeraMono.ttf\ntile_font_tip_file  = VeraMono.ttf\ntile_font_lbl_file  = Vera.ttf\n        Fonts used in various sections of the screen for local tiles. For\n        WebTiles use tile_font_*_family instead. If you want to use another\n        font, you'll have to place the corresponding *.ttf file into the\n        dat/tiles/ folder.\n        Screen regions are as follows:\n            crt  - non-map screens (menus, message history, etc.)\n            stat - stat area (hit points, AC, etc.)\n            msg  - message area\n            tip  - tooltips (mouseover information)\n            lbl  - item/monster names in inventory/main map",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_tip_file",
        "value": "tile_font_tip_file",
        "docText": "tile_font_crt_file  = VeraMono.ttf\ntile_font_stat_file = VeraMono.ttf\ntile_font_msg_file  = VeraMono.ttf\ntile_font_tip_file  = VeraMono.ttf\ntile_font_lbl_file  = Vera.ttf\n        Fonts used in various sections of the screen for local tiles. For\n        WebTiles use tile_font_*_family instead. If you want to use another\n        font, you'll have to place the corresponding *.ttf file into the\n        dat/tiles/ folder.\n        Screen regions are as follows:\n            crt  - non-map screens (menus, message history, etc.)\n            stat - stat area (hit points, AC, etc.)\n            msg  - message area\n            tip  - tooltips (mouseover information)\n            lbl  - item/monster names in inventory/main map",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_lbl_file",
        "value": "tile_font_lbl_file",
        "docText": "tile_font_crt_file  = VeraMono.ttf\ntile_font_stat_file = VeraMono.ttf\ntile_font_msg_file  = VeraMono.ttf\ntile_font_tip_file  = VeraMono.ttf\ntile_font_lbl_file  = Vera.ttf\n        Fonts used in various sections of the screen for local tiles. For\n        WebTiles use tile_font_*_family instead. If you want to use another\n        font, you'll have to place the corresponding *.ttf file into the\n        dat/tiles/ folder.\n        Screen regions are as follows:\n            crt  - non-map screens (menus, message history, etc.)\n            stat - stat area (hit points, AC, etc.)\n            msg  - message area\n            tip  - tooltips (mouseover information)\n            lbl  - item/monster names in inventory/main map",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_crt_family",
        "value": "tile_font_crt_family",
        "docText": "tile_font_crt_family  = monospace\ntile_font_stat_family = monospace\ntile_font_msg_family  = monospace\ntile_font_lbl_family  = monospace\n        Fonts used in various sections of the screen for WebTiles. For local\n        tiles use tile_font_*_file instead.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_stat_family",
        "value": "tile_font_stat_family",
        "docText": "tile_font_crt_family  = monospace\ntile_font_stat_family = monospace\ntile_font_msg_family  = monospace\ntile_font_lbl_family  = monospace\n        Fonts used in various sections of the screen for WebTiles. For local\n        tiles use tile_font_*_file instead.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_msg_family",
        "value": "tile_font_msg_family",
        "docText": "tile_font_crt_family  = monospace\ntile_font_stat_family = monospace\ntile_font_msg_family  = monospace\ntile_font_lbl_family  = monospace\n        Fonts used in various sections of the screen for WebTiles. For local\n        tiles use tile_font_*_file instead.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_lbl_family",
        "value": "tile_font_lbl_family",
        "docText": "tile_font_crt_family  = monospace\ntile_font_stat_family = monospace\ntile_font_msg_family  = monospace\ntile_font_lbl_family  = monospace\n        Fonts used in various sections of the screen for WebTiles. For local\n        tiles use tile_font_*_file instead.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_crt_size",
        "value": "tile_font_crt_size",
        "docText": "tile_font_crt_size  = 15\ntile_font_stat_size = 16\ntile_font_msg_size  = 14\ntile_font_tip_size  = 15\ntile_font_lbl_size  = 14\n        Font size for the screen regions listed above. If set to zero (default),\n        size will be based on screen size.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_stat_size",
        "value": "tile_font_stat_size",
        "docText": "tile_font_crt_size  = 15\ntile_font_stat_size = 16\ntile_font_msg_size  = 14\ntile_font_tip_size  = 15\ntile_font_lbl_size  = 14\n        Font size for the screen regions listed above. If set to zero (default),\n        size will be based on screen size.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_msg_size",
        "value": "tile_font_msg_size",
        "docText": "tile_font_crt_size  = 15\ntile_font_stat_size = 16\ntile_font_msg_size  = 14\ntile_font_tip_size  = 15\ntile_font_lbl_size  = 14\n        Font size for the screen regions listed above. If set to zero (default),\n        size will be based on screen size.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_tip_size",
        "value": "tile_font_tip_size",
        "docText": "tile_font_crt_size  = 15\ntile_font_stat_size = 16\ntile_font_msg_size  = 14\ntile_font_tip_size  = 15\ntile_font_lbl_size  = 14\n        Font size for the screen regions listed above. If set to zero (default),\n        size will be based on screen size.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_lbl_size",
        "value": "tile_font_lbl_size",
        "docText": "tile_font_crt_size  = 15\ntile_font_stat_size = 16\ntile_font_msg_size  = 14\ntile_font_tip_size  = 15\ntile_font_lbl_size  = 14\n        Font size for the screen regions listed above. If set to zero (default),\n        size will be based on screen size.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_font_ft_light",
        "value": "tile_font_ft_light",
        "docText": "tile_font_ft_light = false\n        Selects 'light' font hinting.",
        "meta": "dcss option"
    },
    {
        "caption": "glyph_mode_font",
        "value": "glyph_mode_font",
        "docText": "glyph_mode_font = monospace\n        Font used to render the dungeon in glyph mode for WebTiles. If set to\n        monospace (default) or the font is not available, the browser's default\n        monospaced font will be used.\n        This option is only available on WebTiles.",
        "meta": "dcss option"
    },
    {
        "caption": "glyph_mode_font_size",
        "value": "glyph_mode_font_size",
        "docText": "glyph_mode_font_size = 24\n        Font size (in points) for the dungeon view in glyph mode for WebTiles.\n        This option is only available on WebTiles.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_show_minihealthbar",
        "value": "tile_show_minihealthbar",
        "docText": "tile_show_minihealthbar = true\ntile_show_minimagicbar  = true\n        Will show health and magic bars on top of the player tile when the\n        player gets hurt or spends magic.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_show_minimagicbar",
        "value": "tile_show_minimagicbar",
        "docText": "tile_show_minihealthbar = true\ntile_show_minimagicbar  = true\n        Will show health and magic bars on top of the player tile when the\n        player gets hurt or spends magic.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_show_demon_tier",
        "value": "tile_show_demon_tier",
        "docText": "tile_show_demon_tier = false\n        Will overlay demon tiles with an icon intended to represent their\n        tier (or difficulty rank) among demons, reflecting the glyph\n        (&, 1, 2, 3, 4, 5) used in non-Tiles builds.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_water_anim",
        "value": "tile_water_anim",
        "docText": "tile_water_anim = true\n        If disabled, animation of liquids will be suppressed.\n        Defaults to false on WebTiles.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_misc_anim",
        "value": "tile_misc_anim",
        "docText": "tile_misc_anim = true\n        If disabled, animation of miscellaneous things such as altars and\n        torches will be suppressed.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_realtime_anim",
        "value": "tile_realtime_anim",
        "docText": "tile_realtime_anim = false\n        If enabled, tile animations will run in real time and will not be tied\n        to player actions.\n        This option is only available on WebTiles.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_show_player_species",
        "value": "tile_show_player_species",
        "docText": "tile_show_player_species = false\n        If enabled, displays the player using the monster tile for her species,\n        instead of using the normal doll and showing equipment.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_show_threat_levels",
        "value": "tile_show_threat_levels",
        "docText": "tile_show_threat_levels = nasty, unusual\n        This option controls which monsters will be highlighted with their\n        threat level. Valid levels include: trivial, easy, tough, nasty,\n        unusual. You can specify multiple levels at once, or 'none'.\n\n        When 'unusual' is specified, the option unusual_monster_items will\n        determine which items cause a monster to highlight as unusual.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_player_status_icons",
        "value": "tile_player_status_icons",
        "docText": "tile_player_status_icons = slow, constr\n        This option constrols which icons will be displayed on top of the\n        player's tile when they are afflicted by certain status effects.\n        Valid values include: slow, fragile, petr, mark, will/2, haste, weak,\n        corr, might, brill, -move.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_layout_priority",
        "value": "tile_layout_priority",
        "docText": "tile_layout_priority = minimap, inventory, command, spell, monster\n        (Ordered list option)\n        This option allows you to control the order in which elements are\n        placed on the right of the screen, below the stat area. On small\n        resolution, there won't be enough room for everything, so only the\n        first items will be placed. You can also remove items you don't want\n        to be permanently displayed. The inventory tab will always be placed at\n        the bottom but is initialised at a minimum size (4 lines). If you put a\n        tab before it on the option line, the tab will still be placed above it,\n        but it will have priority over it so the inventory might not be able to\n        expand to its maximum size (6 lines). The minimap is always placed\n        between the stat area and the tabs. The memorisation and skill tabs can\n        be added to the list too, but are not by default. The possible options\n        are: abilities, commands, inventory, memorisation, minimap, monsters,\n        navigation, skills, spells, system commands",
        "meta": "dcss option"
    },
    {
        "caption": "tile_display_mode",
        "value": "tile_display_mode",
        "docText": "tile_display_mode = (tiles | glyphs | hybrid)\n        Controls how the dungeon is rendered. You can use normal tiles (default)\n        or make it look like the console version by using glyphs. Hybrid\n        overlays icons on top of the glyph view and uses a square tile aspect\n        ratio.\n\n        This option is only available on local tiles and webtiles.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_level_map_hide_messages",
        "value": "tile_level_map_hide_messages",
        "docText": "tile_level_map_hide_messages = true\ntile_level_map_hide_sidebar = false\n        Controls what screen elements are hidden when using the level map.\n        These options are only available on WebTiles.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_level_map_hide_sidebar",
        "value": "tile_level_map_hide_sidebar",
        "docText": "tile_level_map_hide_messages = true\ntile_level_map_hide_sidebar = false\n        Controls what screen elements are hidden when using the level map.\n        These options are only available on WebTiles.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_player_tile",
        "value": "tile_player_tile",
        "docText": "tile_player_tile = (normal | playermons | mons:<monster> | tile:<monster-tile>)\n        If set to playermons, displays the player using the monster tile for\n        her species, instead of using the normal doll.\n\n        If set to a value of the form mons:<monster>, where <monster> is the\n        name of a monster, use the base tile of <monster> as the player\n        tile. For example a value of mons:ijyb will cause Ijyb's tile to be\n        used. Any spaces in the monster name should be included. For instance:\n        a value of mons:the royal jelly is valid.\n\n        If set to a value of the form tile:<player-tile> where <player-tile> is\n        the name of a tile in the player tile sheet, use this tile as the\n        player tile. This form is most useful for using specific variant tiles\n        of monster with multiple tiles, such as hydra and large abominations,\n        or special tiles like Cigotuvi's Monster or player transformations that\n        don't have their own base monster. The tile name must be the full name,\n        e.g. mons_hydra_7. For example, to use the hydra tile with many heads,\n        use a value of tile:mons_hydra_7. The tile names can be found in the\n        source tree folder source/rltiles in the files dc-mon.txt,\n        dc-demon.txt, and dc-player.txt. In these files, the tile name is in\n        the second word in each entry after the file name of the image, and\n        case is ignored for matching. Monster tile names are usually of the\n        form mons_<monster-name>, but other tiles like transformations are\n        named differently, e.g. tran_tree for the tree transformation tile.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_weapon_offsets",
        "value": "tile_weapon_offsets",
        "docText": "tile_weapon_offsets = (<x>,<y> | reset)\ntile_shield_offsets = (<x>,<y> | reset)\n        When using a custom tile with tile_player_tile, these option set the\n        pixel x (horizontal) and y (vertical) offsets for the location where\n        the weapon or shield will be drawn in the tile. The x and y offsets\n        must be integers between -32 and 32, inclusive. Negative x values will\n        adjust left, and Negative y values will adjust up. At 0,0, the weapon\n        is drawn on the left side of the tile, and at 0,0 the shield is drawn\n        on the right side. A weapon x offset of e.g. 10 to 20 (depending on the\n        tile) together with a shield x offset of -10 to -20 can therefore be\n        used to swap locations of weapon and shield.\n\n        Using the value \"reset\" will clear any previously defined offset, which\n        is useful for in-game tile changes via lua.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_shield_offsets",
        "value": "tile_shield_offsets",
        "docText": "tile_weapon_offsets = (<x>,<y> | reset)\ntile_shield_offsets = (<x>,<y> | reset)\n        When using a custom tile with tile_player_tile, these option set the\n        pixel x (horizontal) and y (vertical) offsets for the location where\n        the weapon or shield will be drawn in the tile. The x and y offsets\n        must be integers between -32 and 32, inclusive. Negative x values will\n        adjust left, and Negative y values will adjust up. At 0,0, the weapon\n        is drawn on the left side of the tile, and at 0,0 the shield is drawn\n        on the right side. A weapon x offset of e.g. 10 to 20 (depending on the\n        tile) together with a shield x offset of -10 to -20 can therefore be\n        used to swap locations of weapon and shield.\n\n        Using the value \"reset\" will clear any previously defined offset, which\n        is useful for in-game tile changes via lua.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_grinch",
        "value": "tile_grinch",
        "docText": "tile_grinch = false\n        When set, disables custom holiday tiles (e.g. Santa hats).",
        "meta": "dcss option"
    },
    {
        "caption": "tile_web_mouse_control",
        "value": "tile_web_mouse_control",
        "docText": "tile_web_mouse_control = true\n        Whether to enable mouse control for tooltips/cursor interaction on\n        WebTiles. Regardless of the value of the setting, the minimap will\n        respond to mouse control.",
        "meta": "dcss option"
    },
    {
        "caption": "tile_web_mobile_input_helper",
        "value": "tile_web_mobile_input_helper",
        "docText": "tile_web_mobile_input_helper = auto\n        This option controls an optional auxiliary input field in the WebTiles\n        interface that can be focused to enable the virtual keyboard on mobile\n        devices. When set to true or false, the field is manually enabled or\n        disabled. When set to auto, the field is only shown on devices with\n        a touch screen.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_on_save",
        "value": "dump_on_save",
        "docText": "dump_on_save = true\n        If set to true, a character dump will automatically be created or\n        updated when the game is saved.",
        "meta": "dcss option"
    },
    {
        "caption": "kill_map",
        "value": "kill_map",
        "docText": "kill_map = friend:you, other:you\n        will merge friendly and other kills into the main vanquished\n        creatures list. Note that the merging is only for display (the\n        game still maintains three separate lists internally) and that\n        kill places (see below) may be in the wrong order for merged\n        entries. The default is an empty list.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_kill_places",
        "value": "dump_kill_places",
        "docText": "dump_kill_places = (none | all | single)\n        In the Vanquished Creatures list, this option controls how the\n        locations of each kill are displayed. Use 'none' to suppress\n        place display altogether, 'all' to display all known (up to 5)\n        kill places, and 'single' to use the default of showing kill\n        places only for single kills.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_item_origins",
        "value": "dump_item_origins",
        "docText": "dump_item_origins = artefacts\n        The game remembers where you find items. If you want this item\n        origin memory listed in your dumps, use this option to select\n        which items get annotated. Available selectors are:\n                artefacts, ego_arm, ego_weap, jewellery, runes,\n                staves, books, all, none.\n        If you use multiple dump_item_origins lines, the last line takes\n        effect; all preceding lines are ignored.\n\n        If you don't want any items to be annotated, set\n        dump_item_origins to none, and set dump_item_origin_price to -1.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_item_origin_price",
        "value": "dump_item_origin_price",
        "docText": "dump_item_origin_price = -1\n        Item origins are dumped if the price of the item is greater than\n        or equal to this amount. Set this to -1 to prevent selection by\n        price.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_message_count",
        "value": "dump_message_count",
        "docText": "dump_message_count = 20\n        The number of last messages to be displayed in character dump\n        files.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_order",
        "value": "dump_order",
        "docText": "dump_order  = header,hiscore,stats,misc,apostles,inventory,skills,spells,\ndump_order += overview,mutations,messages,screenshot,monlist,kills,\ndump_order += notes,screenshots,vaults,skill_gains,action_counts\n        (Ordered list option)\n        Controls the order of sections in the dump.\n\n        Two optional dump sections are \"turns_by_place\" and\n        \"kills_by_place\", which add detailed statistics to where turns\n        were spent and monsters were killed. You can add them to your\n        dump as:\n             dump_order += turns_by_place, kills_by_place\n\n        The \"turns_by_place\" section is enabled by default\n        in trunk builds of Crawl (not releases or pre-release betas),\n        appearing at the end of the dump.\n\n        For making your chardump prettier, you can add\n            dump_order += -\n        to place a separator between sections.\n\n        You can also add arbitrary section names; ones not mentioned here will\n        be interpreted as custom user-defined Lua functions with no arguments.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_order",
        "value": "dump_order",
        "docText": "dump_order  = header,hiscore,stats,misc,apostles,inventory,skills,spells,\ndump_order += overview,mutations,messages,screenshot,monlist,kills,\ndump_order += notes,screenshots,vaults,skill_gains,action_counts\n        (Ordered list option)\n        Controls the order of sections in the dump.\n\n        Two optional dump sections are \"turns_by_place\" and\n        \"kills_by_place\", which add detailed statistics to where turns\n        were spent and monsters were killed. You can add them to your\n        dump as:\n             dump_order += turns_by_place, kills_by_place\n\n        The \"turns_by_place\" section is enabled by default\n        in trunk builds of Crawl (not releases or pre-release betas),\n        appearing at the end of the dump.\n\n        For making your chardump prettier, you can add\n            dump_order += -\n        to place a separator between sections.\n\n        You can also add arbitrary section names; ones not mentioned here will\n        be interpreted as custom user-defined Lua functions with no arguments.",
        "meta": "dcss option"
    },
    {
        "caption": "dump_order",
        "value": "dump_order",
        "docText": "dump_order  = header,hiscore,stats,misc,apostles,inventory,skills,spells,\ndump_order += overview,mutations,messages,screenshot,monlist,kills,\ndump_order += notes,screenshots,vaults,skill_gains,action_counts\n        (Ordered list option)\n        Controls the order of sections in the dump.\n\n        Two optional dump sections are \"turns_by_place\" and\n        \"kills_by_place\", which add detailed statistics to where turns\n        were spent and monsters were killed. You can add them to your\n        dump as:\n             dump_order += turns_by_place, kills_by_place\n\n        The \"turns_by_place\" section is enabled by default\n        in trunk builds of Crawl (not releases or pre-release betas),\n        appearing at the end of the dump.\n\n        For making your chardump prettier, you can add\n            dump_order += -\n        to place a separator between sections.\n\n        You can also add arbitrary section names; ones not mentioned here will\n        be interpreted as custom user-defined Lua functions with no arguments.",
        "meta": "dcss option"
    },
    {
        "caption": "user_note_prefix",
        "value": "user_note_prefix",
        "docText": "user_note_prefix = <string>\n        Prefixes manually added notes with the given string, to make\n        them easier to find. It is not currently possible to add a\n        space at the end of this or any option, but you can use the\n        Unicode non-breaking space character ' ' instead.",
        "meta": "dcss option"
    },
    {
        "caption": "note_items",
        "value": "note_items",
        "docText": "note_items += <regex>, <regex>, ...\n        (List option)\n        When an item is identified for the first time, it will be\n        noted if its short description matches a regex. E.g.\n             note_items += book,acquirement\n        Artefacts (fixed, unrand, or random) will always be noted when\n        identified, regardless of note_items.\n\n        The description matched against has the same prefixes as notes\n        for the menu_colour option (e.g., \"emergency_item\").",
        "meta": "dcss option"
    },
    {
        "caption": "note_monsters",
        "value": "note_monsters",
        "docText": "note_monsters += <regex>, <regex>, ...\n        (List option)\n        Monsters whose name matches an item in this comma-separated list\n        are considered interesting. You can have multiple note_monsters\n        lines. E.g.\n             note_monsters += Klown,orb of fire",
        "meta": "dcss option"
    },
    {
        "caption": "note_hp_percent",
        "value": "note_hp_percent",
        "docText": "note_hp_percent = 5\n        If your HP falls below a certain note_hp_percentage of your max\n        hit points, a note will be taken. There is some code to avoid\n        repetitions of notes based on the same incident.",
        "meta": "dcss option"
    },
    {
        "caption": "note_skill_levels",
        "value": "note_skill_levels",
        "docText": "note_skill_levels = 1,5,10,15,27\n        This sets which skill levels are noteworthy. It's a single line,\n        although you can use += as a continuation.",
        "meta": "dcss option"
    },
    {
        "caption": "note_all_skill_levels",
        "value": "note_all_skill_levels",
        "docText": "note_all_skill_levels = false\n        This is a shortcut for note_skill_levels = 1,2,..,27. If you set\n        this to true, all skill levels are considered noteworthy.",
        "meta": "dcss option"
    },
    {
        "caption": "note_skill_max",
        "value": "note_skill_max",
        "docText": "note_skill_max = true\n        Setting this option will cause a note whenever a new maximum in\n        skill levels is reached. If note_skill_max is true and\n        note_skill_levels is nonempty, notes will be taken whenever\n        either of the criteria are met.",
        "meta": "dcss option"
    },
    {
        "caption": "note_xom_effects",
        "value": "note_xom_effects",
        "docText": "note_xom_effects = true\n        This will add a note whenever Xom does something.",
        "meta": "dcss option"
    },
    {
        "caption": "note_messages",
        "value": "note_messages",
        "docText": "note_messages += <regex>, <regex>, ...\n        (List option)\n        Messages which match an item in this comma-separated list are\n        considered interesting. You can have multiple note_messages\n        lines. E.g.\n             note_messages += Something interferes\n             note_messages += protects you from harm\n        If you want all banishments to the Abyss noted, use\n             note_messages += [bB]anish.*Abyss\n        If you want a note when your draconian scales turn <colour>, use\n             note_messages += Your scales start",
        "meta": "dcss option"
    },
    {
        "caption": "note_chat_messages",
        "value": "note_chat_messages",
        "docText": "note_chat_messages = false\n        If set to false, this will disable logging of WebTiles chat\n        messages from other players. (This setting only applies on the\n        online servers).",
        "meta": "dcss option"
    },
    {
        "caption": "note_dgl_messages",
        "value": "note_dgl_messages",
        "docText": "note_dgl_messages = true\n        If set to false, this will disable logging of DGL messages\n        sent by other players. (This setting only applies on the online\n        servers).",
        "meta": "dcss option"
    },
    {
        "caption": "mouse_input",
        "value": "mouse_input",
        "docText": "mouse_input = false\n        When enabled, the mouse_input option allows the game to use\n        mouse input events on certain platforms (Windows and Unix).\n        Note that the extent of mouse support varies greatly across\n        platforms and is strongly influenced by your terminal settings.\n\n        On Unixes, you're only likely to get mouse support working with\n        ncurses in xterms (specifically your $TERM probably needs to\n        contain \"xterm\" for ncurses to activate its mouse events;\n        if you're running Crawl in GNU screen in an xterm, the mouse\n        will probably not work).\n\n        On Windows, you'll need to disable QuickEdit Mode on your\n        console for Crawl to use the mouse (QuickEdit is disabled by\n        default, so you shouldn't need to change anything if you're\n        using a stock console). You can disable QuickEdit by\n        right-clicking the titlebar of your command-prompt, selecting\n        Properties and disabling QuickEdit in the Options tab.",
        "meta": "dcss option"
    },
    {
        "caption": "wiz_mode",
        "value": "wiz_mode",
        "docText": "wiz_mode = (no | never | yes)\n        Wizard mode options (available only in WIZARD compiles):\n          yes   -- start games in wizard mode (game will not be scored)\n          no    -- still allows player to enter wizard mode after start\n                   of game\n          never -- never allow a wizard command to be used",
        "meta": "dcss option"
    },
    {
        "caption": "explore_mode",
        "value": "explore_mode",
        "docText": "explore_mode = (no | never | yes)\n        Explore mode options (available only in WIZARD compiles):\n          yes   -- start games in explore mode (game will not be scored)\n          no    -- still allows player to enter explore mode after start\n                   of game\n          never -- never allow explore mode to be entered",
        "meta": "dcss option"
    },
    {
        "caption": "char_set",
        "value": "char_set",
        "docText": "char_set = (default | ascii)\n        Chooses different pre-set character sets for the game play screen.\n        Unlike previous versions of Crawl, this does not select the I/O\n        encoding anymore.\n\n        You can also include ibm_glyphs.txt, dec_glyphs.txt, or old_unicode_\n        glyphs.txt to bring back some older character sets that are\n        no longer built-in.\n\n        Has negligible effect in the Tiles build.",
        "meta": "dcss option"
    },
    {
        "caption": "colour.OLDCOLOUR",
        "value": "colour.OLDCOLOUR",
        "docText": "colour.OLDCOLOUR = NEWCOLOUR\n        Useful for terminals where some colours are hard to read (and\n        cannot be adjusted), as well as for creating a custom scheme,\n        especially when used with the background option on a terminal\n        with a non-black background.\n        Format is colour.OLDCOLOUR = NEWCOLOUR, later rules take\n        precedence and the NEWCOLOUR is always literal (ie. it won't\n        re-evaluate to a different colour).\n        The colours are:\n                black, blue, green, cyan, red, magenta, brown, lightgrey,\n                darkgrey, lightblue, lightgreen, lightcyan, lightred,\n                lightmagenta, yellow, white\n        with lightgray = lightgrey, darkgray = darkgrey. Some examples:\n          colour.lightgrey = black\n          colour.lightcyan = cyan\n          colour.yellow    = brown",
        "meta": "dcss option"
    },
    {
        "caption": "display_char",
        "value": "display_char",
        "docText": "display_char = <dungeon_character_name : symbol>\n        a list of these is allowed, as well.\n\n        The possible entries for dungeon_character_name are: wall, permawall,\n           wall_magic, floor, floor_magic, door_open, door_closed, trap,\n           stairs_down, stairs_up, grate, altar, arch, fountain, wavy, statue,\n           invis_exposed, item_detected, item_orb, item_rune, item_weapon,\n           item_armour, item_wand, item_scroll, item_ring, item_potion,\n           item_missile, item_book, item_staff, item_rod, item_miscellany,\n           item_corpse, item_skeleton, item_gold, item_gem, item_amulet, cloud,\n           cloud_weak, cloud_fading, cloud_terminal, tree, transporter,\n           transporter_landing, space, fired_bolt, fired_zap, fired_burst,\n           fired_debug, fired_missile, fired_missile, explosion, frame_horiz,\n           frame_vert, frame_top_left, frame_top_right, frame_bottom_left,\n           frame_bottom_right, draw_horiz, draw_vert, draw_slash,\n           draw_backslash, draw_top_left, draw_top_right, draw_bottom_left,\n           draw_bottom_right, draw_down, draw_up, draw_right, draw_left\n\n        Most of these are self-explanatory. \"arch\" is used for shops and\n        portals. \"floor_magic\" and \"wall_magic\" are used to display magic-mapped\n        squares on the level map. \"invis_exposed\" is the character for water\n        creatures submerged in shallow water, or invisible creatures wading in\n        shallow water. \"wavy\" is water and lava. \"cloud\", \"cloud_weak\",\n        \"cloud_fading\", and \"cloud_terminal\" distinguish clouds by remaining\n        duration, listed from furthest to nearest expiry; cloud types that do\n        not visually reveal their remaining duration always use the \"cloud\"\n        glyph.\n\n        Symbols can be specified using a letter, or by its ASCII/Unicode\n        code: a decimal number or a hexadecimal one (prefixed with x).",
        "meta": "dcss option"
    },
    {
        "caption": "feature",
        "value": "feature",
        "docText": "feature += <regex> { <symbol>, <magicmap symbol>, <view colour>,\n                    <levelmap_magic_colour>, <levelmap_seen_colour>,\n                    <emphasised_colour>, <levelmap_emphasised_colour> } ;\n           <regex> { ... }\nfeature -= <regex> , <regex>\n        (List-like option)\n        where <regex> is a regular expression describing a dungeon\n        feature. This regex should match the description when using the\n        'x' command. In case the regex matches several descriptions, all\n        such features are affected. The set of possible features in a\n        given version of crawl can be found by searching for `.*` in the\n        lookup feature menu (`?/f`).\n\n        The list in {...} specifies the appearance of the dungeon\n        feature(s), and should be self-explanatory. <symbol> can be used\n        to override the above display_char options, or also to distinguish\n        among subtypes of a character.\n\n        'magic' refers to magic mapping. So the <magicmap symbol>\n        entry determines what symbol will be used for features\n        detected via magic mapping. The <magicmap symbol> will also be used\n        for stone stairs with unknown destination and unvisited transporters.\n\n        'emphasised_colour' refers to the colour used to highlight stone stairs\n        and transporters with unknown destination; for non-stair features,\n        setting emphasis colours does nothing useful.\n\n        Leading parameters in the {...} list can be omitted by leaving\n        them blank and using placeholder commas. Trailing parameters can\n        be omitted without placeholder commas.\n\n        Multiple feature option lines can be used, as can multiple\n        feature descriptions strung together on the same line separated\n        by semicolons.\n\n        Feature overrides can be cleared using -=, providing a regex only\n        (and not an appearance). This will restore all features whose\n        descriptions match the regex to their default appearances.\n\n        Examples:\n         * Colour rock walls red:\n             feature += rock wall { , , red }\n         * Use # for metal walls in all character sets:\n             feature += metal wall {#}\n         * Colour upstairs green and downstairs red:\n             feature += stone staircase leading up {,,,,green}\n             feature += stone staircase leading down {,,,,red}\n\n        Symbols can be specified as with display_char:\n             feature += metal wall {#}\n             feature += metal wall {35}\n             feature += metal wall {x23}\n        all do the same thing.",
        "meta": "dcss option"
    },
    {
        "caption": "mon_glyph",
        "value": "mon_glyph",
        "docText": "mon_glyph += <monster name or symbol> : (<colour> <glyph> | <monster name>) ,\n             <monster name or symbol> : <replacement>\nmon_glyph -= <monster name or symbol>\n        (List option)\n        The mon_glyph option allows you to customise the symbol and\n        colour used to display a monster. The full list of default glyphs\n        can be most reliably found by looking at the source code (mon-data.h),\n        but glyph information can be checked in the lookup monster menu\n        (`?/m`), as can the list of monsters.\n\n        You can customise symbols based on monster names or their\n        existing symbols. For instance, if you want to put elves on E\n        and elementals on e, you can do this:\n\n             mon_glyph += e : E\n             mon_glyph += E : e\n\n        You can specify a different symbol, or a colour, or both, in any\n        order. Here are more examples:\n\n             mon_glyph += deep elf annihilator : E lightmagenta\n             mon_glyph += Xtahua : lightmagenta D\n             mon_glyph += large zombie : darkgrey\n             mon_glyph += small simulacrum : x\n\n        (The left hand side of the : is case-sensitive.)\n\n        You can also specify another monster, so that it copies the base\n        symbol and colour of that monster (this is not transitive). For\n        example, if you think that slime creature colours are backwards:\n\n            mon_glyph += slime creature : merged slime creature\n            mon_glyph += merged slime creature : slime creature\n\n        You can specify symbols using their code points using the syntax\n        as shown in the \"feature\" option. You can also use Unicode code\n        points:\n\n             mon_glyph += draconian scorcher : x6e9\n\n        A single _ is treated as a space; if you want a real underscore,\n        put a \\ in front of it like this:\n\n             mon_glyph += player ghost : \\_\n\n        You can also redefine several \"pseudo\" monsters, them being:\n\n             player\n             sensed monster\n             {trivial,easy,tough,nasty,friendly} sensed monster\n             merged slime creature\n\n        Playable species that normally have no monster of the same name can\n        also be redefined, for use with show_player_species = true.\n\n        Monster glyph overrides can be cleared using -=, which restores\n        the named monster (or all monsters of the given glyph) to its default\n        appearance. Specify only the monster name or glyph for -=, not the\n        replacement being removed.",
        "meta": "dcss option"
    },
    {
        "caption": "item_glyph",
        "value": "item_glyph",
        "docText": "item_glyph ^= <regexp> : <colour> <glyph>\nitem_glyph -= <regexp>\n        (Ordered list option)\n        Customizes the symbol and/or colour of all items matching the regexp.\n        Unlike mon_glyph, this is a partial name match.\n\n        Items are prefixed by tags, both those from stash tracking and from\n        menu colouring. Thus, you can colour {artefact} or useless_item.\n\n        Multiple rules can modify a single item, which is useful if you want\n        to change the colour and glyph separately:\n            item_glyph += corpse : x625\n            item_glyph += inedible.* corpse : lightgreen\n\n        Rules are applied in order, so later rules are higher priority.\n\n        Removing a rule with -= removes all rules using the exact regexp\n        provided; do not specify a colour or glyph in that case.",
        "meta": "dcss option"
    },
    {
        "caption": "item_glyph",
        "value": "item_glyph",
        "docText": "item_glyph ^= <regexp> : <colour> <glyph>\nitem_glyph -= <regexp>\n        (Ordered list option)\n        Customizes the symbol and/or colour of all items matching the regexp.\n        Unlike mon_glyph, this is a partial name match.\n\n        Items are prefixed by tags, both those from stash tracking and from\n        menu colouring. Thus, you can colour {artefact} or useless_item.\n\n        Multiple rules can modify a single item, which is useful if you want\n        to change the colour and glyph separately:\n            item_glyph += corpse : x625\n            item_glyph += inedible.* corpse : lightgreen\n\n        Rules are applied in order, so later rules are higher priority.\n\n        Removing a rule with -= removes all rules using the exact regexp\n        provided; do not specify a colour or glyph in that case.",
        "meta": "dcss option"
    },
    {
        "caption": "use_fake_player_cursor",
        "value": "use_fake_player_cursor",
        "docText": "use_fake_player_cursor = true\n        Makes the main view highlight the player without using the\n        terminal cursor. This means it won't flicker when the cursor\n        is turned off to move elsewhere for drawing, and allows\n        turning the cursor off by default. Has no effect in the Tiles build.",
        "meta": "dcss option"
    },
    {
        "caption": "show_player_species",
        "value": "show_player_species",
        "docText": "show_player_species = false\n        Displays your character as a member of its species. For example, if\n        you're a Hill Orc, you will be shown as an 'o' rather than '@'. Has\n        no effect in Tiles.",
        "meta": "dcss option"
    },
    {
        "caption": "use_modifier_prefix_keys",
        "value": "use_modifier_prefix_keys",
        "docText": "use_modifier_prefix_keys = true\n        When true, '*' behaves as a CTRL keypress, and '/' as SHIFT.",
        "meta": "dcss option"
    },
    {
        "caption": "language",
        "value": "language",
        "docText": "language = <two-letter language code>\n        Displays some text in the given language. Not all text in Dungeon Crawl\n        has translations in every supported language, but volunteer translators\n        have offered translations of particularly wordy text such as god and\n        monster descriptions. Text with no known translation will be displayed\n        in English. Some languages may require changing the font.\n\n        Partially supported language codes:\n        cs: Czech\n        da: Danish\n        de: German\n        el: Greek\n        es: Spanish\n        fi: Finnish\n        fr: French\n        hu: Hungarian\n        it: Italian\n        ja: Japanese\n        ko: Korean\n        lt: Lithuanian\n        lv: Latvian\n        nl: Dutch\n        pl: Polish\n        pt: Portuguese\n        ru: Russian\n        sv: Swedish\n        zh: Chinese",
        "meta": "dcss option"
    },
    {
        "caption": "fake_lang",
        "value": "fake_lang",
        "docText": "fake_lang = <lang1>[,<lang2>[,...]]\n        Set one or more fake languages, applied in the order provided (order\n        does matter!) The same language can be set more than once, though it\n        may not end up making much sense... At most 3 fake langs can be set at\n        a time.\n\n        Options are: (dwarven|jagerkin|kraut|runes|wide|grunt|butt:<n>)\n        Experiment to find out what they do!",
        "meta": "dcss option"
    },
    {
        "caption": "messaging",
        "value": "messaging",
        "docText": "messaging = true\n        If set to true, this allows you to receive DGL messages sent\n        by other players. (This setting only applies on the online servers).",
        "meta": "dcss option"
    },
    {
        "caption": "read_persist_options",
        "value": "read_persist_options",
        "docText": "read_persist_options = false\n        When set to true, the game will read additional options from\n        the lua variable c_persist.options if it contains a string.\n        This option has no effect unless explicitly used in scripting.\n        This option is persistent so that the current value as set in\n        the skill menu is saved across games and automatically reloaded,\n        unless set explicitly.",
        "meta": "dcss option"
    },
    {
        "caption": "dos_use_background_intensity",
        "value": "dos_use_background_intensity",
        "docText": "dos_use_background_intensity = false\n        On Windows, if you're using a console that can do high-intensity\n        background colours, set this option to true for superior\n        friend-highlighting. If your console doesn't like this option,\n        some friendly monsters will appear as blinking characters (and\n        setting this option to false may be advisable to preserve your\n        sanity in such cases).",
        "meta": "dcss option"
    },
    {
        "caption": "allow_extended_colours",
        "value": "allow_extended_colours",
        "docText": "allow_extended_colours = true\n        Attempt to use more than the eight basic terminal colours for crawl's\n        bright colours. Most modern terminals should use this setting. If\n        successful, this puts console into 16-color mode.\n\n        If this option is enabled and there are enough colours available in\n        the terminal, use the terminal's extended colour palette directly for\n        internal colours.\n\n        An appropriate TERM environment variable must be set for this option to\n        function as expected for capable terminals. For example:\n          * XTerm, MacOS Terminal, or iTerm: xterm-256color\n          * gnome-terminal: vte-256color\n          * PuTTY: putty-256color\n            (set in 'Connection->Data->Terminal-type string')\n\n        If these conditions are not met, crawl will fall back to 8-colour mode\n        and use character attributes to render bright colours, with dark blue\n        as a \"fallback\" color for rendering dark grey on black. In 8-colour\n        mode, one of the following options may be better.",
        "meta": "dcss option"
    },
    {
        "caption": "bold_brightens_foreground",
        "value": "bold_brightens_foreground",
        "docText": "bold_brightens_foreground = false\n        For 8-colour mode, assume that a bold text attribute will end up\n        brightening the foreground colour. If set to `force` instead of `true`,\n        bright colours will be bolded even in 16-colour mode. Otherwise,\n        this option is ignored when running in 16-colour mode via\n        allow_extended_colours.\n\n        If enabled in 8 color mode on a terminal where the assumption that bold\n        changes the color does not hold, this will result in invisible glyphs\n        for normal/bright colour combos of the same base colour. For example,\n        in the dungeon display, if squares that are out of line of sight appear\n        black, you should not set this to `true`.",
        "meta": "dcss option"
    },
    {
        "caption": "blink_brightens_background",
        "value": "blink_brightens_background",
        "docText": "blink_brightens_background = false\n        For 8-colour mode, assume that a blink text attribute will end up\n        brightening the background colour.\n\n        If enabled on a terminal where this assumption does not hold, this will\n        result in invisible glyphs for normal/bright colour combos of the same\n        base colour.\n\n        This option is ignored when running in 16-colour mode via\n        allow_extended_colours.",
        "meta": "dcss option"
    },
    {
        "caption": "best_effort_brighten_background",
        "value": "best_effort_brighten_background",
        "docText": "best_effort_brighten_background = false\n        If set to true, try to brighten a background colour using blink even if\n        it is not assumed to be successful.\n\n        This option only affects colours which are safe to brighten. If the\n        blink_brightens_background option is set to true, this option is\n        effectively ignored.\n\n        This option is ignored when running in 16-colour mode via\n        allow_extended_colours.",
        "meta": "dcss option"
    },
    {
        "caption": "best_effort_brighten_foreground",
        "value": "best_effort_brighten_foreground",
        "docText": "best_effort_brighten_foreground = true\n        If set to true, try to brighten a foreground colour using bold even if\n        it is not assumed to be successful.\n\n        This option only affects colours which are safe to brighten. If the\n        bold_brightens_foreground option is set to true, this option is\n        effectively ignored.\n\n        This option is ignored when running in 16-colour mode via\n        allow_extended_colours.",
        "meta": "dcss option"
    },
    {
        "caption": "background_colour",
        "value": "background_colour",
        "docText": "background_colour = black\n        Sets the default background colour by name (defaults to BLACK).\n        This may be useful if you're using a terminal with a background\n        colour other than black and wish to retain the colour scheme for crawl.\n\n        Internally, black is mapped to the the passed background colour and\n        vice-versa.\n\n        This option requires extended support by the terminal library as well\n        as the terminal itself. Additionally, bright default colours are not\n        available unless extended colour support is present and explicitly\n        enabled via allow_extended_colours. If support is not present, either\n        outright or for the selected colour, this option will have an effective\n        value of black.\n\n        See the allow_extended_colours option for more information on enabling\n        use of bright default colours. Beware of buggy or misleading terminfo\n        files.",
        "meta": "dcss option"
    },
    {
        "caption": "foreground_colour",
        "value": "foreground_colour",
        "docText": "foreground_colour = lightgrey\n        Sets the default foreground colour by name (defaults to LIGHTGREY).\n\n        Internally, lightgrey is mapped to the passed foreground colour and\n        vice-versa.\n\n        This option comes with the same baggage as the background_colour option.\n        See its documentation for more details.",
        "meta": "dcss option"
    },
    {
        "caption": "use_terminal_default_colours",
        "value": "use_terminal_default_colours",
        "docText": "use_terminal_default_colours = false\n        Use the terminal's default foreground and background colors. This can\n        be used to enable a transparent background.",
        "meta": "dcss option"
    },
    {
        "caption": "use_fake_cursor",
        "value": "use_fake_cursor",
        "docText": "use_fake_cursor = true\n        If true, Crawl draws the cursor explicitly on the level-map and\n        targeting screens instead of relying on the term to draw the\n        cursor. Use this if your term cannot show a cursor over\n        darkgrey/black squares.\n        On non-Unix builds this option defaults to false, and setting it to\n        to true may have unpredictable results.",
        "meta": "dcss option"
    },
    {
        "caption": "lua_max_memory",
        "value": "lua_max_memory",
        "docText": "lua_max_memory = 16\n        Max memory in MB allowed for user Lua scripts.",
        "meta": "dcss option"
    },
    {
        "caption": "sound_volume",
        "value": "sound_volume",
        "docText": "sound_volume = 0.8 \n    Description: Sets the volume of the sound.\n    Value: A decimal between 0 and 1\n    Default: 1",
        "meta": "dwem option"
    },
    {
        "caption": "sound_fade_time",
        "value": "sound_fade_time",
        "docText": "sound_fade_time = 0.5 \n    Description: Sets the fade-out time for sounds. This represents the time it takes for the sound to gradually\n    decrease in volume at the end. It only works when one_SDL_sound_channel is true\n    Value: Number (in seconds)\n    Default: 0",
        "meta": "dwem option"
    },
    {
        "caption": "sound_pack",
        "value": "sound_pack",
        "docText": "sound_pack += https://example.com/soundpack.zip:[\"match1.txt\", \"match2.txt\"] \n    Description: Adds the URL of the sound pack and the match file configuration within that sound pack.\n    Value: URL and match file configuration\n    Explanation: After the URL, the match file configuration is in JSON array format, specifying specific match\n      files within the sound pack. If no match files are specified, all text files within the sound pack are used.",
        "meta": "dwem option"
    },
    {
        "caption": "sound_debug",
        "value": "sound_debug",
        "docText": "sound_debug = true \n    Description: Prints sound debugging information to the browser developer tools console window.\n    Value: true or false\n    Default: false\n    Example: `sound_debug = true`",
        "meta": "dwem option"
    },
    {
        "caption": "disable_clear_chat",
        "value": "disable_clear_chat",
        "docText": "disable_clear_chat = true \n    Disables the feature that clears chat when exiting the game.",
        "meta": "dwem option"
    },
    {
        "caption": "show_gold_status",
        "value": "show_gold_status",
        "docText": "show_gold_status = true \n    Displays the current gold in the right status interface when you are not a follower of Gozag.",
        "meta": "dwem option"
    },
    {
        "caption": "redirect_chat",
        "value": "redirect_chat",
        "docText": "redirect_chat = true \n    Simultaneously outputs chat messages in the game message window.",
        "meta": "dwem option"
    },
    {
        "caption": "lab_use_click_to_send_chat",
        "value": "lab_use_click_to_send_chat",
        "docText": "lab_use_click_to_send_chat = true (BETA) \n    Enable click to send item feature.",
        "meta": "dwem option"
    },
    {
        "caption": "record_wtrec",
        "value": "record_wtrec",
        "docText": "record_wtrec = true\n        DWEM (WTRec) option. When true, records this session's WebTiles messages client-side to IndexedDB.\n        Manage recordings via chat: /wtrec status | list | download | delete.",
        "meta": "dwem option"
    },
    {
        "caption": "translation_language",
        "value": "translation_language",
        "docText": "translation_language = ko\n        DWEM (TranslationModule) option. Enable i18n and select target language (e.g., ko, ja).",
        "meta": "dwem option"
    },
    {
        "caption": "translation_file",
        "value": "translation_file",
        "docText": "translation_file = https://translation.nemelex.cards/build/latest.json\n        DWEM (TranslationModule) option. URL to matcher data JSON.",
        "meta": "dwem option"
    },
    {
        "caption": "use_translation_font",
        "value": "use_translation_font",
        "docText": "use_translation_font = true\n        DWEM (TranslationModule) option. Load appropriate web font for the chosen language.",
        "meta": "dwem option"
    },
    {
        "caption": "translation_debug",
        "value": "translation_debug",
        "docText": "translation_debug = false\n        DWEM (TranslationModule) option. Log translation matcher activity and auto-reload in dev.",
        "meta": "dwem option"
    },
    {
        "caption": "https://osp.nemelex.cards/build/latest.zip",
        "value": "https://osp.nemelex.cards/build/latest.zip",
        "docText": "https://osp.nemelex.cards/build/latest.zip (SOUND PACK)\n    CNC Open Sound Pack: https://l.abstr.net/cnc-osp\n    Example1 (Default): sound_pack += https://osp.nemelex.cards/build/latest.zip:[\"init.txt\"]\n    Example2 (Default + Xobeh): sound_pack += https://osp.nemelex.cards/build/latest.zip:[\"xobeh.txt\", \"init.txt\"]\n    Example2 (Default + Trog): sound_pack += https://osp.nemelex.cards/build/latest.zip:[\"trog.txt\", \"init.txt\"]\n    Example4 (Default + Zin): sound_pack += https://osp.nemelex.cards/build/latest.zip:[\"zin.txt\", \"init.txt\"]",
        "meta": "sound pack"
    },
    {
        "caption": "https://sound-packs.nemelex.cards/crawler/2018-03-27/DCSS.22.zip",
        "value": "https://sound-packs.nemelex.cards/crawler/2018-03-27/DCSS.22.zip",
        "docText": "https://sound-packs.nemelex.cards/crawler/2018-03-27/DCSS.22.zip (SOUND PACK)\n    Crawler's Sound Pack\n    Example1 (Default): sound_pack += https://sound-packs.nemelex.cards/crawler/2018-03-27/DCSS.22.zip:[\"사운드 적용하는법.txt\"]\n    Example2 (Default + Zin): sound_pack += https://sound-packs.nemelex.cards/crawler/2018-03-27/DCSS.22.zip",
        "meta": "sound pack"
    },
    {
        "caption": "https://sound-packs.nemelex.cards/Autofire/BindTheEarth/BindTheEarth.zip",
        "value": "https://sound-packs.nemelex.cards/Autofire/BindTheEarth/BindTheEarth.zip",
        "docText": "https://sound-packs.nemelex.cards/Autofire/BindTheEarth/BindTheEarth.zip (SOUND PACK)\n    BindTheEarth Sound Pack: https://github.com/Autofire/BindTheEarth/tree/master\n    Example: sound_pack += https://sound-packs.nemelex.cards/Autofire/BindTheEarth/BindTheEarth.zip",
        "meta": "sound pack"
    },
    {
        "caption": "crawl.article_a",
        "value": "crawl.article_a",
        "docText": "crawl.article_a \n    Syntax:\n        crawl.article_a(s[, lowercase=true])\n    Returns: string.\n    Parameters:\n        s a string.\n        lowercase a boolean (optional; default value: true).\n    Description: Correctly attaches the article 'a' to a string. If `lowercase` is true, the article will be lowercase.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.c_input_line",
        "value": "crawl.c_input_line",
        "docText": "crawl.c_input_line \n    Syntax:\n        line = crawl.c_input_line()\n    Returns: string or nil.\n    Parameters: None.\n    Description: Cancellably prompts the user for a line of input. The line is limited to 500 characters. Returns the input string or nil if canceled.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.call_dlua",
        "value": "crawl.call_dlua",
        "docText": "crawl.call_dlua \n    Syntax:\n        result = crawl.call_dlua(chunk)\n    Returns: scalar value.\n    Parameters:\n        chunk a string representing Lua code to execute.\n    Description: Executes Lua code in the dungeon (dlua) context and returns the result of the execution.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.clear_messages",
        "value": "crawl.clear_messages",
        "docText": "crawl.clear_messages \n    Syntax:\n        crawl.clear_messages(force)\n    Returns: nil.\n    Parameters:\n        force a boolean.\n    Description: Clears the message window. If `force` is true, all messages will be cleared immediately.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.coinflip",
        "value": "crawl.coinflip",
        "docText": "crawl.coinflip \n    Syntax:\n        result = crawl.coinflip()\n    Returns: boolean.\n    Description: Flips a coin and returns true or false with a 50% chance.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.delay",
        "value": "crawl.delay",
        "docText": "crawl.delay \n    Syntax:\n        crawl.delay(ms)\n    Returns: nil.\n    Parameters:\n        ms an integer representing the delay in milliseconds.\n    Description: Pauses the game for the specified number of milliseconds.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.div_rand_round",
        "value": "crawl.div_rand_round",
        "docText": "crawl.div_rand_round \n    Syntax:\n        result = crawl.div_rand_round(numerator, denominator)\n    Returns: integer.\n    Parameters:\n        numerator an integer.\n        denominator an integer.\n    Description: Divides `numerator` by `denominator` and returns the result. If there is a remainder, there is a chance it rounds up.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.do_commands",
        "value": "crawl.do_commands",
        "docText": "crawl.do_commands \n    Syntax:\n        crawl.do_commands(commands[, hide=false])\n    Returns: nil.\n    Parameters:\n        commands an array of command names.\n        hide a boolean (optional; default value: false).\n    Description: Executes a sequence of named crawl commands. The commands are processed in the order given. If `hide` is true, the targeter will be hidden during processing.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.do_targeted_command",
        "value": "crawl.do_targeted_command",
        "docText": "crawl.do_targeted_command \n    Syntax:\n        action_taken = crawl.do_targeted_command(command[, x=0[, y=0[, if=false]]])\n    Returns: boolean.\n    Parameters:\n        command a string representing the command name.\n        x a number (optional; default value: 0).\n        y a number (optional; default value: 0).\n        if a boolean (optional; default value: false).\n    Description: Handles any command that requires a target. If coordinates `x` and `y` are valid, the command will be executed at that location. Returns true if an action is taken.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.dpr",
        "value": "crawl.dpr",
        "docText": "crawl.dpr \n    Syntax:\n        crawl.dpr(text)\n    Returns: nil.\n    Parameters:\n        text a string.\n    Description: Outputs the given string to the debug channel, visible only in debug builds.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.dump_char",
        "value": "crawl.dump_char",
        "docText": "crawl.dump_char \n    Syntax:\n        crawl.dump_char()\n    Returns: nil.\n    Description: Produces a character dump, which contains detailed information about the player character.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.enable_more",
        "value": "crawl.enable_more",
        "docText": "crawl.enable_more \n    Syntax:\n        crawl.enable_more(flag)\n    Returns: nil.\n    Parameters:\n        flag a boolean.\n    Description: Enables or disables the use of --- more --- prompts, depending on the value of `flag`.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.err_trace",
        "value": "crawl.err_trace",
        "docText": "crawl.err_trace \n    Syntax:\n        result = crawl.err_trace(func, args)\n    Returns: the result of the function call or an error trace.\n    Parameters:\n        func a Lua function to call.\n        args a table of arguments to pass to the function.\n    Description: Attempts to execute the given Lua function and traces any errors that occur. Returns the function result or the error trace if the call fails.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.flush_input",
        "value": "crawl.flush_input",
        "docText": "crawl.flush_input \n    Syntax:\n        crawl.flush_input()\n    Returns: nil.\n    Parameters: None.\n    Description: Flushes the input buffer, removing any pending key presses.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.flush_prev_message",
        "value": "crawl.flush_prev_message",
        "docText": "crawl.flush_prev_message \n    Syntax:\n        crawl.flush_prev_message()\n    Returns: nil.\n    Parameters: None.\n    Description: Writes out any previous message to the message window.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.formatted_mpr",
        "value": "crawl.formatted_mpr",
        "docText": "crawl.formatted_mpr \n    Syntax:\n        crawl.formatted_mpr(message, channel)\n    Returns: nil.\n    Parameters:\n        message a string.\n        channel an integer (optional; default value: 0).\n    Description: Prints the formatted message to the message window using the specified message channel.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.game_started",
        "value": "crawl.game_started",
        "docText": "crawl.game_started \n    Syntax:\n        result = crawl.game_started()\n    Returns: boolean.\n    Parameters: None.\n    Description: Checks if the game has started and returns true if it has, otherwise returns false.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.get_command",
        "value": "crawl.get_command",
        "docText": "crawl.get_command \n    Syntax:\n        keybind = crawl.get_command(name)\n    Returns: string or nil.\n    Parameters:\n        name a string representing the command name.\n    Description: Looks up the current key bound to a command and returns the key combination or nil if not found.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.get_target",
        "value": "crawl.get_target",
        "docText": "crawl.get_target \n    Syntax:\n        x, y = crawl.get_target()\n    Returns: two integers representing coordinates.\n    Parameters: None.\n    Description: Prompts the user to select a location via the targeting screen and returns the relative position of the chosen location.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.getch",
        "value": "crawl.getch",
        "docText": "crawl.getch \n    Syntax:\n        key = crawl.getch()\n    Returns: integer.\n    Parameters: None.\n    Description: Reads and returns a key press (key combo).",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.grammar",
        "value": "crawl.grammar",
        "docText": "crawl.grammar \n    Syntax:\n        description = crawl.grammar(what[, how=\"plain\"])\n    Returns: string.\n    Parameters:\n        what a string representing the item to describe.\n        how a string (optional; default value: \"plain\") representing the description type.\n    Description: Grammatically describes an object or entity. Different description types are available (e.g., \"plain\", \"the\", \"a\", \"your\", etc.).",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.is_tiles",
        "value": "crawl.is_tiles",
        "docText": "crawl.is_tiles \n    Syntax:\n        result = crawl.is_tiles()\n    Returns: boolean.\n    Parameters: None.\n    Description: Returns true if the game is running in tiles mode, otherwise returns false.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.is_touch_ui",
        "value": "crawl.is_touch_ui",
        "docText": "crawl.is_touch_ui \n    Syntax:\n        result = crawl.is_touch_ui()\n    Returns: boolean.\n    Parameters: None.\n    Description: Returns true if the touch UI is being used, otherwise returns false.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.is_webtiles",
        "value": "crawl.is_webtiles",
        "docText": "crawl.is_webtiles \n    Syntax:\n        result = crawl.is_webtiles()\n    Returns: boolean.\n    Parameters: None.\n    Description: Returns true if the game is running as a webtiles build, even if the player is currently using console mode.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.kbhit",
        "value": "crawl.kbhit",
        "docText": "crawl.kbhit \n    Syntax:\n        flag = crawl.kbhit()\n    Returns: integer (1 or 0).\n    Parameters: None.\n    Description: Returns 1 if there is pending input, otherwise returns 0.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.message",
        "value": "crawl.message",
        "docText": "crawl.message \n    Syntax:\n        crawl.message(message, channel)\n    Returns: nil.\n    Parameters:\n        message a string.\n        channel an integer representing the message channel.\n    Description: Prints a message to the message window on the specified channel. A wrapper for message output.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.message_filter",
        "value": "crawl.message_filter",
        "docText": "crawl.message_filter \n    Syntax:\n        filter = crawl.message_filter(pat[, ch=-1])\n    Returns: MessageFilter or nil.\n    Parameters:\n        pat a string representing the filter pattern.\n        ch an integer (optional; default value: -1) representing the channel number.\n    Description: Creates a message filter based on the given pattern and channel.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.messages",
        "value": "crawl.messages",
        "docText": "crawl.messages \n    Syntax:\n        crawl.messages(num)\n    Returns: string.\n    Parameters:\n        num an integer representing how many lines back to go.\n    Description: Retrieves a specified number of previous messages from the message buffer.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.more",
        "value": "crawl.more",
        "docText": "crawl.more \n    Syntax:\n        crawl.more()\n    Returns: nil.\n    Parameters: None.\n    Description: Displays a --- more --- prompt to the player.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.mpr",
        "value": "crawl.mpr",
        "docText": "crawl.mpr \n    Syntax:\n        crawl.mpr(message, channel)\n    Returns: nil.\n    Parameters:\n        message a string representing the message to print.\n        channel an integer (optional; default value: 0) representing the message channel.\n    Description: Prints a message to the message window using the specified message channel. The default channel is plain text.\n\n    List of channels:\n        Index   Channel name        Description\n        0       plain               Regular text.\n        1       friend action        Actions taken by friendly monsters.\n        2       prompt              Various prompts to the player.\n        3       god                 God/religion-related messages.\n        4       pray                Messages related to praying.\n        5       duration            Effect duration warnings.\n        6       danger              Serious life-threatening situations (e.g., large HP attacks).\n        7       warn                Less serious threat warnings.\n        8       food                Hunger-related messages.\n        9       recovery            Recovery from conditions (disease, poison, etc.).\n        10      sound               Messages about sounds the player hears.\n        11      talk                Monster speech.\n        12      talk visual         Visual representation of monsters’ \"silent talk.\"\n        13      intrinsic gain      Player level, stat, or species power gains.\n        14      mutation            Messages about player gaining or losing mutations.\n        15      monster spell       Monsters casting spells.\n        16      monster enchant     Monster enchantments (up or down).\n        17      friend spell        Allied monsters casting spells.\n        18      friend enchant      Allied monsters' enchantments (up or down).\n        19      monster damage      Damage reports from monsters.\n        20      monster target      Marks a monster as a target.\n        21      banishment          Abyss-related messages.\n        22      rotten meat         Messages about corpses becoming rotten.\n        23      equipment           Equipment listing messages.\n        24      floor items         Listing of items on the floor.\n        25      multiturn actions   Messages about delayed or multiturn actions.\n        26      examine             Descriptions of monsters, features, or items.\n        27      examine filter      Filtered descriptions (less important instances of the above).\n        28      diagnostics         Various diagnostic messages.\n        29      error               Error messages.\n        30      tutorial            Messages related to the tutorial.\n        31      orb                 Messages related to the Orb.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.msgch_name",
        "value": "crawl.msgch_name",
        "docText": "crawl.msgch_name \n    Syntax:\n        name = crawl.msgch_name(num)\n    Returns: string.\n    Parameters:\n        num an integer representing the channel number.\n    Description: Returns the name of the message channel corresponding to the given channel number.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.msgch_num",
        "value": "crawl.msgch_num",
        "docText": "crawl.msgch_num \n    Syntax:\n        num = crawl.msgch_num(name)\n    Returns: integer.\n    Parameters:\n        name a string representing the channel name.\n    Description: Returns the channel number corresponding to the given channel name.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.one_chance_in",
        "value": "crawl.one_chance_in",
        "docText": "crawl.one_chance_in \n    Syntax:\n        result = crawl.one_chance_in(in)\n    Returns: boolean.\n    Parameters:\n        in an integer representing the chance.\n    Description: Performs a weighted coin flip. Returns true if successful based on the specified chance.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.playsound",
        "value": "crawl.playsound",
        "docText": "crawl.playsound \n    Syntax:\n        crawl.playsound(sf)\n    Returns: nil.\n    Parameters:\n        sf a string representing the sound file.\n    Description: Plays a sound. Available only if crawl is compiled with sound support.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.process_command",
        "value": "crawl.process_command",
        "docText": "crawl.process_command \n    Syntax:\n        result = crawl.process_command()\n    Returns: boolean.\n    Parameters: None.\n    Description: Tells crawl to process the current command. Returns true if it will actually do so.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.process_keys",
        "value": "crawl.process_keys",
        "docText": "crawl.process_keys \n    Syntax:\n        crawl.process_keys(keys[, hide=false])\n    Returns: nil.\n    Parameters:\n        keys a string representing the input keys.\n        hide a boolean (optional; default value: false).\n    Description: Processes a string of input keys. If `hide` is true, the targeter is hidden during processing.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.random2",
        "value": "crawl.random2",
        "docText": "crawl.random2 \n    Syntax:\n        val = crawl.random2(max)\n    Returns: integer.\n    Parameters:\n        max an integer representing the upper bound.\n    Description: Returns a random number in the range [0, max). The upper bound is exclusive.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.random2avg",
        "value": "crawl.random2avg",
        "docText": "crawl.random2avg \n    Syntax:\n        val = crawl.random2avg(max, num)\n    Returns: integer.\n    Parameters:\n        max an integer representing the upper bound for each roll.\n        num an integer representing the number of rolls.\n    Description: Averages `num` random rolls between 0 and `max`.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.random_range",
        "value": "crawl.random_range",
        "docText": "crawl.random_range \n    Syntax:\n        val = crawl.random_range(min, max[, rolls=1])\n    Returns: integer.\n    Parameters:\n        min an integer representing the lower bound.\n        max an integer representing the upper bound.\n        rolls an integer (optional; default value: 1).\n    Description: Returns a random number in the range [min, max], averaged over `rolls` rolls.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.random_real",
        "value": "crawl.random_real",
        "docText": "crawl.random_real \n    Syntax:\n        val = crawl.random_real()\n    Returns: number.\n    Parameters: None.\n    Description: Returns a random floating-point number in the range [0, 1). The upper bound is exclusive.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.read_options",
        "value": "crawl.read_options",
        "docText": "crawl.read_options \n    Syntax:\n        crawl.read_options(filename)\n    Returns: nil.\n    Parameters:\n        filename a string representing the file name.\n    Description: Reads options from the specified file.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.redraw_screen",
        "value": "crawl.redraw_screen",
        "docText": "crawl.redraw_screen \n    Syntax:\n        crawl.redraw_screen()\n    Returns: nil.\n    Parameters: None.\n    Description: Redraws the entire screen.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.regex",
        "value": "crawl.regex",
        "docText": "crawl.regex \n    Syntax:\n        pattern = crawl.regex(pat)\n    Returns: Regex or nil.\n    Parameters:\n        pat a string representing the pattern.\n    Description: Compiles a regular expression using PCRE.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.roll_dice",
        "value": "crawl.roll_dice",
        "docText": "crawl.roll_dice \n    Syntax:\n        val = crawl.roll_dice([num_dice=1], sides)\n    Returns: integer.\n    Parameters:\n        num_dice an integer (optional; default value: 1).\n        sides an integer representing the number of sides.\n    Description: Rolls `num_dice` dice, each with `sides` sides, and returns the sum.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.runmacro",
        "value": "crawl.runmacro",
        "docText": "crawl.runmacro \n    Syntax:\n        crawl.runmacro(macroname)\n    Returns: nil.\n    Parameters:\n        macroname a string representing the macro name.\n    Description: Executes the specified macro.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.sendkeys",
        "value": "crawl.sendkeys",
        "docText": "crawl.sendkeys \n    Syntax:\n        crawl.sendkeys(keys[, ...])\n    Returns: nil.\n    Parameters:\n        keys a string, integer, or array representing the input keys.\n        ... (optional).\n    Description: Sends keypresses to crawl. Processes multiple arguments as key inputs in sequence.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.set_more_autoclear",
        "value": "crawl.set_more_autoclear",
        "docText": "crawl.set_more_autoclear \n    Syntax:\n        crawl.set_more_autoclear(flag)\n    Returns: nil.\n    Parameters:\n        flag a boolean.\n    Description: Toggles the autoclearing of --- more --- prompts based on the value of `flag`.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.set_sendkeys_errors",
        "value": "crawl.set_sendkeys_errors",
        "docText": "crawl.set_sendkeys_errors \n    Syntax:\n        crawl.set_sendkeys_errors(param)\n    Returns: nil.\n    Parameters:\n        param a boolean.\n    Description: Enables or disables crashes on incomplete buffer input. Used mainly for testing.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.setopt",
        "value": "crawl.setopt",
        "docText": "crawl.setopt \n    Syntax:\n        crawl.setopt(opt)\n    Returns: nil.\n    Parameters:\n        opt a string representing an option.\n    Description: Sets user options from the provided option string.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.simplex",
        "value": "crawl.simplex",
        "docText": "crawl.simplex \n    Syntax:\n        noise = crawl.simplex(x, y[, z[, w]])\n    Returns: number.\n    Parameters:\n        x a number representing the first coordinate.\n        y a number representing the second coordinate.\n        z a number (optional) representing the third coordinate.\n        w a number (optional) representing the fourth coordinate.\n    Description: Generates 2D, 3D, or 4D Simplex noise based on the given coordinates.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.split",
        "value": "crawl.split",
        "docText": "crawl.split \n    Syntax:\n        result = crawl.split(s, split)\n    Returns: table of strings.\n    Parameters:\n        s a string to split.\n        split a string representing the delimiter.\n    Description: Splits the input string `s` at each occurrence of `split` and returns a table of strings.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.split_bytes",
        "value": "crawl.split_bytes",
        "docText": "crawl.split_bytes \n    Syntax:\n        b1, b2, b3, b4 = crawl.split_bytes(num)\n    Returns: 4 integers.\n    Parameters:\n        num an integer.\n    Description: Splits a 32-bit integer into four bytes.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.stat_gain_prompt",
        "value": "crawl.stat_gain_prompt",
        "docText": "crawl.stat_gain_prompt \n    Syntax:\n        result = crawl.stat_gain_prompt()\n    Returns: boolean.\n    Parameters: None.\n    Description: Checks if the player is being prompted to choose a stat to increase.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.stderr",
        "value": "crawl.stderr",
        "docText": "crawl.stderr \n    Syntax:\n        crawl.stderr(text)\n    Returns: nil.\n    Parameters:\n        text a string.\n    Description: Prints the specified text to stderr for debugging purposes.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.string_compare",
        "value": "crawl.string_compare",
        "docText": "crawl.string_compare \n    Syntax:\n        result = crawl.string_compare(s1, s2)\n    Returns: integer.\n    Parameters:\n        s1 a string.\n        s2 a string.\n    Description: Compares two strings in a locale-independent way. Returns -1 if `s1` < `s2`, 1 if `s1` > `s2`, and 0 if they are equal.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.take_note",
        "value": "crawl.take_note",
        "docText": "crawl.take_note \n    Syntax:\n        crawl.take_note(note)\n    Returns: nil.\n    Parameters:\n        note a string representing the note.\n    Description: Records a note.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.trim",
        "value": "crawl.trim",
        "docText": "crawl.trim \n    Syntax:\n        result = crawl.trim(s)\n    Returns: string.\n    Parameters:\n        s a string.\n    Description: Trims leading and trailing whitespace from the input string.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.version",
        "value": "crawl.version",
        "docText": "crawl.version \n    Syntax:\n        version = crawl.version([fmt=\"long\"])\n    Returns: string.\n    Parameters:\n        fmt a string (optional; default value: \"long\").\n    Description: Returns the crawl version. The `fmt` can be \"long\", \"major\", or \"short\" to specify the format.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.weapon_check",
        "value": "crawl.weapon_check",
        "docText": "crawl.weapon_check \n    Syntax:\n        result = crawl.weapon_check()\n    Returns: boolean.\n    Parameters: None.\n    Description: Checks if the player really wants to use their current weapon and returns true if confirmed.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.worley",
        "value": "crawl.worley",
        "docText": "crawl.worley \n    Syntax:\n        dist1, dist2, id1, id2, pos1x, pos1y, pos1z, pos2x, pos2y, pos2z = crawl.worley(px, py, pz)\n    Returns: multiple values.\n    Parameters:\n        px a number representing the x-coordinate.\n        py a number representing the y-coordinate.\n        pz a number representing the z-coordinate.\n    Description: Returns the full Worley noise datum for a given point, including distances and IDs of the nearest points.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.worley_diff",
        "value": "crawl.worley_diff",
        "docText": "crawl.worley_diff \n    Syntax:\n        diff, id1 = crawl.worley_diff(px, py, pz)\n    Returns: multiple values.\n    Parameters:\n        px a number representing the x-coordinate.\n        py a number representing the y-coordinate.\n        pz a number representing the z-coordinate.\n    Description: Returns the difference between the nearest point Worley distances.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.x_chance_in_y",
        "value": "crawl.x_chance_in_y",
        "docText": "crawl.x_chance_in_y \n    Syntax:\n        result = crawl.x_chance_in_y(x, y)\n    Returns: boolean.\n    Parameters:\n        x an integer.\n        y an integer.\n    Description: Performs a random draw with `x` chances in `y` and returns true if successful.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.yesno",
        "value": "crawl.yesno",
        "docText": "crawl.yesno \n    Syntax:\n        answer = crawl.yesno(prompt, safe[, safe_answer[, clear_after=true[, interrupt_delays=true[, no_prompt=false]]]])\n    Returns: boolean.\n    Parameters:\n        prompt a string representing the question for the user.\n        safe a boolean indicating whether lowercase answers are accepted.\n        safe_answer a string or nil (optional) to specify a safe default answer.\n        clear_after a boolean (optional; default value: true) to clear the prompt after the user answers.\n        interrupt_delays a boolean (optional; default value: true) to interrupt ongoing delays.\n        no_prompt a boolean (optional; default value: false) to skip asking the question and just wait for the answer.\n    Description: Asks the player a yes/no question and returns the answer.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.yesnoquit",
        "value": "crawl.yesnoquit",
        "docText": "crawl.yesnoquit \n    Syntax:\n        answer = crawl.yesnoquit(prompt, safe[, safe_answer[, allow_all=false[, clear_after=true]]])\n    Returns: integer.\n    Parameters:\n        prompt a string representing the question for the user.\n        safe a boolean indicating whether lowercase answers are accepted.\n        safe_answer a string or nil (optional) to specify a safe default answer.\n        allow_all a boolean (optional; default value: false) to ask a yes/no/quit/all question.\n        clear_after a boolean (optional; default value: true) to clear the prompt after the user answers.\n    Description: Asks the player a yes/no/quit question and returns 0 for no, 1 for yes, and -1 for quit.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.args",
        "value": "crawl.args",
        "docText": "crawl.args \n    Syntax:\n        args = crawl.args()\n    Returns: table.\n    Parameters: None.\n    Description: Retrieves the command-line arguments passed to the game and returns them as a table.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.god_speaks",
        "value": "crawl.god_speaks",
        "docText": "crawl.god_speaks \n    Syntax:\n        crawl.god_speaks(Name, Speech)\n    Returns: nil.\n    Parameters:\n        Name a string representing the name of a crawl god.\n        Speech a string representing the message the god speaks.\n    Description: Displays divine speech from a specified god.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.make_name",
        "value": "crawl.make_name",
        "docText": "crawl.make_name \n    Syntax:\n        name = crawl.make_name()\n    Returns: string.\n    Parameters: None.\n    Description: Generates a random item name and returns it as a string.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.milestone",
        "value": "crawl.milestone",
        "docText": "crawl.milestone \n    Syntax:\n        crawl.milestone(type, milestone, origin)\n    Returns: nil.\n    Parameters:\n        type a string representing the type of milestone.\n        milestone a string describing the milestone.\n        origin a string representing the origin of the milestone.\n    Description: Registers a dgl milestone. No operation if not playing a dgl game.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.millis",
        "value": "crawl.millis",
        "docText": "crawl.millis \n    Syntax:\n        time = crawl.millis()\n    Returns: integer.\n    Parameters: None.\n    Description: Returns the current milliseconds of the time of day.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.redraw_stats",
        "value": "crawl.redraw_stats",
        "docText": "crawl.redraw_stats \n    Syntax:\n        crawl.redraw_stats()\n    Returns: nil.\n    Parameters: None.\n    Description: Redraws only the player stats on the screen. Typically, you would use `crawl.redraw_screen()` unless you specifically want to redraw just the stats.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.redraw_view",
        "value": "crawl.redraw_view",
        "docText": "crawl.redraw_view \n    Syntax:\n        crawl.redraw_view()\n    Returns: nil.\n    Parameters: None.\n    Description: Redraws only the view window. For most cases, `crawl.redraw_screen()` should be used unless you specifically need to update just the view window.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.set_max_runes",
        "value": "crawl.set_max_runes",
        "docText": "crawl.set_max_runes \n    Syntax:\n        crawl.set_max_runes(nrune)\n    Returns: nil.\n    Parameters:\n        nrune an integer representing the total number of obtainable runes.\n    Description: Modifies the maximum number of obtainable runes in the game.",
        "meta": "dcss lua"
    },
    {
        "caption": "crawl.unavailable_god",
        "value": "crawl.unavailable_god",
        "docText": "crawl.unavailable_god \n    Syntax:\n        available = crawl.unavailable_god(godname)\n    Returns: boolean.\n    Parameters:\n        godname a string representing the name of the god.\n    Description: Checks if a specific god is still available for new games. Returns false if the god is no longer available (e.g., if Jiyva has been killed by the player).",
        "meta": "dcss lua"
    }
]
