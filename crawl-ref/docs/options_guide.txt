Guide to Crawl's options
========================

This document explains all of the options in the latest version of Dungeon
Crawl Stone Soup. If you get stuck or some things don't seem to work properly,
ask for help in any of the community discussion resources described at
http://crawl.develz.org/.

The contents of this text are:

0-  Generalities.
0-a     Standard and additional option files.
0-b     Options on the command line.
0-c     Options and how to set them.
0-d     List options.
0-e     Aliases and variables.
1-  Starting Screen.
                name, type, remember_name, weapon, species, background, combo,
                restart_after_game, restart_after_save, newgame_after_quit,
                name_bypasses_menu, default_manual_training,
                autopickup_starting_ammo, game_seed, pregen_dungeon,
                suppress_startup_errors, map, fully_random, arena_teams
2-  File System and Sound.
                crawl_dir, morgue_dir, save_dir, macro_dir, sound, hold_sound,
                sound_file_path, one_SDL_sound_channel
3-  Interface.
3-a     Dropping and Picking up.
                autopickup, autopickup_exceptions, default_autopickup,
                pickup_thrown, assign_item_slot, pickup_menu_limit,
                drop_filter, drop_disables_autopickup
3-b     Passive Sightings (detected and remembered entities).
                detected_monster_colour, detected_item_colour,
                remembered_monster_colour
3-c     Dungeon View Item and Monster Highlighting.
                friend_highlight, neutral_highlight, unusual_highlight,
                stab_highlight, may_stab_highlight, heap_highlight,
                feature_item_highlight, trap_item_highlight
3-d     Level Map Functions.
                level_map_cursor_step
3-e     Viewport Display Options.
                view_max_width, view_max_height, view_lock_x,
                view_lock_y, view_lock, centre_on_scroll,
                symmetric_scroll, scroll_margin_x, scroll_margin_y,
                scroll_margin, always_show_exclusions
3-f     Travel and Exploration.
                travel_delay, explore_delay, rest_delay, travel_avoid_terrain,
                explore_greedy, explore_greedy_visit, explore_item_greed,
                explore_stop, explore_stop_pickup_ignore, explore_wall_bias,
                travel_key_stop, travel_one_unsafe_move, tc_reachable,
                tc_dangerous, tc_disconnected, tc_excluded, tc_exclude_circle,
                tc_forbidden, runrest_ignore_message, runrest_stop_message,
                interrupt_<delay>, delay_safe_poison, runrest_ignore_monster,
                rest_wait_both, rest_wait_ancestor, rest_wait_percent,
                explore_auto_rest, auto_exclude, travel_open_doors
3-g     Command Enhancements.
                auto_switch, easy_unequip, equip_unequip, jewellery_prompt,
                easy_confirm, simple_targeting, force_spell_targeter,
                force_ability_targeter, allow_self_target, ability_menu,
                spell_menu, easy_floor_use, sort_menus, spell_slot, item_slot,
                ability_slot, autofight_stop, autofight_warning,
                autofight_fires, autofight_nomove_fires, autofight_fire_stop,
                autofight_caught, autofight_wait, autofight_prompt_range,
                automagic_enable, automagic_slot, automagic_fight,
                automagic_stop, fail_severity_to_confirm, easy_door,
                warn_hatches, enable_recast_spell, confirm_action,
                regex_search, autopickup_search, bad_item_prompt,
                auto_hide_spells, menu_arrow_control, single_column_item_menus
3-h     Message and Display Enhancements.
                hp_warning, mp_warning, hp_colour, mp_colour, stat_colour,
                status_caption_colour, enemy_hp_colour, clear_messages,
                show_more, small_more, show_newturn_mark, show_game_time,
                equip_bar, animate_equip_bar, item_stack_summary_minimum,
                mlist_min_height, mlist_allow_alternative_layout,
                monster_item_view_coordinates, monster_item_view_features,
                msg_min_height, msg_max_height, msg_webtiles_height,
                messages_at_top, msg_condense_repeats, msg_condense_short,
                show_travel_trail, skill_focus, default_show_all_skills,
                monster_list_colour, view_delay, reduce_animations,
                use_animations, unusual_monster_items, darken_beyond_range,
                show_blood, food_snacking_frequency, fountain_line_frequency,
                force_more_message, flash_screen_message, cloud_status,
                always_show_zot, always_show_gems, more_gem_info, action_panel,
                action_panel_filter, action_panel_show_unidentified,
                action_panel_scale, action_panel_orientation,
                action_panel_font_family, action_panel_font_size
3-i     Colours (messages and menus).
                menu_colour, message_colour
3-j     Quivers, firing, and ammo.
                fire_items_start, fire_order, fire_order_spell,
                fire_order_ability, fail_severity_to_quiver,
                quiver_menu_focus
3-k     Message Channels.
                plain, prompt, god, duration, danger, warning, recovery,
                talk, talk_visual, timed_portal, sound, intrinsic_gain,
                mutation, monster_spell, monster_enchant, monster_warning,
                friend_spell, friend_enchant, friend_action, monster_damage,
                monster_target, banishment, equipment, floor, multiturn,
                examine, examine_filter, diagnostic, error, tutorial, orb,
                hell_effect, dgl_message
3-l     Inscriptions.
                autoinscribe, show_god_gift
3-m     Macro related Options.
                flush.failure, flush.command, flush.message,
                additional_macro_file, bindkey
3-n     Tiles Options.
                tile_show_items, tile_skip_title, tile_menu_icons,
                tile_player_col, tile_monster_col, tile_neutral_col,
                tile_peaceful_col, tile_friendly_col, tile_plant_col,
                tile_item_col, tile_unseen_col, tile_floor_col, tile_wall_col,
                tile_mapped_floor_col, tile_mapped_wall_col,
                tile_explore_horizon_col, tile_door_col, tile_downstairs_col,
                tile_upstairs_col, tile_branchstairs_col, tile_portal_col,
                tile_transporter_col, tile_transporter_landing_col,
                tile_feature_col, tile_trap_col, tile_water_col,
                tile_deep_water_col, tile_lava_col, tile_excluded_col,
                tile_excl_centre_col, tile_window_col, tile_update_rate,
                tile_runrest_rate, tile_key_repeat_delay, tile_tooltip_ms,
                tile_tag_pref, tile_window_width, tile_window_height,
                tile_window_ratio, tile_window_limit_size, game_scale,
                tile_map_pixels, tile_viewport_scale, tile_map_scale,
                tile_cell_pixels, tile_sidebar_pixels, tile_filter_scaling,
                tile_force_overlay, tile_overlay_col,
                tile_overlay_alpha_percent, tile_full_screen,
                tile_use_small_layout, tile_font_crt_file, tile_font_stat_file,
                tile_font_msg_file, tile_font_tip_file, tile_font_lbl_file,
                tile_font_crt_family, tile_font_stat_family,
                tile_font_msg_family, tile_font_lbl_family, tile_font_crt_size,
                tile_font_stat_size, tile_font_msg_size, tile_font_tip_size,
                tile_font_lbl_size, tile_font_ft_light, glyph_mode_font,
                glyph_mode_font_size, tile_show_minihealthbar,
                tile_show_minimagicbar, tile_show_demon_tier, tile_water_anim,
                tile_misc_anim, tile_realtime_anim, tile_show_player_species,
                tile_player_status_icons,
                tile_show_threat_levels, tile_layout_priority,
                tile_display_mode, tile_level_map_hide_messages,
                tile_level_map_hide_sidebar, tile_player_tile,
                tile_weapon_offsets, tile_shield_offsets, tile_grinch,
                tile_web_mouse_control, tile_web_mobile_input_helper
4-  Character Dump.
4-a     Saving.
                dump_on_save
4-b     Items and Kills.
                kill_map, dump_kill_places, dump_item_origins,
                dump_item_origin_price, dump_message_count, dump_order,
                dump_kill_breakdowns
4-c     Notes.
                user_note_prefix, note_items, note_monsters, note_hp_percent,
                note_skill_levels, note_all_skill_levels, note_skill_max,
                note_xom_effects, note_messages, note_chat_messages,
                note_dgl_messages
5-  Miscellaneous.
5-a     All OS.
                mouse_input, wiz_mode, explore_mode, char_set, colour,
                display_char, feature, mon_glyph, item_glyph,
                use_fake_player_cursor, show_player_species,
                use_modifier_prefix_keys, language, fake_lang, messaging
                read_persist_options

5-b     Windows.
                dos_use_background_intensity
5-c     Unix.
                blink_brightens_background, bold_brightens_foreground,
                best_effort_brighten_background,
                best_effort_brighten_foreground, allow_extended_colours,
                background_colour, foreground_colour,
                use_default_terminal_colours, use_fake_cursor

6-  Lua.
                lua_max_memory
6-a     Including lua files.
6-b     Executing inline lua.
6-c     Conditional options.
6-d     Conditional option caveats.

7-  Recommended Options for Blind Players.

------------------------------------------------------------------------

0-  Generalities on options.
============================

The standard way of adjusting an option from the default is to manually
set it in your options file; see (0-a) and (0-c) below for details. A small
number of options are saved automatically from their current values in the
relevant in-game user interface; these are marked with "(persistent)" in
their documentation and can be overridden by a manual setting in the
options file.

0-a     Standard and additional option files.
---------------------------------------------

In online play, choose "edit rc" from the webtiles game selection screen,
or enter the rc file editor via ssh.

In offline play, Crawl uses the first file of the following list as its option
file:

* settings/init.txt
* init.txt (in the Crawl directory)
* .crawlrc (in the Unix home directory)

Alternatively, you can use the command line option
    -rc <file>
which tells Crawl to use precisely that file.

On the starting screen, Crawl tells you which init file it uses, if any. The
Crawl directory location is system-specific.

It is possible to include additional files within the options file via
    include = <file>
Note that these are treated as if their content was entered verbatim
in the options file. By default, Crawl searches for all these included
files in the settings/ directory but you can specify a special folder
using the command line option
    -rcdir <dir>

External option files have several uses: They allow quick customisation
of Crawl's general appearance (colouring/suppression of messages, and
the inventory style). More elaborate option magic (usually containing
lua) can also be conveniently hidden this way. Finally, there are some
additional option files in the settings/ directory; these allow setting
some options and monster glyphs to their defaults from older versions.
See the header of the default init.txt for more details.

The following files are automatically included with Crawl for easy usage, and
can be included without any further setup:

* advanced_optioneering.txt
* dvorak_command_keys.txt
* colemak_command_keys.txt
* neo_command_keys.txt
* no_vi_command_keys.txt
* safe_move_shift.txt

0-b     Options on the command line.
------------------------------------

A quick way to make small changes to the options, without having to
switch to a different option file, is to use the command line options
-extra-opt-first or -extra-opt-last, which make it as if the given
option was (respectively) at the top or bottom of the option file. For
example,

    -extra-opt-last wiz_mode=yes

will cause any new game to start in wizard mode. -extra-opt-first and
-extra-opt-last can be used multiple times on the same command line.

0-c     Options and how to set them.
------------------------------------

There are three broad types of Crawl options: true/false values
(booleans), arbitrary values, and lists of values. In this document,
options are usually described with their default values (if there is a
default); this should also explain which of the above-mentioned types
it is. Each option should have some remarks on how it's typically used
- but keep in mind that the options you want to use depend on your
playing style and sometimes also on your operating system.

There are two styles you can use to set options. The classic
name=value syntax, one option per-line:
    remember_name  = true
    explore_greedy = false

And the NetHack-style combined option line:
    OPTION = remember_name, !explore_greedy

The second style is useful to specify simple options in a few lines,
but it cannot be used for options that take complex lists of values
(such as the autopickup_exceptions option).

Some options need a path as an argument; here you have to use a
filesystem path suitable for your system. Other options accept regular
expressions (regexes): here you can simply use ordinary strings, adapt
the suggested regexes to your needs or search the internet for regex
syntax.

Note that in the tutorial and hints modes, some of your options settings may
get overwritten to facilitate the explanations. This concerns the following
options, and their enforced setting for tutorial games are as follows:
   clear_messages      = true
   weapon              = hand axe, for Berserkers in hints mode

0-d     List options.
---------------------

A number of options can have a list of values. Most but not all of these
options allow setting multiple values in a single line, separated by commas.
It is possible to reset, add items to, or remove items from such an option.
   Add values to the end of the list (append):
      drop_filter += useless, enchant
   Add values to the beginning of the list (prepend):
      drop_filter ^= forbidden
   Remove values from the list (exact match only):
      drop_filter -= enchant
   Reset the list:
      drop_filter = bad_item, dangerous_item
   Empty the list:
      drop_filter =

The "listopt = value" syntax first clears the list, then adds values. In
previous versions of Crawl it was a synonym for +=, and only bare
"listopt =" cleared the list.

For many options, such as drop_filter, there is effectively no difference
between appending and prepending. However, other options, such as
message_colour, do care about the order of items; these will be noted as
"Ordered list options" in their descriptions. In most cases, earlier items
take precedence over later ones, so += defers to existing matches (including
defaults) while ^= overrides them. So, for example, with the sequence of
options:
   message_colour  = cyan:hits
   message_colour ^= red:crimson
   message_colour += yellow:killer
the message "The crimson imp hits you!" will be displayed in red, while "The
killer bee hits you!" will be displayed in cyan.

0-e     Aliases, variables, and other directives
------------------------------------------------

For long option names, you can define option aliases by doing:
    alias := long_option_name
For instance, you can use:
    ae := autopickup_exceptions
and thereafter use "ae" instead of "autopickup_exceptions":
    ae += >uselessness, >inaccuracy

You can define shortcuts for option values (variables). For example,
    $useless := darkgrey
could be used in conjunction with
    menu_colour += $useless:random uselessness

To prevent a variable from being changed you can make it a constant:
    constant = useless

This is useful if you wish to prevent an included file from altering
a variable.

See dat/defaults/standard_colours.txt for usage of aliases and variables. Note
that changing the variables defined in these files will only affect your own
configuration file, as the default options will have already been loaded. If
you want to change them, you will have to override the options themselves.

To reset a value to its defaults, you can use:
    default = option_name

This won't work for certain options that have custom parsing.

1-  Starting Screen.
====================

The following options are a convenience to help you quickly start your
game of Crawl, and/or configure the start of the game from a file or the
command line.

name = Delilah
        If set, that's the name all your Crawl characters will get. Setting
        this will bypass the main menu by default; see `name_bypasses_menu`.

type = normal
        Choose a game type. Valid values are "normal", "seeded", "tutorial",
        "arena", "sprint", "descent", and "hints". If explicitly set (not just
        left to the default), this sets the default game type at the main menu.
        If the main menu is bypassed (e.g. by setting `name`), this option can
        be used to determine the game type. "descent" is only valid in alpha
        (development) builds.

remember_name = true
        Crawl remembers the options (species, background etc.) you used
        to create your last character. You may recycle them in the
        starting screen for a new character. If this option is set to
        true, Crawl will also remember the last name you used.

        If you use this option and want to enter a name _after_
        choosing your species and background, you must enter . at the
        initial name prompt - hitting Enter at the name prompt will
        simply reuse your old name if remember_name is set.

weapon += (short sword |...| unarmed | random | viable), <weapon>, ...
        (List option)
        Specifying the weapon option allows you to bypass the weapon
        selection screen. Tridents, flails, rapiers, long swords, and war
        axes are restricted to fighters and gladiators, and quarterstaves
        are restricted to gladiators only. The standard weapon prompt will be
        shown if an illegal choice for the selected background is specified.
        The "viable" option makes a random choice from among the "good" weapons
        for the chosen character. Specifying more than one option causes the
        game to randomly select a weapon from the given list. The combo option
        overrides (and is overridden by) this option.

species += (Human |...| Vampire | random | viable), <species>, ...
        (List option)
        The usual abbreviations (Hu, HO, etc.) work. "viable" will choose a
        viable species for a given background if the background is chosen
        first. Specifying multiple species causes one to be selected at
        random from the given species. The combo option overrides (and is
        overridden by) this option.

background += (Fighter |...| Wanderer | random | viable), <background>, ...
        (List option)
        Here again the abbreviations (Fi, HW, AK, etc.) can be used. The same
        caveat applies to "viable": it is only really meaningful if the
        species option is also set. Specifying multiple backgrounds causes
        one to be selected at random from the given species. The combo option
        overrides (and is overridden by) this option.

combo += (HuFi . short sword | Human Monk | ...), <combo>, ...
        (List option)
        Specifies a complete set of species, background, and (where
        applicable) weapon. If a combo requires a weapon choice and one isn't
        specified, it is prompted for. Combos may be abbreviated or specified
        in full. If multiple combos are specified, one is selected randomly
        from the specified combos. The weapon, species, and background
        options are overridden by (and override) this option.

restart_after_game = maybe/true
        When set to true, at the game end, crawl will return to the main menu.
        If set to maybe, crawl will return to the main menu only if the startup
        options don't bypass the main menu, otherwise it will exit. If set to
        false, it will exit unconditionally. This option is set to true for
        local tiles builds by default, and maybe by default for other builds.
        This option is ignored for online games.

restart_after_save = true
        When the game is saved, return to the main menu. This option
        only has an effect if restart_after_game is set to maybe or true.
        This option is ignored for online games.

newgame_after_quit = false
        When true, if a name/combo is set, quit will do a fast restart. On this
        setting, with restart_after_game as non-false, it may be possible to
        exit crawl only via saving.

name_bypasses_menu = true
        When set to true, having a valid name set via options will skip the main
        menu and jump right to a game or character selection (if there is no
        save).

default_manual_training = false (persistent)
        When set to true, new characters will start with skill training
        set to manual mode instead of automatic mode. This will also set the
        [!] selection on the skill (m) menu to "cost" by default, instead of
        "training".

autopickup_starting_ammo = true
        When set, at game start, autopickup is forced on (as per the \ menu)
        for the player's starting ammunition type. Even when this option is
        set, autopickup of those items can be disabled from the \ menu once
        the game has begun.

game_seed = none
        A number indicating the seed to initialize the random number generator
        from. Within certain limits, the same seed will deterministically lead
        to the same dungeon. If set to "none" or 0, the seed will be chosen
        randomly. This can also be set directly via the command line with
        "-seed", which will override any rc file setting. This value is an
        unsigned 64 bit integer.

pregen_dungeon = incremental
        This setting determines the level generation mode for new games, which
        interacts with random seeding (see the "Seeded play" section of the
        manual). In order to generate a stable dungeon from a seed, levels need
        to be generated in a consistent order. The recommended setting of
        `incremental` will generate levels as needed when entering a new level
        so that the game always generates levels in the same order, potentially
        catching up when skipping levels in the standard order.

        When set to `true` or `full`, the game will pregenerate the entire
        connected dungeon when starting a new character. This leads to
        deterministic dungeon generation relative to a particular game seed,
        and no load times when entering levels, but at the cost of a slow game
        start. Some servers may disallow full pregeneration for online play.

        When set to `false` or `classic`, the game will generate all levels on
        level entry, as was the rule before 0.23. Dungeons will not be stable
        given a seed with this option.

suppress_startup_errors = false
        If this is false, and an error is detected as the game first starts
        (such as a mistake in a configuration file), bring up a screen before
        loading to display these.

        The main menu will contain a warning of errors regardless of this
        setting, and it does not affect what happens with errors detected as a
        character is loaded.

map = ""
        This can be used to choose a sprint map. If set in an rc file, this
        value skips the sprint map selection submenu. Valid options are:
        dungeon_sprint_1, the_violet_keep_of_menkaure, dungeon_sprint_mu,
        dungeon_sprint_fedhas, sprint_v, arena_sprint, pitsprint, meatsprint,
        and linesprint.

fully_random = false
        Set to true to choose a combo randomly. If either species or job is
        set to `viable`, this will choose a combo from "recommended"
        characters, otherwise, it will choose combos entirely randomly. When
        set, the character selection menus are replaced with a prompt that
        offers you a combo, and allows you to accept or reroll.

arena_teams = ""
        Set to preselect teams in arena mode. When set, arena mode goes directly
        to the competition.

2-  File System.
================

The following directory options may be ignored or overridden on some systems
and builds. For example, they cannot be set in an rc file for online play. They
can also be set via the command line.

crawl_dir = <path>
        A path to be used for the relative paths when looking for other
        files. The default for this value is dependent on the system and
        build type. This option can also be set the `CRAWL_DIR` environment
        variable. When set, this will override the following three directory
        options if they have been previously set.

save_dir = saves/
        Directory where saves and bones are stored. A relative path
        will be interpreted relative to the value of `crawl_dir`.

morgue_dir = morgues/
        Directory where morgue dumps files (morgue*.txt and
        morgue*.lst) as well as character dumps files are written. A relative
        path will be interpreted relative to the value of `crawl_dir`.

macro_dir = <path>
        Directory for reading macro.txt.
        It should end with the path delimiter. The default value for this
        is dependent on system and build type.

sounds_on = true
        (Requires "Sound support"; check your version info)
        If true, plays sound effects in various situations.

sound ^= <regex>:<path to sound file>, <regex>:<path>,
        (Ordered list option)
        Plays the sound file if a message contains regex. In case of
        multiple matching regexes, only the sound of the last regex
        is played. The regex should not include commas or colons.
        For example
             sound += LOW HITPOINT WARNING:sound\sounds2\danger3.wav
        There are certain pre-defined regexes, as well, which can be
        used to get a sound to trigger for something that cannot
        otherwise be matched using a regex string. For example,
        using FIRE_PROMPT_SOUND for the regex will cause Crawl to
        play a sound whenever the fire prompt is opened. Check
        sound.h for a full listing of all these pre-defined regex
        strings.

sound_file_path = <path>
        When playing sounds (with the option above), the contents of
        this variable is appended to the start of the path. This is
        intended to make it easier to take one configuration across
        several platforms. These two lines are equivalent to the
        example above:
             sound_file_path = sound\sounds2\
             sound += LOW HITPOINT WARNING:danger3.wav
        The most recent instance of this option is the one that
        takes effect, and is not applied retroactively to previous
        instances of the sound option.

one_SDL_sound_channel = false
        When true, only one sound can play at a time (if using SDL).
        Is false by default since non-SDL sound backends don't
        support such control.


3-  Interface.
==============

3-a     Picking up and Dropping.
--------------------------------

autopickup = $?!+"/♦
        The above is the default list. The valid symbols are
        )       Weapons
        (       Missiles
        [       Armour
        /       Wands
        ?       Scrolls
        " or =  Jewellery
        !       Potions
        + or :  Books
        |       Staves
        0       Orbs
        }       Misc. items
        $       Gold
        ♦       Gems
        Note that _whether_ items are picked up automatically or not, is
        controlled by the in-game toggle Ctrl-A. Also note that picking
        up takes a turn, but only one turn (regardless of the number of
        items). If you teleport or blink onto a square with interesting
        items, these will not be picked up.

autopickup_exceptions ^= <pickup-regex, >don't-pickup-regex, ...
        (Ordered list option)
        A set of regexes that force matching items to be picked up (if
        prefixed with <), or never picked up (if prefixed with >).
        The list is order sensitive: the first matching rule will be applied to
        an item.

        An example:
             autopickup_exceptions += <curare-tipped dart
        Forces autopickup to grab all curare-tipped darts, even if
        missiles are not set in the "autopickup" option.

        Whitespace between <> and the match expression is significant,
        so the following won't work:
             autopickup_exceptions += <   box of beasts

        autopickup_exceptions replace the older ban_pickup. Using
             autopickup_exceptions += >uselessness, >inaccuracy
        is the same as using
             ban_pickup += uselessness, inaccuracy

        If the regexes are not prefixed with < or >, > is implied, so
        the option setting above can also be written as
             autopickup_exceptions += uselessness, inaccuracy

        You can use multiple autopickup_exceptions lines. Some examples:
             autopickup_exceptions += inaccuracy, immolation
             autopickup_exceptions += uselessness, noise, torment

        Unless you clear the list of exceptions, you won't need to set
        autopickup exceptions for potions except maybe for very special
        cases.

default_autopickup = true
        When set to false, the game starts with autopickup turned off.
        You can still toggle autopickup in-game with Ctrl-A.

pickup_thrown = true
        pickup_thrown = true causes autopickup to pick up thrown missiles,
        Be aware that autopickup uses a turn, though it won't trigger if
        there are hostile monsters in sight.

assign_item_slot = (forward | backward)
        When picking up items, the inventory slot into which the item
        goes is normally the first free slot from a-zA-Z (this is the
        default "forward" behaviour). Setting assign_item_slot to
        "backward" changes the slot assignment to the first letter after
        the last slot.
        For instance, if you have items on 'a' and 'c', then with
          assign_item_slot = forward, the next item will go into 'b',
          assign_item_slot = backward, the next item will go to 'd'
        instead.
        With "backward", items dropped/fired and picked up later are
        more likely to get their old slot back.

pickup_menu_limit = 1
        If there are more items than this on your square, a menu will be
        displayed when picking up multiple items instead of prompting for each
        item. If zero, never use the menu. If negative, use the value of
        item_stack_summary_minimum - 1, instead.

        Note that no matter the value of the option, picking up will always
        take one turn.

drop_filter += <regex>, <regex>, ...
        (List option)
        When selecting items using the global (de)select keys (',' or
        '-') in a multidrop menu, you can choose to select only items
        that match a search regex using this option.

        For instance, to quickly select items forbidden by your god, you could
        use:
             drop_filter += forbidden

        drop_filter will match against the same keywords menu_colour uses,
        except that it lacks identification status. It defaults to
        useless_item.

        When a drop_filter is set, using the select/deselect keys will
        set/clear selection of items that match the filter
        expression(s).

drop_disables_autopickup = false
        drop_disables_autopickup = true automatically removes dropped
        non-missile items from autopickup.

3-b     Passive Sightings (detected or remembered entities).
------------------------------------------------------------

detected_monster_colour = lightred
        Detected monsters will be given this colour.

detected_item_colour = green
        Detected items will be given this colour.

remembered_monster_colour = darkgrey
        The colour for monsters you have seen before.

3-c     Dungeon View Item and monster highlighting
-------------------------------------------------

These options allow controlling the way certain monsters and items are shown
in console dungeon view, by changing their colour or reversing fore- and
background. There are several highlighting choices (these will not work
everywhere; it depends on OS and terminal):
   none             -- disable highlighting for the category
   standout         -- often the same as reverse, might be underline or
                       dim
   bold             -- used by colour curses for brightening foreground
                       colours
   blink            -- used by colour curses for brightening background
                       colours
   reverse          -- this will probably work
   dim              -- probably no effect
   underline        -- this will probably work
   highlight:colour -- set background colour of highlighted monsters to
                       "colour"
The last can be abbreviated to hi:colour.
See part Windows (5-b) for dos_use_background_intensity.

Previously these options were named `..._brand`, and the old names are
available for backwards-compatibility.

friend_highlight = hi:green
        Highlight friends in some way. This is very helpful for summoners. The
        default setting shows friends with a green background. If the friend is
        itself green, it'll show up as black on green.

neutral_highlight = hi:lightgrey
        Highlight neutral monsters in some way. Useful both to get out of
        a neutral monster's path, and to avoid accidentally killing it.
        The default setting shows neutrals with a dark grey background. Since
        there are no darkgrey monster glyphs anymore, this works fine.

unusual_highlight = hi:magenta
        Highlight hostile monsters carrying unusual items. Useful to show if a
        monster should be handled with care because it has an atypical item,
        such as a wand or a distortion weapon.

        This is used in conjunction with the unusual_monster_items option:
        unusual_monster_items determines which items will cause a monster to be
        highlighted.

stab_highlight = hi:blue
        This option highlights monsters that are fully unaware of the player
        and therefore are will not attack, and are guaranteed to take stab
        damage if attacked appropriately by the player.

may_stab_highlight = hi:brown
        This option highlights monsters that are having trouble paying
        attention to the player by, for example, being confused or
        distracted. These monsters may be able to be stabbed, depending
        on Stealth and weapon skill levels and various other factors, and will
        (at least) have trouble attacking the player with their current status.

heap_highlight = reverse
        Highlights heaps of items (more than one item or stack).

feature_item_highlight = reverse
        Highlights features (stairs, shops, altars) that would otherwise be
        hidden by items. If you use this option, the item glyph(s) on the
        square are hidden by the feature symbol.

trap_item_highlight = reverse
        Highlights traps that would otherwise be hidden by items. If you
        use this option, the item glyph(s) on the square are hidden by the trap
        symbol (^).

3-d     Level Map Functions.
----------------------------

level_map_cursor_step = 7
        How many squares the cursor moves on the level map when using
        Shift-direction.

3-e     Viewport Display Options.
---------------------------------

The viewport is the portion of the map that is displayed during normal
play. The viewport is 33x17 by default, but if you use larger terminal
sizes, you can set these options to make the game show a larger
viewport.

None of these options affects gameplay. In particular, your character's
line-of-sight is unaffected by these options.

view_max_width = 33 (max 81)
        Sets the maximum width of the viewport (defaults to 33).
        Making this larger will allow Crawl to show a wider viewport
        on larger terminals. This is ignored in tiles, the viewport will
        always use all the available space.

view_max_height = 21 (max 71)
        Similar to view_max_width, but sets the viewport's maximum height.
        In tiles, this value is used to set when space starts to be affected
        to the message area instead of the viewport. When the message area
        reaches msg_max_height, the remaining space goes to the viewport.
        If for performance reason you need a smaller viewport, either reduce
        the window size, or increase the message area.

* Note that using large viewports can slow the game down.

view_lock_x = true
        Keeps the player character centred horizontally in the
        viewport, continuously scrolling the viewport to match the
        PC's movements. If this is not set, the player character can
        move horizontally within the viewport, and the viewport will
        scroll only when the character's line-of-sight reaches the
        left or right edge.

view_lock_y = true
        Keeps the character centred vertically in the viewport.

view_lock = true
        Aliased option that sets both view_lock_x and view_lock_y.

centre_on_scroll = false
        If this is set, the viewport centres on the player character
        whenever it scrolls (this option is irrelevant if view_lock_x
        and view_lock_y are set).

symmetric_scroll = true
        If this is set, the viewport will scroll in a manner consistent
        with the character movement that caused the scroll.

        To illustrate, let's say the PC is at the lower edge of the
        viewport, but is near the horizontal centre. Now the PC moves
        diagonally down and right, forcing the viewport to scroll up
        one line. If symmetric_scroll is set, the viewport will also
        scroll left one column to match the PC's diagonal movement. If
        symmetric_scroll is not set, the viewport will only scroll up,
        not horizontally. symmetric_scroll can be less disorienting
        than free scrolling.

        This option is not relevant if view_lock or centre_on_scroll
        are set.

scroll_margin_x = 2
        How far from the left or right edges scrolling starts. By
        default, if the PC's square of line-of-sight is closer than
        two squares from the edge, the viewport scrolls. If set at
        zero, the viewport scrolls only when the LOS circle reaches
        the viewport edge.

scroll_margin_y = 2
        How far from the top or bottom edges scrolling starts.

scroll_margin = 2
        An aliased option that sets both scroll_margin_x and
        scroll_margin_y.

always_show_exclusions = true
        If true, display travel exclusions and their exclusion radius in
        the viewport. Exclusions are always visible on the level map
        (access with X) regardless of the value of this option.
        Exclusions are also visible in terrain-only mode (access with |).
        This option has no effect in tiles builds, where exclusions are
        always shown both in the viewport and on the level map.

3-f     Travel and Exploration.
-------------------------------

travel_delay = 20 (defaults to -1 for online servers)
        How long travel waits after each move (milliseconds), and also
        how long auto-explore waits after each move unless explore_delay
        is set. Depends on platform. Setting to -1 will jump to end of
        travel - you will not see the individual moves.

explore_delay = -1
        How long auto-explore waits after each move (milliseconds). Depends on
        platform. In particular, setting travel_delay = -1 and
        explore_delay = 20 means you will see the individual moves of
        autoexplore, but not the individual moves of other forms of travel.
        Setting to -1 means the auto-explore delay will be the same as
        travel_delay.

rest_delay = 0 (defaults to -1 for online servers)
        How long resting waits after each move (milliseconds). Depends on
        platform. Setting rest_delay = -1 will prevent the display updating
        during resting.

travel_avoid_terrain = (shallow water | deep water)
        Prevent travel from routing through shallow water. By default,
        no terrain is avoided. For merfolk and/or characters with
        permanent flight,
             travel_avoid_terrain = shallow water, deep water
        will prevent travel or explore from going through any water.
        This option supports list syntax.

explore_greedy = true
        Greedy explore travels to items that are eligible for
        autopickup in addition to exploring the level, but is
        otherwise identical to regular explore. Explore greed is
        disabled if autopickup is off (Ctrl-A).

explore_greedy_visit = artefacts,glowing_items
explore_greedy_visit += stacks
        (List option)
        Greedy exploration will visit squares with items based on
        these conditions.

        stacks: makes explore_greedy visit all stacks even if they don't
        necessarily have target auto pickup items

        glowing_items: makes explore_greedy visit glowing_items,
        even if not in a stack

        artefacts: makes explore_greedy visit artefacts, even
        if not in a stack

explore_item_greed = 10
        Greedy exploration treats items as if they were this much closer (or
        further away, if negative) when deciding whether to visit a square with
        an item or explore a new square.

explore_stop  = items,stairs,shops,altars,portals,branches,runed_doors
explore_stop += greedy_pickup_smart,greedy_visited_item_stack
        (List option)
        Explore will stop for one of these conditions. Whatever you
        set this option to, anything that stops travel will also stop
        explore.

        The "branches" condition stops for branch entrances but not for
        other kinds of stairs or portals.

        NOTE: runrest_ignore_message has no effect on explore_stop.

        When using non-greedy explore, items causes explore to stop
        when any new item comes into view. When using greedy explore,
        the conditions act as follows:

        items: stop when items that aren't eligible for autopickup come
            into view.

        greedy_items: stop when items that are eligible for autopickup
            come into view.

        greedy_pickup: stop after you automatically pick up any item
            eligible for autopickup, excluding gold, but including
            items thrown/fired by the player. You can make certain items
            *not* trigger this with the option explore_stop_pickup_ignore

        greedy_pickup_gold: stop when automatically picking up gold during
            greedy explore.

        greedy_pickup_smart: Similar to greedy_pickup, but tries to be
            smart about it, meaning only stopping for items which aren't
            similar to any you already have in your inventory. It
            doesn't stop for automatically picking up items which were
            thrown/fired by the player; you can add "greedy_pickup_thrown"
            if you want to stop for those.

        greedy_pickup_thrown: Stops after you pick up any item you've
            thrown/fired. greedy_pickup automatically does this, but
            greedy_pickup_smart does not. explore_stop_pickup_ignore
            does not affect this condition.

        greedy_visited_item_stack: Stop when visiting a stack of items
            previously unknown to the player, even if the stack contains
            nothing eligible for autopickup.

        glowing_items: like items, but only for items which are
            glowing/runed/embroidered/etc.

        artefacts: like items, but only for artefacts.

        runes: like items, but only for runes.

explore_stop_pickup_ignore += <regex>, <regex>, ...
        (List option)
        If explore_stop has greedy_pickup or greedy_pickup_smart set,
        then picking up any items matching any of the regexes in the list
        will *not* stop auto-explore.

        This option has no effect on items which were thrown by the player.

explore_wall_bias = 0
        Adjusts how much autoexplore favours attempting to discover room
        perimeters and corners. At higher values, autoexplore will more
        heavily favour visiting squares that are next to walls; at 0 it
        will not favour them at all. At negative values it will prefer
        to stay away from walls. Note that setting this to a non-0 value
        generally makes it slower to completely explore a level.

travel_key_stop = true
        If set to true then travel will stop at any keypress.

travel_one_unsafe_move = false
        If set to true then travel will make one move before conducting safety
        checks for nearby danger.

tc_reachable      = blue
tc_dangerous      = cyan
tc_disconnected   = darkgrey
tc_excluded       = lightmagenta
tc_exclude_circle = red
tc_forbidden      = lightcyan
        The above six settle the colouring of the level map ('X').
        They are
          reachable: all squares safely reachable (without leaving the
                     level)
          dangerous: squares which are only connected to you via traps,
                     etc.
          disconnected: squares which cannot be reached without leaving
                        the level
          excluded: the colour for the centre of travel exclusions ('e')
          excluded_circle: the colour for travel exclusions apart from
                           centre
          forbidden: squares which cannot be reached without crossing excluded
                     squares.

runrest_ignore_message ^= <regex>, <regex>, ...
runrest_stop_message ^= <regex>, <regex>, ...
        (List option)
        Use these to force messages to interrupt travel and resting, or not.
        These are matched against full message text. To limit a substring
        match to a message channel, prefix the substring with the channel name
        and a colon (see section 3-k below on Message Channels). For instance,
        if you want travel to stop when you're hit by divine retribution, you
        could use:
             runrest_stop_message ^= god:wrath finds you

        Or to remind yourself to renew expiring spells:
             runrest_stop_message ^= Your transformation is almost over
             runrest_stop_message ^= You are starting to lose your buoyancy

        Or you can explicitly ignore some messages:
             runrest_ignore_message ^= pleased with you,exalted

        Note that monster talk and dungeon noises already do not interrupt
        running or resting, by default.

        Multiple lines can be used. The earliest match among both ignore and
        stop messages overrides later lines. The file runrest_messages.txt
        contains a number of default settings. These options accept `^=` to
        prepend and `+=` to add; the former is necessary in order to override
        defaults, including overriding defaults for `ignore` matches with
        `stop` matches and vice versa.

        Resetting either option has the effect of resetting both.

        Note also that runrest_ignore_message has no effect on what
        explore_stop stops for.

interrupt_<delay> += <activity_interrupt_type>, <activity_interrupt_type>, ...
        (List option)
        Use this option to not interrupt a delayed action on a certain trigger.
        For example, use
            interrupt_travel -= sense_monster
        to not interrupt autotravel when a monster is sensed but not seen.

        Possible delay types are: armour_on, armour_off, ascending_stairs,
        descending_stairs, drop_item, exsanguinate, jewellery_on, macro,
        macro_process_key, memorise, multidrop, passwall, rest, revivify,
        run, shaft_self, travel. (These are derived from the `name()`
        functions in delay.h.)

        Possible interrupt types are: abyss_exit_spawned, ally_attacked,
        ancestor_hp, force, full_hp, full_mp, hp_loss, hit_monster, keypress,
        message, mimic, monster, monster_attack, stat, sense_monster, teleport.
        (These are derived from the `activity_interrupt_names` array in
        delay.cc.)


delay_safe_poison = <% of hp>:<% of mhp>
        Poison damage will be ignored if it is projected to drop your hp
        by less than x% of your current hp and less than y% of your max
        hp if you have defined delay_safe_poison = x:y. This applies to all
        delays. Only one delay_safe_poison line is considered. Note that for
        this to work with running and resting, Crawl needs to know to ignore
        the "You feel sick" messages as well as the damage. For example,
             runrest_ignore_message ^= You feel.*sick
             delay_safe_poison = 80:100
        are the defaults.

runrest_ignore_monster ^= <regex>:<distance>, <regex>:<distance>, ...
        (Ordered list option)
        Any monster matching the regular expression will only interrupt your
        activity if the distance between you and the monster is less than the
        specified number. E.g. with
             runrest_ignore_monster ^= bat:3
        bats, vampire bats, fire bats, and battlespheres will be considered
        safe for travel, explore and resting as long as the distance is at
        least 3. If a monster matches multiple expressions, its distance is
        compared with the first match.

rest_wait_both = false
        If rest_wait_both is set to true then resting will only stop
        when both HP and MP are fully restored, not when either one of
        them is restored.

rest_wait_ancestor = false
        If rest_wait_ancestor is set to true then resting will only stop when
        the ancestor's health is fully restored in addition to player HP or MP
        (or both, if rest_wait_both is set).

rest_wait_percent = 100
        When resting, if your HP or MP is below this percentage of being full,
        it will stop resting when this percent of maximum HP or MP is refilled.
        Resting after this point will still rest up to 100%.

explore_auto_rest = true
        If true, auto-explore waits until your HP and MP are both at
        rest_wait_percent before moving.

auto_exclude += <monster name>, <monster name>, ...
        (List option)
        Whenever you encounter a sleeping or stationary monster during
        exploration that is included in this list, a travel exclusion is
        automatically set centred on this monster, meaning autoexplore won't
        ever bring you into its line of sight. If the monster dies or wakes up
        while you are in sight, this exclusion is automatically removed again.

travel_open_doors = (avoid | approach | open)
        Configure how autoexplore/travel interacts with doors.
           avoid = Autoexplore/travel will treat closed doors like walls. If
                   the only way for exploration or travel to continue is through
                   a closed door, it will stop by a closed door.
        approach = Autoexplore/travel will not open doors, instead stopping
                   in front of any door in its path.
            open = Autoexplore/travel will open doors. (default)
        This does not affect runed doors, which are always avoided.

3-g     Command Enhancements.
-----------------------------

auto_switch = false
        This option will allow you to automatically switch to an appropriate
        weapon when attacking in melee, as long as the one you are wielding
        and the one you switch to are both in slot 'a' or 'b'. An "appropriate"
        weapon is one that is intended for melee, not inscribed with a
        non-attack inscription (`!a`), and not hated by the player's god.

easy_unequip = true
        Allows auto removal of armour and jewellery when dropping it.

equip_unequip = false
        If this is true, selecting an already-equipped piece of equipment via
        the 'w', 'W' or 'P' menus (for weapons, armour or jewellery
        respectively) will unequip that item.

jewellery_prompt = false
        If this is true, equipping rings will always prompt for the slot to
        use, instead of automatically equipping the ring if there is an
        available empty slot. Unequipping jewellery will also always prompt for
        an item to remove, instead of skipping the prompt if only one item
        of jewellery is equipped.

easy_confirm = (none | safe | all)
        Make confirmation questions easier to answer:
           none = force capitals on Y/N questions and stat increases
           safe = force only on dangerous questions and stat increases (default)
            all = never force capitals
        WARNING TO PUTTY USERS: If your Putty configuration sets the
        numeric keypad to "NetHack mode", the keypad '7' will be mapped
        to the letter 'y', which can result in accidentally answering
        yes to questions.

simple_targeting = false
        If set to true, disables smart targeting for explosion and bouncing
        bolt spells, making them automatically target the closest monster in
        range rather than trying to find a spot that affects multiple monsters
        while avoiding the player. This applies to target selection when
        zapping as well as autotarget selection for quivered spells.

force_spell_targeter = hailstorm, starburst, frozen ramparts, ignition,
                       eringya's noxious bog, cause fear, alistair's
                       intoxication, discord, dispersal, metabolic englaciation,
                       dazzling flash, flame wave, anguish, plasma beam
        Force showing a targeter for the listed spells when casting normally,
        even if the spell isn't targeted. This for practical purposes only has
        an effect on statically targeted spells, such as the ones in the
        default value; it is particularly useful for spells with an unusual
        targeting pattern. If "all" appears in the options list, the rest of
        the list (however constructed) will be ignored, and targeters will
        be shown with every spell.

force_ability_targeter = sanctuary, cleansing flame, word of chaos, recite,
                         elemental force, oozemancy, breathe lightning, torment,
                         drain life, slouch, disaster area, apocalypse,
                         corrupt, foxfire swarm
        Force showing a targeter for the listed abilities when activating them
        normally, even if the ability isn't targeted. This for practical
        purposes only has an effect on statically targeted abilities, such as
        the ones in the default value; it is particularly useful for abilities
        with an unusual targeting pattern. If "all" appears in the options list,
        the rest of the list (however constructed) will be ignored, and
        targeters will be shown with every ability.

allow_self_target = prompt
        Allow targeting yourself with risky magic (e.g., the spell Stone Arrow
        or a wand of paralysis.) Values: (yes | no | prompt).
        When set to 'yes', you are a valid target. When set to 'no', you cannot
        target yourself with such spells. When set to 'prompt' (the default),
        you will be required to confirm self-targeting. This option has no
        effect on area-effect spells, such as Mephitic Cloud, where you are
        always a valid target.

prompt_menu = true (tiles default), false (console default)
        Always show prompt menus as popups if possible, rather than in the
        message pane. This currently applies to Y/N prompts, and to the `G`o
        menu.

ability_menu = true
        Always show the full-screen 'a'bility menu. If false, 'a' prompts
        in the message area, and the menu can be seen with '?' or '*'.

spell_menu = false
        If set to true, the full-screen spell selection menu will always be
        shown when using 'z'. If false, 'z' prompts in the message area, and
        the menu can be seen with '?' or '*'.

easy_floor_use = true
        If set to true, item interaction menus that allow using items from the
        ground will respond to switching from inventory items to floor items by
        pressing ',' whenever there is only one floor item, by selecting that
        item rather than toggling the menu. For example, 'r,' will read the
        scroll on the ground, if there is only one. This will work even if
        there are no matching items in your inventory.

sort_menus = [menu:](true | false | auto:X)[:sort_order]
        Controls if and how items are sorted in inventory and pickup
        menus.

        When sort_menus = false (the default), items are not sorted, and
        will be ordered by inventory letter (or in the order they're
        stacked for items on the floor).

        When sort_menus = true, items are sorted according to the specified
        sort_order, with the default being:
             equipped, basename, qualname, curse, qty

        If sort_menus = auto:X, items are sorted if there are at least
        X items in the same category. For instance:
             sort_menus = auto:5
        will sort item classes that have at least 5 items. For instance,
        having 4 kinds of potions would not sort them, but having 5
        would.

        You can explicitly specify sort criteria in the sort_menus
        option as:
             sort_menus = true : art, basename, qualname, curse, qty

        Two items will be compared based on the first sort criteria
        where they differ. So with the sort_menus line given above,
        if only one of two different items is a known artefact, it will be
        listed first, else (if both or neither are artefacts) if their
        basenames are different they will be alphabetically compared using
        their basenames; if the basenames are the same but the qualified
        names are different it will compare their qualified names, and so
        on.

        The available sort criteria are:

        * basename:
          This is the name of the item type. The basename for all of
          "a +0 robe", "an embroidered robe" and "the cursed +2 robe of
          Ponies" is just "robe". The basename for both of "a brass
          ring" and "a ring of fire resistance" are "ring".

        * qualname:
          The name of the item without articles (a/an/the), quantities,
          enchantments, or curse-status. The qualified names for the
          robes described above are "robe", "embroidered robe" and "robe
          of Ponies", respectively. The qualified names for the rings
          described above are "brass ring" and "ring of fire
          resistance", respectively.

        * fullname:
          This is the name of the item as displayed in menus (including
          (quantities, curse-status, etc.)

        * dbname:
          Sorts based on an item's unique internal name which is linked
          to its description. Items with the same description will be
          grouped together.

        * curse:
          Curse-status of the item (if known). Uncursed items show up
          first.

        * equipped:
          Equipped items show up first.

        * art:
          Identified artefacts show up first.

        * ego:
          Identified ego items show up first.

        * glowing:
          Unidentified glowing/shiny/runed/etc items show up first.

        * identified:
          Identified items show up before unidentified ones of the
          same type. An item is regarded as identified once you know
          its subtype or ego.

        * qty:
          The quantity for stackable items (such as scrolls, potions,
          etc.)

        * slot:
          The inventory letter for items in inventory; irrelevant for
          items on the floor.

        * charged:
          Makes wands known or assumed to have some charges left appear
          before wands known to be empty; irrelevant for all other item
          types.

        You can ask for a descending order sort by prefixing one or more
        sort criteria with > as:
             sort_menus = true : basename, >qty

        You can also request sorting only for specific menus:
             sort_menus = pickup: true
        or
             sort_menus = inv: true
        (Menu types must be specified as name:, with no space between
        name and colon.)

        By default only pickup menus are sorted, and the sort criteria are:
             "equipped, basename, qualname, curse, qty".
        All other menus (drop, inv) will be sorted by inventory letter.

        The menu selectors available are:

        pickup: All pickup menus, stash-search menus, etc. for items not
                in your inventory.
        drop:   The item drop menu.
        inv:    Inventory listings for any command (but not for dropping
                items).
        any:    All menus; this is the default when unspecified.

        For example,
             sort_menus = true : equipped, basename, qualname, curse, qty
        will produce the same inventory and drop menus as by default,
        with the exception that all worn/wielded items come first. This
        can be convenient if you use the '.' command to select
        subsequent items.
        If you define sort_menus differently for two or more selectors,
        the last one matching will always take precedence, i.e. "any"
        as last setting would override any of the others.

spell_slot ^= <regex>:<list of spell letters>
        (Ordered list option, one value per line)
        When you memorise any spell that matches the regex, it will assign
        itself to the first available letter in the list. A + in the list of
        letters turns on "overwrite mode": all letters up to the next "-" are
        considered available even if already assigned; in that case, any
        spell already assigned to that slot, as long as it does not also
        match the same <regex>, will be moved.

        If all letters in the list are occupied for each regex the spell
        matches, it will use the default ordering abc...xyzABC..XYZ. If a
        spell matches multiple regexes, only the first is considered.

        Examples:
        * if you want Apportation to be placed on A:
            spell_slot ^= Apportation:A
        * if you want Ozocubu's Armour to be placed on r normally or R if
          r is unavailable:
            spell_slot ^= Ozocubu's Armour:rR
        * if you want the first "Bolt" spell to be placed on a, even if
          there is already a non-bolt spell there:
            spell_slot ^= Bolt:+a
        * if you want to change the default spell slot assignment
          to use capital letters: (place this after all other
          spell_slot lines):
            spell_slot += .*:ABCDEFGHIJKLMNOPQRSTUVWXYZ

item_slot ^= <regex>:<inventory letters>
        (Ordered list option, one value per line)
        Uses the same interface as spell_slot, except that overwrite mode
        is on by default; overwrite mode can be disabled with a - in the
        list of letters.

        Additionally, the item_slot option is applied on an item when it is
        identified, so it can be moved to the right place even if it was
        picked up unidentified.

ability_slot ^= <regex>:<ability letters>
        (Ordered list option, one value per line)
        Uses the same interface as spell_slot, but applies to abilities
        in the 'a' menu.

autofight_stop = 50
        Autofight will not act if your HP is at or lower than this
        percentage of your max HP. Disabled when set to 0. This setting applies
        both to autofight and to autofire.

autofight_warning = 0
        Enforce a minimum time (in milliseconds) between autofight commands.
        If you issue two consecutive autofight commands within this amount
        of time (for example, by holding down the tab key), the subsequent
        commands will be ignored, and the message "You should not fight
        recklessly!" printed to the danger channel. Any value less than
        or equal to zero disables this check.

autofight_fires = false
        If your quiver contains contains a fireable action that does direct
        damage to the enemy, regular CMD_AUTOFIGHT (tab on the default
        binding) will trigger it at enemies out of melee range. Without this
        option, only a wielded launcher (a bow, crossbow or sling) will be
        triggered by CMD_AUTOFIGHT. If an action that does direct damage is
        quivered but out of range, you will move towards the enemy. If an
        action is quivered that does not do direct damage, CMD_AUTOFIGHT will
        ignore it entirely. To prevent moving altogether, rebind with
        CMD_AUTOFIGHT_NOMOVE instead of CMD_AUTOFIGHT. (Legacy name:
        `autofight_throw`.)

autofight_nomove_fires = true
        This option modifies the behavior of CMD_AUTOFIGHT_NOMOVE (unbound by
        default) in a similar way to how `autofight_fires`, above, modifies
        CMD_AUTOFIGHT. (Legacy name: `autofight_throw_nomove`.)

autofight_fire_stop = false
        When firing missiles or throwing objects using autofight, if this
        option is true, shots will stop at the target (like "f.") rather than
        continuing past. Note that this setting may be decidedly suboptimal
        for missiles of penetration.

autofight_caught = false
        If true, autofight will attempt to escape webs or nets that are
        holding you, even if no enemies are in view.

autofight_wait = false
        If true, ===hit_closest_nomove while not in range of an enemy will
        wait for a turn instead of aborting autofight.

autofight_prompt_range = true
        When wielding a weapon that would normally cause a prompt on attacking
        (such as a weapon with a !a inscription, or one disliked by your god),
        if this option is true then the prompt will be displayed when autofight
        tries to walk towards an enemy, instead of only when actually trying
        to attack.

automagic_enable = false
        Option to enable the old automagic system; new players are recommended
        to just use quivered spells. If true, autofight (i.e. tab on the
        default bindings) will cast a spell in a designated slot at a target.
        Initial spell slot is a. (deprecated)

automagic_slot = a
        Setting this changes the initial spell slot for the old automagic
        system. Can be changed for games in progress in-game by setting a macro
        to call ===am_set_spell.

automagic_fight = false
        With the old automagic system enabled, setting this to true causes
        a fallback to regular autofight (e.g. melee) when trying to cast a
        spell that you either do not have enough magic points for, or are below
        the set threshold. If false, a message will appear and no further
        action is taken.

automagic_stop = 0
        Similar to autofight_stop, if magic points are below this number
        (percentage of total), casting via autofight/autofire is prevented.
        Disabled when set to 0.

fail_severity_to_confirm = 3
        Ask for confirmation when attempting to cast a spell where a miscast
        would cause severe penalties. Prompt if the miscast severity of the
        spell (the colour shown in the spellcasting menu) is greater than
        or equal to the number specified:

          5: magenta (miscasting may deal greater damage than max HP)
          4: dark red (up to 70% damage)
          3: light red (up to 50% damage)
          2: yellow (up to 30% damage)
          1: white (up to 10% damage)

        If the value 0 or -1 is given, never prompt about miscasts.

easy_door = true
        When (O)pening or (C)losing doors, do not prompt for a direction
        if there is only one adjacent door. This option does not affect
        opening doors by walking into them.

warn_hatches = false
        Ask for confirmation before using a one-way escape hatch or shaft.

enable_recast_spell = true
        If enabled, allows recasting the previously cast spell by pressing
        Enter or '.' at the spellcasting prompt.

confirm_action += <regex>, <regex>, ...
        (List option)
        Casting a spell or ability with a name matching any of the given regular
        expressions will prompt before use.

regex_search = false
        If enabled, searching for items with ^F uses regular expression syntax
        by default, instead of substring searching. Note that regardless of
        this setting, queries prefixed with / will be performed as a regular
        expression search and queries prefixed with = will be performed as a
        substring search.

autopickup_search = false
        If enabled, items are annotated with {autopickup} while searching
        with ^F if they would be picked up by autopickup. This means that
        searching for "autopickup" will list all such items. Note that this
        option may slow down your game if you have a complicated custom
        autopickup function.

bad_item_prompt = true
        Ask for confirmation before using bad or dangerous scrolls and potions.

auto_hide_spells = false
        When set to true, spells added to the library will automatically be
        hidden.

menu_arrow_control = true
        If set to false, disable using arrow keys to control menu selection.
        This has no effect on mouse interactions with menus, and only affects
        menus that use hotkeys for selection. (E.g. the main menu for local
        play is not affected.)

single_column_item_menus = true
        If set to false, certain item menus will list items in two columns,
        as long as the menu is too long to fit in the current screen. If set
        to true, all menus will use a single column under any circumstances.
        This option is only available on local tiles and console; on WebTiles
        all menus are single-column regardless of the value of this option.

3-h     Message and Display Enhancements.
------------------------------------------

hp_warning = 10
        hp_warning gives "* * * LOW HITPOINT WARNING * * *" on the
        danger channel when the player takes damage and their hitpoints
        are less than this percentage of their maximum (use 0 to turn
        off these messages).

mp_warning = 0
        mp_warning gives "* * * LOW MAGIC WARNING * * *" on the danger
        channel when the player's magic points drop below this
        percentage of their maximum (use 0 to turn off these messages).

hp_colour = 70:yellow, 40:red
        (List option)
        hp_colour colours your Health appropriately in the status
        display. In the default setting, your health will appear in
        red if at less than 25%, yellow if at less than 50%, and in
        the default colour otherwise.

mp_colour = 50:yellow, 25:red
        (List option)
        mp_colour does to Magic what hp_colour does to Health.

stat_colour = 1:lightred, 3:red
        (List option)
        stat_colour colours your stats if they drop below a given value,
        in the order of their definition. This check takes place before
        the ones for e.g. Might or degeneration.
        For normal grey colouring, set it to
           stat_colour -= 3:red

status_caption_colour = brown
        Sets the colour that is used to display the captions in the status
        area (for instance the "Health:" in "Health: 10/10").

enemy_hp_colour = green green brown brown magenta red
        Colours enemy health appropriately in the monster pane. The
        colourings correspond to full health, lightly wounded, moderately
        wounded, heavily wounded, severely wounded, and almost dead. In
        addition to colour names, "default" can be used in this list, and
        omitted colour slots will be set to the default.

clear_messages = false
        Setting this option to true will cause messages to cleared
        between player actions (default is false which will delay the
        clearing of messages until the message space is full).

show_more = false
        Setting this option to true will cause the game to prompt if more
        than a window-full of messages are output at once. This option
        has no effect if clear_messages is set. Additionally, it has no
        effect on whether force_more_message triggers.

small_more = false
        With small_more = false (default), the --more-- prompt is on a
        separate line at the bottom of the message window. With
        small_more = true, it is just the bottom left character.
        Note: This will overwrite the first letter of the last message
              line if clear_messages is set.

show_newturn_mark = true
        When set to false, this option disables the underscore (_) displayed in
        front of the first line of a turn.

show_game_time = true
        By default, the counter in the stat area displays elapsed game time.
        Most actions take one unit of time, but some are quicker (putting on a
        ring, wielding a weapon, ...) and others are slower (swinging a weapon
        with low skill, changing armour, ...).
        When set to false, the counter will display player turns instead, which
        is the number of actions taken regardless of their duration. It is this
        turn count which is used for scoring (and this turn count is always
        visible on the % overview screen).
        The duration of the last action is displayed in parenthesis, after the
        time/player turns display.

equip_bar = false
        When set to true, this option replaces the noise bar with an
        "equipment bar" showing the glyphs of all currently equipped items,
        with gaps for available but currently unfilled equipment slots.

animate_equip_bar = false
        When set to true, any items displayed in the equipment bar that have a
        variable colour will be animated.

item_stack_summary_minimum = 4
        If you step over a stack with this number or more of items in
        it, the first description line will contain a summary of all the
        items in the stack (up to 50 items), in a format which looks
        like this:
          Items here: !! """ ( )))))) [[[
        Non-random artefacts and evokers will be coloured in lightcyan; random
        artefacts will be in yellow; glowing or runed items will be in white,
        unless you already know that they are not ego items.

mlist_min_height = 4
        If there is extra space available for the message area and
        monster list, the monster list will expand to this height
        before letting the message area get more.
        (Note that the monster list is only available for ASCII.)

mlist_allow_alternative_layout = false
        Display the monster list wherever Crawl may find space on
        your console display, usually to the left of the map, rather
        than using the fixed position below the stat area.
        This option is not supported in the tiles build.

monster_item_view_coordinates = false
        Display player-centred coordinates in the ^x view description.

monster_item_view_features += <regex>, <regex>
        (List option)
        Display features matching the <regex> in the ^x view description. Each
        <regex> is a regular expression describing a dungeon feature. This
        regex should match the description when using the 'x' command. In case
        the regex matches several descriptions, all such features are listed.

        Two special keywords are active here, if any pattern matches the string
        "stair" all features that can be interacted with using the stair
        commands are shown; if any pattern matches "trap" all trap features
        (including webs) are shown.

msg_min_height = 7
        You can reduce this to give more space to the map display. The
        minimum value is 5. In console, if this value is large enough
        that the map won't fit, crawl will not start.

msg_max_height = 10
        In console, if there is extra space available after the monster list
        has expanded, the message area will expand up to this height.
        The monster list will get the rest.
        In tiles, control the maximum size of the message area. The viewport
        will get the rest.

msg_webtiles_height = -1
        This will set the height of the messages pane in (only) WebTiles,
        scaling the map accordingly. Values less than `msg_min_height` will
        have no impact; in this case the height of the message pane is
        inherited from console (and so will typically be 7). One of these
        lines may be reserved for `more` messages depending on other
        settings.

messages_at_top = false
        Put the message window at the top of the screen. This moves
        the last message close to the centre of the view when not
        using clear_messages=true.

msg_condense_repeats = true
        If the same message is repeated multiple times during the same
        turn, then it will be output in a condensed format indicating
        how many times it was repeated. If the same output (including the
        counter) is repeated over several turns, the Show Previous Message
        command (Ctrl-P) will likewise condense them into one. For example:
            The killer bee misses you. x5

msg_condense_short = true
        If set, short messages on the same channel don't all start a new
        line.

show_travel_trail = false (defaults to true for online servers)
        When set to true, the path taken during autoexplore or travel
        will be highlighted. The console colour and glyph of the travel trail
        can be further configured using the feature option to override the
        "travel trail" feature. If a travel trail is currently being displayed,
        the Clear Map command (Ctrl-C) clears the trail instead of the map
        (pressing it a second time then clears the map as usual).

skill_focus = true
        When set to true, skills cycle between disabled, enabled and focus in
        the skill screen. When set to false, they only toggle between enabled
        and disabled. Setting the option to "toggle" adds a toggle to the skill
        screen to change the behaviour in-game.

default_show_all_skills = false
        When set to true, the skill (m) menu defaults to showing all skills,
        even untrained and untrainable ones. As usual, '*' toggles back to
        trainable mode. This option does not affect hints and tutorial games.

monster_list_colour = friendly:green, neutral:brown, good_neutral:brown
monster_list_colour += trivial:darkgrey, easy:lightgrey, tough:yellow,
                       nasty:lightred, unusual:lightmagenta
        (List option)
        Change the colours used to display monster names in the monster list.
        Valid keys, and their initial colours, are:

           Monster attitudes:
             friendly       - green
             neutral        - brown ("indifferent")
             good_neutral   - brown ("peaceful")

           Threat levels for hostile monsters:
             trivial        - darkgrey
             easy           - lightgrey
             tough          - yellow
             nasty          - lightred
             unusual        - lightmagenta

        If a category is unset or has a missing colour, its colour defaults to
        lightgrey. For removal with `-=`, the category name can be used alone,
        and will clear any mapping for that category (setting it to lightgrey).

view_delay = 600
        Controls the speed of animations from, e.g., ranged and magical
        attacks and invocations with visual effects.

reduce_animations = false
        If set to true, simplify some animations so that incremental steps are
        not drawn. For example, for casting a beam spell or firing a ranged
        weapon, only the final beam path is shown. Defaults to `true` for
        webtiles games.

use_animations = beam, range, hp, monster_in_sight, pickup, monster, player
use_animations += branch_entry
        Controls whether or not to run special animations, such as when being
        banished. All animations are enabled by default, and the categories
        that can be enabled/disabled independently are:

          beam             - Animation for casting a beam spell or firing a
                             ranged weapon.
          range            - Flashes the screen with an overlay indicating the
                             actual range of an attempted spell, if there are
                             no monsters within the spell's range.
          hp               - Flashes the screen red whenever you take damage
                             below the level indicated by the hp_warning
                             option.
          monster_in_sight - When attempting to rest, run, travel, or explore
                             with dangerous monsters in view, flashes the parts
                             of the screen where monsters aren't, in order to
                             help make the monsters themselves more visible.
          pickup           - Various animations that occur when picking up
                             items. Currently only runes and the orb have
                             animations.
          monster          - Animations that run when a monster uses an ability
                             or casts a spell.
          player           - Animations that run when the player uses an
                             ability or casts a spell.
          branch_entry     - Animations that run when you enter a new branch.
                             Currently only the Abyss and Zot have animations.

unusual_monster_items += <regex>, <regex>, ...
        (List option)
        Monsters whose inventory items match a regex in this comma-separated
        list will display with unusual threat level. E.g.
            unusual_monster_items =  wand
            unusual_monster_items += disto,chaos
            unusual_monster_items += curare,atropa,datura,dispersal
            unusual_monster_items += throwing net
        The item descriptions matched against are the short item names that
        ordinarily display when a monster is examined with 'xv'.

        This option determines which monsters will be regarded as "unusual" for
        the options tile_show_threat_levels (tiles only), monster_list_colour,
        and unusual_highlight (console only).

darken_beyond_range = true
        If set to true, everything beyond range when targeting will be
        coloured grey. Setting this to false will also disable the "range"
        category of the use_animations option.

show_blood = true
        Setting this option to false will hide blood splatters in the floor
        and on the walls. In tiles, corpses will be displayed as skeletons.

food_snacking_frequency = 40
        Controls the frequency of producing flavour messages when walking on a
        cache of fruit, meat, or baked goods, with the number corresponding to a
        percent chance. As one would expect, 100% means always, 0% means never,
        and the default 40% means two-fifths of the time. Unless the frequency
        is set to 100%, the chance is lowered to a fourth if there are hostile
        enemies in sight in most situations.

fountain_line_frequency = 40
        Controls the frequency of producing flavour messages when walking on
        any type of fountain, with the number corresponding to a percent
        chance. As with the previous option, 100% means always, 0% means
        never, the default 40% means two-fifths of the time, and a non-100%
        frequency has lowered chances if hostile enemies are in sight.

force_more_message += <regex>, <regex>
        (List option)
        Any message that contains a regex specified here will enforce a
        --More-- prompt, so it can be used to highlight really important
        events. This option ignores the show_more option. This option will
        not interrupt travel delays by default; use runrest_stop_message
        for that instead. The syntax is identical to that of
        runrest_ignore_message (3-f).

flash_screen_message += <regex>, <regex>
        (List option)
        Any message that contains a regex specified here will flash the
        screen yellow, so it can be used to highlight very important events
        indeed.
        The syntax is identical to that of force_more_message.

cloud_status = true
        Whether to show the "Cloud" status light; defaults to true, except if
        playing with tiles, where you can see the cloud on top of you, where it
        defaults to false.

always_show_zot = false
        Whether to show the "Zot" status light at all times, even when you've
        got plenty of time left.

always_show_gems = false
        Whether to show the "Gem" status light, indicating how long until the
        gem in the current branch shatters (if applicable).

more_gem_info = false
        Whether to show held gem time limits and sfx for shattering.

action_panel_show = true
        Whether to show or hide the action panel. This option is automatically
        saved between games, and is only available on Webtiles.

action_panel = /?!}
        The above is the default list of items to show on the action panel.
        The valid symbols are
        ?       Scrolls
        !       Potions
        }       Misc. items
        /       Wands
        If set to an empty string, the panel will be hidden entirely. The order
        of item types in this option determines the order of item types in the
        action panel; sub-order is determined by inventory letter. This option
        is only available on Webtiles.

action_panel_filter += <regex>, <regex>, ...
        (List option)
        Any item matching the filter expression(s) will not be shown on the
        action panel. This option is only available on Webtiles.
        The file dat/defaults/misc.txt contains default settings.

action_panel_show_unidentified = false
        When set to true, the action panel will show unidentified scrolls
        and potions. This option is only available on Webtiles.

action_panel_scale = 100 (persistent)
        A percentage scale factor to apply to the action panel. This option is
        automatically saved between games, and only available on Webtiles.

action_panel_orientation = horizontal (persistent)
        (values: horizontal | vertical)
        When set to 'horizontal', the action panel will be placed along the top
        edge of the screen. When set to 'vertical', the panel will be placed
        along the left edge. This option is automatically saved between games,
        and is only available on Webtiles.

action_panel_font_family = monospace (persistent)
action_panel_font_size = 16 (persistent)
        Font used for displaying quantities of items in the action panel.
        The size option is automatically saved between games, and both are only
        available on Webtiles.

action_panel_glyphs = false
        If set to true, show glyphs instead of tiles in the action panel. This
        option is only available on webtiles.

3-i     Colours (messages and menus)
-----------------

menu_colour ^= <match>:<colour>:<regex>, <colour>:<regex>, ...
        (Ordered list option)
        For menus and other screens that print items (and a few other cases; see
        list below) this option allows you to control the colour that is used to
        display a line by using a regular expression. For example, the default
        options use the following line:
            menu_colour += lightmagenta:.*orb.*Zot
        to highlight the orb of Zot as purple in the item pickup menu. For
        items, the regular expression is also checked against various item
        annotations as described below. For example, the following line:
            menu_colour += yellow:.*emergency_item.*
        causes items that get the `emergency_item` annotation (such as scrolls
        of teleportation) to be highlighted in yellow in inventory and other
        item menus.

        There can be several statements in a list, and also several menu_colour
        lines. When using several menu_colour lines, the colour of the _first_
        matching regex is applied; the option supports `^=`, which is useful
        for overriding default settings without building the list from scratch.
        For a list of colours, check the colour option in 5-a.

        The `match` part specifies which listings are affected by the
        colouring. If you specify 'item', or completely skip the <match>:
        part, then the pattern will apply to all item-related categories.
        Possible item-related values for match are:
            inventory     (inventory and pickup/drop menus)
            pickup        (pickup menus, and items on the floor)
            equip         (the [ and " screens)
            use_item      (equip, unequip, read, quaff, etc)
            shop          (shop menus)
            stash         (the results from Ctrl-F)
            description   (the \ screen)
            stats         (wielded/quivered items on the main screen stats
                           panel)
            resists       (items on the % screen)

        Possible non-item-related values are as follows; these require an
        explicit `match`:
            help          (the manual)
            notes         (the ?: screen)

        Items are annotated with many useful tags that make controlling colour
        easier. Items are annotated with their base type (armour, weapon, wand,
        etc.) They are also annotated with certain tags indicating usefulness:
            forbidden       (Your god would hate it if you used this item.)
            emergency_item  (This item is invaluable in emergencies.)
            good_item       (This item is generally a good item.)
            dangerous_item  (Using this item can be dangerous.)
            bad_item        (This item is generally a bad item.)
            useless_item    (This item is of no use to you.)

        as well as a range of other properties:
            equipped        (Equipped items.)
            ego             (Items with an offensive/defensive magical brand.)
            artefact        (For artefacts, whether identified or not.)
            unrand          (For non-random artefacts.)
            melee           (Melee weapons, including magical staves.)
            ranged          (Ranged weapons.)
            evoker          (Elemental evokers.)
            identified      (The item is fully identified.)
            known           (You recognize the item's subtype.)
            unidentified    (You don't recognize the item's subtype.)
            god gift        (an item gifted to you by a god.)
            cursed          (Cursed by Ashenzari.)

        (Of course, some of these will only apply to some menus inherently: only
        carried items can be equipped, only non-carried items can be
        unidentified, etc.)

        When looking for menu_colour matches, these prefixes are treated as if
        they are prepended to the actual item name, for example:
            identified evil_item forbidden misc a piece from Xom's
            chessboard (15/15)

        The same prefixes can also be used for highlighting prompts pertaining
        to items matching the description, or to define autopickup_exceptions.

        For more examples, see the default settings in
        `dat/defaults/menu_colours.txt`.

        menu_colour can also be used to colour in-game morgue notes (readable
        in colour with `?:`), by using the `notes` match. For example, the
        following line will show level-ups in green:
            menu_colour ^= notes:green:Reached XP level

message_colour ^= <colour>:<channel>:<regex>, <colour>:<regex>, ...
        (Ordered list option)
        message_colour allows you to override colours for individual
        messages. For instance, if you find the low hp warning to be
        insufficiently attention grabbing, you could do something like
             message_colour += yellow:LOW HITPOINT WARNING
        You can also narrow the message match to a specific channel:
             message_colour += lightred:god:xom
        If you don't want to see a message at all, you can mute it:
             message_colour += mute:You start resting

3-j     Quivers, firing, and ammo.
----------------------------------

fire_items_start = a
        Sets the first inventory item to consider when cycling through missiles
        to fire via the quiver. The default is a.

fire_order  = launcher, throwing, inscribed, spell, evokable, ability
        (Ordered list option)
        Controls the order of items when cycling the quiver. Types
        should be separated by commas and items that appear first get
        higher priority. Absent action types are not used when cycling
        the quiver. This option also affects autoquivering on game start.

        'launcher' refers to firing a wielded ranged weapon (i.e. crossbow,
        bow, sling). 'throwing' refers to all throwing ammo. Specific throwing
        ammo types can be referred to by name ('javelin', 'boomerang', 'stone',
        'rock', 'net', 'dart'), but order of these only affects order internal
        to throwing ammo types; 'inscribed' can also be used to control the
        order of ammo that has been inscribed with "+f". See the "Inscriptions"
        section of Crawl's manual for more information about inscriptions. Ammo
        types can be separated with a "/" to indicate that inventory order
        should determine cycle order. Order within types is determined by letter
        order in the relevant submenu (e.g. inventory for throwing, etc).

fire_order_spell = all
        (list option)
        This allows you to exclude or include spells from the fire order by
        name. Order within spells is determined by letter assignment, this
        only controls what is in the list. This can be a comma separated list
        of spells by name, and supports += and -=. It allows two special values:
        'all' is shorthand for all spells, and 'attack' is shorthand for the
        list of spells that are considered damage spells for autofight
        purposes; see autofight_fires for more information.

fire_order_ability = all
fire_order_ability -= berserk
        (list option)
        This allows you to exclude or include abilities from the fire order by
        name. Order within abilities is determined by letter assignment, this
        only controls what is in the list. This can be a comma separated list
        of abilities by name, and supports += and -=. It allows two special
        values: 'all' is shorthand for all spells, and 'attack' is shorthand for
        the list of abilities that are considered damage spells for autofight
        purposes; see autofight_fires for more information.

fail_severity_to_quiver = 2
        Exclude spells with this miscast level or higher from quiver cycling
        and automatic quivering. -1 can be used to exclude spells entirely from
        automatic quivering. See fail_severity_to_confirm for a breakdown of
        miscast values.

launcher_autoquiver = true
        If set to true, change the quiver to the launcher on wielding it;
        if set to false, the quiver is unchanged on wielding a launcher.
        (Firing via tab or `v` will still work.).

quiver_menu_focus = false (persistent)
        If set to true, start the quiver menu in "focused" mode where action
        lettering is drawn from item/spell/ability lettering and only one of
        these can be selected at a time. Otherwise, any action can be selected
        from the menu, but lettering is not stable in this menu. This option
        is persistent so that the current value in the quiver menu is saved
        across games and automatically reloaded unless set explicitly.

3-k     Message Channels.
-------------------------

Crawl communicates to the players with its message window. Every message
belongs to one of the so-called channels. The behaviour of each channel
can be changed with the option

     channel.CHANNEL_NAME = (COLOUR | mute | default | on | off | plain)

CHANNEL_NAME can currently be one of these:
   plain           = regular text (and things "uncoloured")
   prompt          = input prompts to the player
   god             = messages from the gods
   duration        = messages about character spells/effects wearing off
   danger          = serious threats to the character's existence
   warning         = various other warnings
   recovery        = recovery from disease/stat loss/poison conditions
   talk            = monsters talking
   talk_visual     = monster performing some action that the player sees
   timed_portal    = portal timeout messages
   sound           = other sounds
   intrinsic_gain  = level/stat/species power gains
   mutation        = gain/lose mutations
   monster_spell   = messages about monsters gesturing or casting spells
   monster_enchant = messages pertaining to monster enchantments
   monster_warning = monsters coming into view
   friend_spell    = as monster_spell, but only for friendly monsters
   friend_enchant  = as monster_enchant, but only for friendly monsters
   friend_action   = other actions by friendly monsters
   monster_damage  = messages telling how damaged a monster is
   monster_target  = messages marking the monster as a target (unused)
   banishment      = messages about banishing and being banished to the Abyss
   equipment       = messages indicating worn/wielded equipment
   floor           = messages when looking at or walking over a floor item
   multiturn       = indicates long actions (wearing armour, dissecting etc.)
   examine         = messages from examining your surroundings
   examine_filter  = boring messages from examining your surroundings
   diagnostic      = debugging messages
   error           = error messages
   tutorial        = messages from the tutorial
   orb             = messages about the Orb of Zot
   hell_effect     = messages about environmental effects of the Hells
   dgl_message     = messages from watchers (online console games only)

The channel options are
   mute        = show no messages from channel (dangerous, be careful!)
   default     = turn channel on to its default scheme
   alternative = turn channel on to its alternative "colourful" scheme
   on          = same as default
   plain       = make channel the same colour as the "plain" channel
                 (won't do anything silly like "mute" if plain == mute,
                 though)
   off         = same as plain

COLOUR can be any of the colours described in section 5-a (colour option).

The only multi-colour channels currently are monster_damage and god. All
other channels are defaulted to on.

3-l     Inscriptions.
---------------------

See the "Inscriptions" section of the crawl manual for more information
about inscriptions.

autoinscribe += <regex>:<inscription>
        (Ordered list option, one value per line)
        Any item whose description contains the regex will be automatically
        inscribed (if autopickup is toggled on).

        For example, it can be used to avoid accidentally using charges of
        potentially dangerous wands, as in
             autoinscribe += wand of polymorph:!V

        The menu colour prefixes (forbidden etc.) can also be used here.
        For example:
             autoinscribe += (bad|dangerous)_item.*scroll:!r
        will prevent accidentally reading any identified bad or
        potentially dangerous scrolls.

        Unlike most ordered list options, multiple matching entries all have
        an effect: the order only determines the order of the inscriptions.

show_god_gift = unident|yes|no
        Appends {god gift} to items that originated as one. If set to
        "unident", items will lose this tag once their properties are
        fully known. Regardless of this setting, you can see the item's
        origin in its description.

3-m     Macro related Options.
------------------------------
macros += M \{9} za
        This options adds a macro or keymap.

        Each definition consists of exactly three arguments separated by
        spaces. The first one describes whether it is a macro or a keymap.
        Keymaps are generally most useful for renaming keys entirely and are
        processed before macros. If you don't know which to use, you probably
        want a macro.

        "M" macros (processed when entering game commands)

        Specialized keymap contexts:
        "K1" level-map context keymap (during the `X` view only)
        "K2" targeting context keymap (during targeting and `x` view)
        "K3" confirmation context keymap (when responding to a y/n prompt)
        "K4" menu context keymap (all menus, except the skill menu)

        Default keymap context:
        "K" default context keymap (any other context)

        The second argument describes the trigger key and consists the
        character or keycode of that key (for example 'a', 'A' or \{9} for the
        A, Shift-A or Tab keys). The third argument describes the macro or
        keymap action and consists the command sequence to be associated with
        the second argument. (for example "zap" for zapping the spell in slot a
        at the previous target). Function keys, numpad keys, and navigation
        keys can be entered via text keycodes (examples: \{F2}, \{NP-},
        \{PgUp}, \{Down}, etc).

        If you have any macros/keymaps in your rc file, they will automatically
        be saved to your macro.txt file on load, silently overriding any
        macros/keymaps already saved to your macro.txt file.

        This syntax is based on but not identical to the format used in the
        macro.txt file.

flush.failure = true
flush.command = false
flush.message = false
        These are useful when using macros. Setting one of these
        sub-options to true will cause the entire input buffer to be
        dumped and thus effectively stop the macro. The sub-options
        currently are
           failure -- when spells/abilities get miscast
           command -- whenever the game is about to get the next command
           message -- whenever the game outputs a non-mute message

additional_macro_file = path/to/filename
        Add an additional macro file to be loaded after macro.txt.
        You can have multiple additional_macro_file lines.

bindkey = [^D] CMD_CHARACTER_DUMP
        Change which key invokes which command at a lower level of
        operation than macros. Useful in that macros cannot (yet)
        invoke each other, but a macro can invoke a command whose
        key has changed.
        The syntax is always the same: [key] command
        First, in square brackets, list the key you want to use, with
        ^X meaning Ctrl-X. After that name the command to be bound to
        that key. You can bind several commands to the same key, as long
        as they take effect in different areas of the game, i.e. one
        targeting command and one for the main game. Likewise, you can
        bind the same command to different keys. You can use the \{} syntax
        from macro binds to write keycodes, and keycodes like "F1", "NP+",
        and "Down" can appear directly in [].
        For a full list of possible commands, see keybind.txt.

3-n     Tiles Options.
----------------------
In non-tile games the tile options are ignored.

tile_show_items = <glyphs>
        This option controls the order of items in the tiles
        inventory. By default, its value is: !?/=([)}:|
        Items with glyphs not in the list will be shown last.

tile_skip_title = false
        When this is set to true, you won't be prompted for a key at the title
        screen when the game has finished loading and will be taken directly to
        the starting menu.

tile_menu_icons = true
        Causes inventory menus and a few other ones to include tiled icons
        and the menus to be displayed in up to two columns to make up for
        the reduction of space.
        If you would rather have the plain menus set this option to false.

tile_player_col              = white
tile_monster_col             = #660000
tile_neutral_col             = #660000
tile_peaceful_col            = #664400
tile_friendly_col            = #664400
tile_plant_col               = #446633
tile_item_col                = #005544
tile_unseen_col              = black
tile_floor_col               = #333333
tile_wall_col                = #666666
tile_mapped_floor_col        = #222266
tile_mapped_wall_col         = #444499
tile_explore_horizon_col     = #6b301b
tile_door_col                = #775544
tile_downstairs_col          = #ff00ff
tile_upstairs_col            = cyan
tile_branchstairs_col        = #ff7788
tile_portal_col              = #ffdd00
tile_transporter_col         = #0000ff
tile_transporter_landing_col = #5200aa
tile_feature_col             = #997700
tile_trap_col                = #aa6644
tile_water_col               = #114455
tile_deep_water_col          = #001122
tile_lava_col                = #552211
tile_excluded_col            = #552266
tile_excl_centre_col         = #552266
tile_window_col              = #558855

These options allow configuring the colours used for the minimap of the dungeon
level. Using RGB hex codes is also allowed, such as #00ff00 for green.
   tile_player_col              - colour of player position, as well as of
                                  map centre during level map mode ('X')
   tile_monster_col             - colour of hostile monsters
   tile_neutral_col             - colour of neutral monsters
   tile_peaceful_col            - colour of peaceful monsters
   tile_friendly_col            - colour of friendly monsters
   tile_plant_col               - colour of zero xp monsters (plant and fungus)
   tile_item_col                - colour of known or detected items
   tile_unseen_col              - colour of unseen areas (usually stone)
   tile_floor_col               - colour of floor
   tile_wall_col                - colour of any wall type
   tile_mapped_floor_col        - colour of floor detected via magic mapping
   tile_mapped_wall_col         - colour of walls detected via magic mapping
   tile_explore_horizon_col     - colour of the edge of explored territory
   tile_door_col                - colour of known doors, open or closed
   tile_downstairs_col          - colour of downstairs
   tile_upstairs_col            - colour of upstairs, including branch exits
   tile_branchstairs_col        - colour of branch entrances
   tile_portal_col              - colour of any portal
   tile_transporter_col         - colour of transporters
   tile_transporter_landing_col - colour of transporter destinations
   tile_feature_col             - colour of any non-stair, non-portal feature
                                  (altar, shop, fountain, ...)
   tile_trap_col                - colour of known traps of any type
   tile_water_col               - colour of shallow water
   tile_deep_water_col          - colour of deep water
   tile_lava_col                - colour of lava
   tile_excluded_col            - colour of squares excluded for autotravel
                                  (will only override tile_floor_col colour)
   tile_excl_centre_col         - colour of exclusion centre (overrides
                                  tile_floor_col and tile_item_col, only)
   tile_window_col              - colour of the rectangular view window

custom_text_colours = lightmagenta:#fd59fa, blue:#005afa
        Remaps any of the 16 basic terminal colours used by Crawl's interface,
        specified as pairs of colour names and RGB hex codes. Any colours not
        included in the list will use their default values.

tile_update_rate = 1000
        The number of milliseconds that tick by before the screen is redrawn
        without any input. If game response is slow, try increasing this
        number. If, on the other hand, response time is fine but it takes too
        long for redrawings to happen, set it to a lower value.

tile_runrest_rate = 100
        The number of milliseconds that tick by before the screen is redrawn
        when running or resting. If Crawl is slow while running or resting,
        increase this number.

tile_key_repeat_delay = 200
        If you hold down a key, there's a delay until the pressed key will
        take action. This option controls this delay, in milliseconds. If it
        is set to 0 key presses will never repeat.

tile_tooltip_ms = 500
        The number of milliseconds before a tooltip appears when hovering the
        mouse over part of the screen. Setting this option to 0 will
        deactivate the tooltips entirely.

tile_tag_pref = (none| named | enemy | tutorial )
        This setting determines which monsters receive a text tag in the local
        tiles dungeon view.
            auto     - choses depending on game mode
            none     - turns off all tags
            all      - shows tags for all enemies
            named    - shows names of all named monsters, ally or enemy
            enemy    - shows names of named enemy monsters
            tutorial - shows names of all monsters not yet killed this game
                       and of named enemy monsters
        Examples of "named monsters" are uniques and ghosts. In auto mode,
        regular games use "enemy", arena mode uses "named", and tutorial/hints
        modes use "tutorial".

tile_window_width  = -90
tile_window_height = -90
        Options for setting the width and height of the window, in pixels. When
        positive, these set the window size directly. When set to 0, the window
        is auto-sized. When set to a negative number, these values will be
        interpreted as the screen's resolution minus the given value. The width
        may be overridden by `tile_window_ratio`, below, in which case
        `tile_window_width` is used as a maximum width. On some window
        managers, the position of OS user interface elements may enforce
        smaller values for these. For example, on MacOS the window will not
        overlap with the dock or menu bar.

tile_window_ratio  = 1618
        When set to a positive value, tiles will use this value to determine
        the window width as a ratio of the window height, scaled by 1000. In
        particular: w = h * tile_window_ratio / 1000.
        If this value is set, `tile_window_width` is used as a maximum width.
        The minimum width is determined by UI layout. This value is ignored in
        full screen mode. Set to a value <= 0 to disable.

tile_window_limit_size = true
        Limits the minimum window size. It should only be disabled for testing
        purposes.

game_scale = 1
        An integer scale value between 1 and 8 that will increase the size of
        all UI elements. This can be used to simulate high-dpi rendering on
        high resolution displays that don't directly support high-dpi, or adjust
        scaling for very large displays. For a 4k display, we recommend a value
        of 3 or 4, and a 2k display will typically look best with a value of 2.
        Local tiles only.

tile_map_pixels = 0
        The maximum number of pixels each minimap square should take up. If you
        have a low resolution, and feel like the inventory is too small, you
        can try setting this to 1 to get more space for the inventory. The
        downside is that travelling by clicking on the minimap becomes much
        harder. If set to zero, it will auto-size the minimap.

tile_viewport_scale = 1.0
        A scale factor to apply to the dungeon view. The minimum value is 0.2
        and the maximum value is determined by resolution; zoom will be capped
        so that at a minimum, your line of sight is always visible. This can
        also be adjusted in-game in local tiles with ctrl-'-' and ctrl-'='
        (or ctrl-'+' on some keyboards).

tile_map_scale = 0.6
        A scale factor to apply to the dungeon view in map mode (X). This can
        also be adjusted in map mode in tiles with '{' and '}', as well as in
        local tiles with ctrl-'-' and ctrl-'=' (or ctrl-'+' on some keyboards).

tile_cell_pixels = 32
        The width and height of tiles in the dungeon view at 1.0 scale, in
        (logical) pixels. This is a legacy option, and it is recommended that
        you adjust scaling via tile_viewport_scale instead.

tile_sidebar_pixels = 32
        The width and height of tiles in the local tiles sidebar view,
        in (logical) pixels.

tile_filter_scaling = false
        Used in conjunction with tile_cell_pixels or tile_sidebar_pixels.
        Setting it to true filters the textures resulting in a smoother but
        blurrier image.

tile_force_overlay = false
        Setting this option to true will force the message window to appear as
        an overlay on top of the screen. If you use this option, making your
        tile_font_msg_size smaller will make the overlay smaller while retaining
        the same number of lines. Increase the view_max_height option if you
        find yourself with unused screen estate.

tile_overlay_col = #646464
        Background color of the message window overlay, as when
        tile_force_overlay is set to true. Used in conjunction with
        tile_overlay_alpha_percent.

tile_overlay_alpha_percent = 40
        Transparency value for the message window overlay background, as when
        tile_force_overlay is set to true. Setting this option to 0 will cause
        the message window to only display text without any background. And
        setting this option to 100 will force an opaque background to the
        message window.

tile_full_screen = auto
        Setting this option to true or false will force full screen mode to be
        on or off. Setting it to anything else will put it in auto mode, which
        enables full screen mode only if the screen resolution is smaller than
        width 1200, or height 800.

tile_use_small_layout = auto
        Alternative layout designed for very small screens. It is enabled by
        default on Android.

tile_font_crt_file  = VeraMono.ttf
tile_font_stat_file = VeraMono.ttf
tile_font_msg_file  = VeraMono.ttf
tile_font_tip_file  = VeraMono.ttf
tile_font_lbl_file  = Vera.ttf
        Fonts used in various sections of the screen for local tiles. For
        WebTiles use tile_font_*_family instead. If you want to use another
        font, you'll have to place the corresponding *.ttf file into the
        dat/tiles/ folder.
        Screen regions are as follows:
            crt  - non-map screens (menus, message history, etc.)
            stat - stat area (hit points, AC, etc.)
            msg  - message area
            tip  - tooltips (mouseover information)
            lbl  - item/monster names in inventory/main map

tile_font_crt_family  = monospace
tile_font_stat_family = monospace
tile_font_msg_family  = monospace
tile_font_lbl_family  = monospace
        Fonts used in various sections of the screen for WebTiles. For local
        tiles use tile_font_*_file instead.

tile_font_crt_size  = 15
tile_font_stat_size = 16
tile_font_msg_size  = 14
tile_font_tip_size  = 15
tile_font_lbl_size  = 14
        Font size for the screen regions listed above. If set to zero (default),
        size will be based on screen size.

tile_font_ft_light = false
        Selects 'light' font hinting.

glyph_mode_font = monospace
        Font used to render the dungeon in glyph mode for WebTiles. If set to
        monospace (default) or the font is not available, the browser's default
        monospaced font will be used.
        This option is only available on WebTiles.

glyph_mode_font_size = 24
        Font size (in points) for the dungeon view in glyph mode for WebTiles.
        This option is only available on WebTiles.

tile_show_minihealthbar = true
tile_show_minimagicbar  = true
        Will show health and magic bars on top of the player tile when the
        player gets hurt or spends magic.

tile_show_demon_tier = false
        Will overlay demon tiles with an icon intended to represent their
        tier (or difficulty rank) among demons, reflecting the glyph
        (&, 1, 2, 3, 4, 5) used in non-Tiles builds.

tile_water_anim = true
        If disabled, animation of liquids will be suppressed.
        Defaults to false on WebTiles.

tile_misc_anim = true
        If disabled, animation of miscellaneous things such as altars and
        torches will be suppressed.

tile_realtime_anim = false
        If enabled, tile animations will run in real time and will not be tied
        to player actions.
        This option is only available on WebTiles.

tile_show_player_species = false
        If enabled, displays the player using the monster tile for her species,
        instead of using the normal doll and showing equipment.

tile_show_threat_levels = nasty, unusual
        This option controls which monsters will be highlighted with their
        threat level. Valid levels include: trivial, easy, tough, nasty,
        unusual. You can specify multiple levels at once, or 'none'.

        When 'unusual' is specified, the option unusual_monster_items will
        determine which items cause a monster to highlight as unusual.

tile_player_status_icons = slow, constr
        This option constrols which icons will be displayed on top of the
        player's tile when they are afflicted by certain status effects.
        Valid values include: slow, fragile, petr, mark, will/2, haste, weak,
        corr, might, brill, -move.

tile_layout_priority = minimap, inventory, command, spell, monster
        (Ordered list option)
        This option allows you to control the order in which elements are
        placed on the right of the screen, below the stat area. On small
        resolution, there won't be enough room for everything, so only the
        first items will be placed. You can also remove items you don't want
        to be permanently displayed. The inventory tab will always be placed at
        the bottom but is initialised at a minimum size (4 lines). If you put a
        tab before it on the option line, the tab will still be placed above it,
        but it will have priority over it so the inventory might not be able to
        expand to its maximum size (6 lines). The minimap is always placed
        between the stat area and the tabs. The memorisation and skill tabs can
        be added to the list too, but are not by default. The possible options
        are: abilities, commands, inventory, memorisation, minimap, monsters,
        navigation, skills, spells, system commands

tile_display_mode = (tiles | glyphs | hybrid)
        Controls how the dungeon is rendered. You can use normal tiles (default)
        or make it look like the console version by using glyphs. Hybrid
        overlays icons on top of the glyph view and uses a square tile aspect
        ratio.

        This option is only available on local tiles and webtiles.

tile_level_map_hide_messages = true
tile_level_map_hide_sidebar = false
        Controls what screen elements are hidden when using the level map.
        These options are only available on WebTiles.

tile_player_tile = (normal | playermons | mons:<monster> | tile:<monster-tile>)
        If set to playermons, displays the player using the monster tile for
        her species, instead of using the normal doll.

        If set to a value of the form mons:<monster>, where <monster> is the
        name of a monster, use the base tile of <monster> as the player
        tile. For example a value of mons:ijyb will cause Ijyb's tile to be
        used. Any spaces in the monster name should be included. For instance:
        a value of mons:the royal jelly is valid.

        If set to a value of the form tile:<player-tile> where <player-tile> is
        the name of a tile in the player tile sheet, use this tile as the
        player tile. This form is most useful for using specific variant tiles
        of monster with multiple tiles, such as hydra and large abominations,
        or special tiles like Cigotuvi's Monster or player transformations that
        don't have their own base monster. The tile name must be the full name,
        e.g. mons_hydra_7. For example, to use the hydra tile with many heads,
        use a value of tile:mons_hydra_7. The tile names can be found in the
        source tree folder source/rltiles in the files dc-mon.txt,
        dc-demon.txt, and dc-player.txt. In these files, the tile name is in
        the second word in each entry after the file name of the image, and
        case is ignored for matching. Monster tile names are usually of the
        form mons_<monster-name>, but other tiles like transformations are
        named differently, e.g. tran_tree for the tree transformation tile.

tile_weapon_offsets = (<x>,<y> | reset)
tile_shield_offsets = (<x>,<y> | reset)
        When using a custom tile with tile_player_tile, these option set the
        pixel x (horizontal) and y (vertical) offsets for the location where
        the weapon or shield will be drawn in the tile. The x and y offsets
        must be integers between -32 and 32, inclusive. Negative x values will
        adjust left, and Negative y values will adjust up. At 0,0, the weapon
        is drawn on the left side of the tile, and at 0,0 the shield is drawn
        on the right side. A weapon x offset of e.g. 10 to 20 (depending on the
        tile) together with a shield x offset of -10 to -20 can therefore be
        used to swap locations of weapon and shield.

        Using the value "reset" will clear any previously defined offset, which
        is useful for in-game tile changes via lua.

tile_grinch = false
        When set, disables custom holiday tiles (e.g. Santa hats).

tile_web_mouse_control = true
        Whether to enable mouse control for tooltips/cursor interaction on
        WebTiles. Regardless of the value of the setting, the minimap will
        respond to mouse control.

tile_web_mobile_input_helper = auto
        This option controls an optional auxiliary input field in the WebTiles
        interface that can be focused to enable the virtual keyboard on mobile
        devices. When set to true or false, the field is manually enabled or
        disabled. When set to auto, the field is only shown on devices with
        a touch screen.

4-  Character Dump.
===================

4-a     Saving.
---------------

dump_on_save = true
        If set to true, a character dump will automatically be created or
        updated when the game is saved.

4-b     Items and Kills.
------------------------

The character dump or morgue files end with a list of all monsters that
perished while the character was active. By default, dead monsters are
grouped in three parts:
   Vanquished Creatures    -- monsters killed by the character
   Collateral Kills        -- kills of friendly monsters
   Others                  -- all other casualties (e.g. traps, hostile
                              monsters)

kill_map = friend:you, other:you
        will merge friendly and other kills into the main vanquished
        creatures list. Note that the merging is only for display (the
        game still maintains three separate lists internally) and that
        kill places (see below) may be in the wrong order for merged
        entries. The default is an empty list.

dump_kill_places = (none | all | single)
        In the Vanquished Creatures list, this option controls how the
        locations of each kill are displayed. Use 'none' to suppress
        place display altogether, 'all' to display all known (up to 5)
        kill places, and 'single' to use the default of showing kill
        places only for single kills.

dump_item_origins = artefacts
        The game remembers where you find items. If you want this item
        origin memory listed in your dumps, use this option to select
        which items get annotated. Available selectors are:
                artefacts, ego_arm, ego_weap, jewellery, runes,
                staves, books, all, none.
        If you use multiple dump_item_origins lines, the last line takes
        effect; all preceding lines are ignored.

        If you don't want any items to be annotated, set
        dump_item_origins to none, and set dump_item_origin_price to -1.

dump_item_origin_price = -1
        Item origins are dumped if the price of the item is greater than
        or equal to this amount. Set this to -1 to prevent selection by
        price.

dump_message_count = 20
        The number of last messages to be displayed in character dump
        files.

dump_order  = header,hiscore,stats,misc,apostles,inventory,skills,spells,
dump_order += overview,mutations,messages,screenshot,monlist,kills,
dump_order += notes,screenshots,vaults,skill_gains,action_counts
        (Ordered list option)
        Controls the order of sections in the dump.

        Two optional dump sections are "turns_by_place" and
        "kills_by_place", which add detailed statistics to where turns
        were spent and monsters were killed. You can add them to your
        dump as:
             dump_order += turns_by_place, kills_by_place

        The "turns_by_place" section is enabled by default
        in trunk builds of Crawl (not releases or pre-release betas),
        appearing at the end of the dump.

        For making your chardump prettier, you can add
            dump_order += -
        to place a separator between sections.

        You can also add your own sections by writing a Lua function and
        adding its name to the list. The function's return value will then
        be dumped. You can reference global variables just like regular Lua
        functions, but its name must be in lowercase, and no call arguments
        will be provided.

        Example:
          {
            myRace = you.race()
            function mydumpfn()
              return
                "This will be printed to dump. Your species is " .. myRace
            end
          }
          dump_order += mydumpfn


4-c     Notes.
--------------

Crawl can automatically log certain events during play. You can read
these in the dump or morgue files. Below are the options for tweaking this
behaviour.
The following events are logged:
        - Gaining or losing a level
        - Entering a dungeon level for the first time
        - Memorising a spell of higher level than any learned before
        - Becoming a worshipper of a god
        - Abandoning a god
        - Being put under penance and being forgiven
        - Receiving a gift from a god (except Xom)
        - Death of a named orcish ally (when worshipping Beogh)
        - Being able to invoke a godly power for the first time
        - Picking up a rune, the Orb of Zot, or an artefact for the first time.
        - Identifying items.
        - Killing OOD or unique monsters (see below)
        - Reaching critical HP levels (see below)
        - Gaining or losing mutations
        - Reaching significant levels in a skill (see below)
        - Dying
You can use the command ':' for manually adding notes.

user_note_prefix = <string>
        Prefixes manually added notes with the given string, to make
        them easier to find. It is not currently possible to add a
        space at the end of this or any option, but you can use the
        Unicode non-breaking space character ' ' instead.

note_items += <regex>, <regex>, ...
        (List option)
        When an item is identified for the first time, it will be
        noted if its short description matches a regex. E.g.
             note_items += book,acquirement
        Artefacts (fixed, unrand, or random) will always be noted when
        identified, regardless of note_items.

        The description matched against has the same prefixes as notes
        for the menu_colour option (e.g., "emergency_item").

note_monsters += <regex>, <regex>, ...
        (List option)
        Monsters whose name matches an item in this comma-separated list
        are considered interesting. You can have multiple note_monsters
        lines. E.g.
             note_monsters += Klown,orb of fire

note_hp_percent = 5
        If your HP falls below a certain note_hp_percentage of your max
        hit points, a note will be taken. There is some code to avoid
        repetitions of notes based on the same incident.

note_skill_levels = 1,5,10,15,27
        This sets which skill levels are noteworthy. It's a single line,
        although you can use += as a continuation.

note_all_skill_levels = false
        This is a shortcut for note_skill_levels = 1,2,..,27. If you set
        this to true, all skill levels are considered noteworthy.

note_skill_max = true
        Setting this option will cause a note whenever a new maximum in
        skill levels is reached. If note_skill_max is true and
        note_skill_levels is nonempty, notes will be taken whenever
        either of the criteria are met.

note_xom_effects = true
        This will add a note whenever Xom does something.

note_messages += <regex>, <regex>, ...
        (List option)
        Messages which match an item in this comma-separated list are
        considered interesting. You can have multiple note_messages
        lines. E.g.
             note_messages += Something interferes
             note_messages += protects you from harm
        If you want all banishments to the Abyss noted, use
             note_messages += [bB]anish.*Abyss
        If you want a note when your draconian scales turn <colour>, use
             note_messages += Your scales start

note_chat_messages = false
        If set to false, this will disable logging of WebTiles chat
        messages from other players. (This setting only applies on the
        online servers).

note_dgl_messages = true
        If set to false, this will disable logging of DGL messages
        sent by other players. (This setting only applies on the online
        servers).


5-  Miscellaneous.
==================

5-a     All OS.
---------------

mouse_input = false
        When enabled, the mouse_input option allows the game to use
        mouse input events on certain platforms (Windows and Unix).
        Note that the extent of mouse support varies greatly across
        platforms and is strongly influenced by your terminal settings.

        On Unixes, you're only likely to get mouse support working with
        ncurses in xterms (specifically your $TERM probably needs to
        contain "xterm" for ncurses to activate its mouse events;
        if you're running Crawl in GNU screen in an xterm, the mouse
        will probably not work).

        On Windows, you'll need to disable QuickEdit Mode on your
        console for Crawl to use the mouse (QuickEdit is disabled by
        default, so you shouldn't need to change anything if you're
        using a stock console). You can disable QuickEdit by
        right-clicking the titlebar of your command-prompt, selecting
        Properties and disabling QuickEdit in the Options tab.

wiz_mode = (no | never | yes)
        Wizard mode options (available only in WIZARD compiles):
          yes   -- start games in wizard mode (game will not be scored)
          no    -- still allows player to enter wizard mode after start
                   of game
          never -- never allow a wizard command to be used

explore_mode = (no | never | yes)
        Explore mode options (available only in WIZARD compiles):
          yes   -- start games in explore mode (game will not be scored)
          no    -- still allows player to enter explore mode after start
                   of game
          never -- never allow explore mode to be entered

char_set = (default | ascii)
        Chooses different pre-set character sets for the game play screen.
        Unlike previous versions of Crawl, this does not select the I/O
        encoding anymore.

        You can also include ibm_glyphs.txt, dec_glyphs.txt, or old_unicode_
        glyphs.txt to bring back some older character sets that are
        no longer built-in.

        Has negligible effect in the Tiles build.

colour.OLDCOLOUR = NEWCOLOUR
        Useful for terminals where some colours are hard to read (and
        cannot be adjusted), as well as for creating a custom scheme,
        especially when used with the background option on a terminal
        with a non-black background.
        Format is colour.OLDCOLOUR = NEWCOLOUR, later rules take
        precedence and the NEWCOLOUR is always literal (ie. it won't
        re-evaluate to a different colour).
        The colours are:
                black, blue, green, cyan, red, magenta, brown, lightgrey,
                darkgrey, lightblue, lightgreen, lightcyan, lightred,
                lightmagenta, yellow, white
        with lightgray = lightgrey, darkgray = darkgrey. Some examples:
          colour.lightgrey = black
          colour.lightcyan = cyan
          colour.yellow    = brown

display_char = <dungeon_character_name : symbol>
        a list of these is allowed, as well.

        The possible entries for dungeon_character_name are: wall, permawall,
           wall_magic, floor, floor_magic, door_open, door_closed, trap,
           stairs_down, stairs_up, grate, altar, arch, fountain, wavy, statue,
           invis_exposed, item_detected, item_orb, item_rune, item_weapon,
           item_armour, item_wand, item_scroll, item_ring, item_potion,
           item_missile, item_book, item_staff, item_rod, item_miscellany,
           item_corpse, item_skeleton, item_gold, item_gem, item_amulet, cloud,
           cloud_weak, cloud_fading, cloud_terminal, tree, transporter,
           transporter_landing, space, fired_bolt, fired_zap, fired_burst,
           fired_debug, fired_missile, fired_missile, explosion, frame_horiz,
           frame_vert, frame_top_left, frame_top_right, frame_bottom_left,
           frame_bottom_right, draw_horiz, draw_vert, draw_slash,
           draw_backslash, draw_top_left, draw_top_right, draw_bottom_left,
           draw_bottom_right, draw_down, draw_up, draw_right, draw_left

        Most of these are self-explanatory. "arch" is used for shops and
        portals. "floor_magic" and "wall_magic" are used to display magic-mapped
        squares on the level map. "invis_exposed" is the character for water
        creatures submerged in shallow water, or invisible creatures wading in
        shallow water. "wavy" is water and lava. "cloud", "cloud_weak",
        "cloud_fading", and "cloud_terminal" distinguish clouds by remaining
        duration, listed from furthest to nearest expiry; cloud types that do
        not visually reveal their remaining duration always use the "cloud"
        glyph.

        Symbols can be specified using a letter, or by its ASCII/Unicode
        code: a decimal number or a hexadecimal one (prefixed with x).

feature += <regex> { <symbol>, <magicmap symbol>, <view colour>,
                    <levelmap_magic_colour>, <levelmap_seen_colour>,
                    <emphasised_colour>, <levelmap_emphasised_colour> } ;
           <regex> { ... }
feature -= <regex> , <regex>
        (List-like option)
        where <regex> is a regular expression describing a dungeon
        feature. This regex should match the description when using the
        'x' command. In case the regex matches several descriptions, all
        such features are affected. The set of possible features in a
        given version of crawl can be found by searching for `.*` in the
        lookup feature menu (`?/f`).

        The list in {...} specifies the appearance of the dungeon
        feature(s), and should be self-explanatory. <symbol> can be used
        to override the above display_char options, or also to distinguish
        among subtypes of a character.

        'magic' refers to magic mapping. So the <magicmap symbol>
        entry determines what symbol will be used for features
        detected via magic mapping. The <magicmap symbol> will also be used
        for stone stairs with unknown destination and unvisited transporters.

        'emphasised_colour' refers to the colour used to highlight stone stairs
        and transporters with unknown destination; for non-stair features,
        setting emphasis colours does nothing useful.

        Leading parameters in the {...} list can be omitted by leaving
        them blank and using placeholder commas. Trailing parameters can
        be omitted without placeholder commas.

        Multiple feature option lines can be used, as can multiple
        feature descriptions strung together on the same line separated
        by semicolons.

        Feature overrides can be cleared using -=, providing a regex only
        (and not an appearance). This will restore all features whose
        descriptions match the regex to their default appearances.

        Examples:
         * Colour rock walls red:
             feature += rock wall { , , red }
         * Use # for metal walls in all character sets:
             feature += metal wall {#}
         * Colour upstairs green and downstairs red:
             feature += stone staircase leading up {,,,,green}
             feature += stone staircase leading down {,,,,red}

        Symbols can be specified as with display_char:
             feature += metal wall {#}
             feature += metal wall {35}
             feature += metal wall {x23}
        all do the same thing.

mon_glyph += <monster name or symbol> : (<colour> <glyph> | <monster name>) ,
             <monster name or symbol> : <replacement>
mon_glyph -= <monster name or symbol>
        (List option)
        The mon_glyph option allows you to customise the symbol and
        colour used to display a monster. The full list of default glyphs
        can be most reliably found by looking at the source code (mon-data.h),
        but glyph information can be checked in the lookup monster menu
        (`?/m`), as can the list of monsters.

        You can customise symbols based on monster names or their
        existing symbols. For instance, if you want to put elves on E
        and elementals on e, you can do this:

             mon_glyph += e : E
             mon_glyph += E : e

        You can specify a different symbol, or a colour, or both, in any
        order. Here are more examples:

             mon_glyph += deep elf annihilator : E lightmagenta
             mon_glyph += Xtahua : lightmagenta D
             mon_glyph += large zombie : darkgrey
             mon_glyph += small simulacrum : x

        (The left hand side of the : is case-sensitive.)

        You can also specify another monster, so that it copies the base
        symbol and colour of that monster (this is not transitive). For
        example, if you think that slime creature colours are backwards:

            mon_glyph += slime creature : merged slime creature
            mon_glyph += merged slime creature : slime creature

        You can specify symbols using their code points using the syntax
        as shown in the "feature" option. You can also use Unicode code
        points:

             mon_glyph += draconian scorcher : x6e9

        A single _ is treated as a space; if you want a real underscore,
        put a \ in front of it like this:

             mon_glyph += player ghost : \_

        You can also redefine several "pseudo" monsters, them being:

             player
             sensed monster
             {trivial,easy,tough,nasty,friendly} sensed monster
             merged slime creature

        Playable species that normally have no monster of the same name can
        also be redefined, for use with show_player_species = true.

        Monster glyph overrides can be cleared using -=, which restores
        the named monster (or all monsters of the given glyph) to its default
        appearance. Specify only the monster name or glyph for -=, not the
        replacement being removed.

item_glyph ^= <regexp> : <colour> <glyph>
item_glyph -= <regexp>
        (Ordered list option)
        Customizes the symbol and/or colour of all items matching the regexp.
        Unlike mon_glyph, this is a partial name match.

        Items are prefixed by tags, both those from stash tracking and from
        menu colouring. Thus, you can colour {artefact} or useless_item.

        Multiple rules can modify a single item, which is useful if you want
        to change the colour and glyph separately:
            item_glyph += corpse : x625
            item_glyph += inedible.* corpse : lightgreen

        Rules are applied in order, so later rules are higher priority.

        Removing a rule with -= removes all rules using the exact regexp
        provided; do not specify a colour or glyph in that case.

use_fake_player_cursor = true
        Makes the main view highlight the player without using the
        terminal cursor. This means it won't flicker when the cursor
        is turned off to move elsewhere for drawing, and allows
        turning the cursor off by default. Has no effect in the Tiles build.

show_player_species = false
        Displays your character as a member of its species. For example, if
        you're a Hill Orc, you will be shown as an 'o' rather than '@'. Has
        no effect in Tiles.

use_modifier_prefix_keys = true
        When true, '*' behaves as a CTRL keypress, and '/' as SHIFT.

language = <two-letter language code>
        Displays some text in the given language. Not all text in Dungeon Crawl
        has translations in every supported language, but volunteer translators
        have offered translations of particularly wordy text such as god and
        monster descriptions. Text with no known translation will be displayed
        in English. Some languages may require changing the font.

        Partially supported language codes:
        cs: Czech
        da: Danish
        de: German
        el: Greek
        es: Spanish
        fi: Finnish
        fr: French
        hu: Hungarian
        it: Italian
        ja: Japanese
        ko: Korean
        lt: Lithuanian
        lv: Latvian
        nl: Dutch
        pl: Polish
        pt: Portuguese
        ru: Russian
        sv: Swedish
        zh: Chinese

fake_lang = <lang1>[,<lang2>[,...]]
        Set one or more fake languages, applied in the order provided (order
        does matter!) The same language can be set more than once, though it
        may not end up making much sense... At most 3 fake langs can be set at
        a time.

        Options are: (dwarven|jagerkin|kraut|runes|wide|grunt|butt:<n>)
        Experiment to find out what they do!

messaging = true
        If set to true, this allows you to receive DGL messages sent
        by other players. (This setting only applies on the online servers).

read_persist_options = false
        When set to true, the game will read additional options from
        the lua variable c_persist.options if it contains a string.
        This option has no effect unless explicitly used in scripting.
        This option is persistent so that the current value as set in
        the skill menu is saved across games and automatically reloaded,
        unless set explicitly.

5-b     Windows.
------------------------

dos_use_background_intensity = false
        On Windows, if you're using a console that can do high-intensity
        background colours, set this option to true for superior
        friend-highlighting. If your console doesn't like this option,
        some friendly monsters will appear as blinking characters (and
        setting this option to false may be advisable to preserve your
        sanity in such cases).

5-c     Unix.
-------------
allow_extended_colours = true
        Attempt to use more than the eight basic terminal colours for crawl's
        bright colours. Most modern terminals should use this setting. If
        successful, this puts console into 16-color mode.

        If this option is enabled and there are enough colours available in
        the terminal, use the terminal's extended colour palette directly for
        internal colours.

        An appropriate TERM environment variable must be set for this option to
        function as expected for capable terminals. For example:
          * XTerm, MacOS Terminal, or iTerm: xterm-256color
          * gnome-terminal: vte-256color
          * PuTTY: putty-256color
            (set in 'Connection->Data->Terminal-type string')

        If these conditions are not met, crawl will fall back to 8-colour mode
        and use character attributes to render bright colours, with dark blue
        as a "fallback" color for rendering dark grey on black. In 8-colour
        mode, one of the following options may be better.

bold_brightens_foreground = false
        For 8-colour mode, assume that a bold text attribute will end up
        brightening the foreground colour. If set to `force` instead of `true`,
        bright colours will be bolded even in 16-colour mode. Otherwise,
        this option is ignored when running in 16-colour mode via
        allow_extended_colours.

        If enabled in 8 color mode on a terminal where the assumption that bold
        changes the color does not hold, this will result in invisible glyphs
        for normal/bright colour combos of the same base colour. For example,
        in the dungeon display, if squares that are out of line of sight appear
        black, you should not set this to `true`.

blink_brightens_background = false
        For 8-colour mode, assume that a blink text attribute will end up
        brightening the background colour.

        If enabled on a terminal where this assumption does not hold, this will
        result in invisible glyphs for normal/bright colour combos of the same
        base colour.

        This option is ignored when running in 16-colour mode via
        allow_extended_colours.

best_effort_brighten_background = false
        If set to true, try to brighten a background colour using blink even if
        it is not assumed to be successful.

        This option only affects colours which are safe to brighten. If the
        blink_brightens_background option is set to true, this option is
        effectively ignored.

        This option is ignored when running in 16-colour mode via
        allow_extended_colours.

best_effort_brighten_foreground = true
        If set to true, try to brighten a foreground colour using bold even if
        it is not assumed to be successful.

        This option only affects colours which are safe to brighten. If the
        bold_brightens_foreground option is set to true, this option is
        effectively ignored.

        This option is ignored when running in 16-colour mode via
        allow_extended_colours.

background_colour = black
        Sets the default background colour by name (defaults to BLACK).
        This may be useful if you're using a terminal with a background
        colour other than black and wish to retain the colour scheme for crawl.

        Internally, black is mapped to the the passed background colour and
        vice-versa.

        This option requires extended support by the terminal library as well
        as the terminal itself. Additionally, bright default colours are not
        available unless extended colour support is present and explicitly
        enabled via allow_extended_colours. If support is not present, either
        outright or for the selected colour, this option will have an effective
        value of black.

        See the allow_extended_colours option for more information on enabling
        use of bright default colours. Beware of buggy or misleading terminfo
        files.

foreground_colour = lightgrey
        Sets the default foreground colour by name (defaults to LIGHTGREY).

        Internally, lightgrey is mapped to the passed foreground colour and
        vice-versa.

        This option comes with the same baggage as the background_colour option.
        See its documentation for more details.

use_terminal_default_colours = false
        Use the terminal's default foreground and background colors. This can
        be used to enable a transparent background.

use_fake_cursor = true
        If true, Crawl draws the cursor explicitly on the level-map and
        targeting screens instead of relying on the term to draw the
        cursor. Use this if your term cannot show a cursor over
        darkgrey/black squares.
        On non-Unix builds this option defaults to false, and setting it to
        to true may have unpredictable results.


6-  Lua.
========

lua_max_memory = 16
        Max memory in MB allowed for user Lua scripts.

6-a  Including lua files.
-------------------------

Lua files are scripts which can provide existing commands with a new
meaning or create new commands (to be used in macros). To use Lua
files, Crawl needs to be compiled with support for user Lua scripts.
You can if your Crawl has Lua support by hitting ?V in-game. The list
of features Crawl displays should include "Lua user scripts".

Lua files are included using the lua_file option (one file per line):

lua_file = <path/name.lua>

Lua functions can be macroed in-game by setting the macro action to "===",
followed by the function name.

The wizard-mode Lua interpreter (&^T) will, the first time it's invoked,
load all of the files that are specified with the terp_file option:

terp_file = <path/name.lua>

The Lua in these files will have access to all of the Crawl Lua internals
(that is, will be run in the context of dlua, not clua).

6-b     Executing inline lua.
-----------------------------

Lua code can be used directly in your init.txt/.crawlrc. You can
execute Lua code using the following syntax.

: Single line of lua code

< Possibly multi-line
  Lua code >

{ Possibly multi-line
  Lua code }

In the second and third cases, the restriction is that the delimiter
characters appear at the beginning and end of a line, respectively.
The difference between the <> and {} is when the code gets executed.
Code {}, it is executed right away. Other Lua code is executed only
after the entire init file is read in.

Examples:

# Print a welcome message
: crawl.mpr("Hello " .. you.name())

<
-- Another welcome message (lua code uses lua comments)
crawl.mpr("Hi there")
>

{
function ch_autopickup(it) [ ... body omitted ... ] end
}

6-c     Conditional options.
----------------------------

You can use Lua to selectively include parts of your init.txt (based
on character type, for instance) using the same syntax.

Example:

: if you.race() == "Mummy" then
autopickup = $?+"/
: else
autopickup = $?+"/!
: end

Options can be referenced by lua via "options.option_name". For
example:

:if string.find(options.autopickup, "!") then
# Do something here if potions are included in autopickup
:end

"options.option_name" can even be used for options that crawl itself
doesn't recognize. This can be combined with setting options on the
command line (see section 0-b) to use the command line to control
conditionalization of options in the options files. For example, on the
command line you could set the option "foobar" with "-extra-opt-first
foobar=true", and then do:

:if options.foobar then
# Do things here
:end

6-d     Conditional option caveats.
-----------------------------------

Note that none of the options listed under "Starting Screen" (section 1)
can be set conditionally. This is because the options files are
actually read in twice: once before character creation with Lua turned
off, and a second time after character creation with Lua turned on. If
you attempt to set a starting-screen option conditionally then the value
furthest down in the options file will be used regardless of what
conditions you set.

The above caveat applies to the "wiz_mode" option as well. Instead of
conditionalized wiz_mode, you can add to the command line
"-extra-opt-last wiz_mode=yes" to make any new game start in wizard
mode.

7-  Recommended Options for Blind Players.
==========================================

The following settings are recommended to facilitate using crawl in console
with a screenreader.

Disable animations and view delays so the screen updates immediately after each
command:
    view_delay = 0
    travel_delay = -1
    rest_delay = -1
    use_animations = 0

Place messages at the top of the screen and remove message condensing for
easier screen reading:
    messages_at_top = true
    clear_messages = true
    msg_condense_short = false

Make the player cursor easier to track with screen reading, by setting a custom
symbol for the player:
    use_fake_player_cursor = false
    show_player_species = false
    mon_glyph += player:x263A

Use mouse input clicks for automove (see the discussion of the mouse_input
option for terminal configuration specifics):
    mouse_input = true

Allow auto-travel/move to advance one step even when monsters are present:
    travel_one_unsafe_move = true

List player-relative coordinates in the ^x display:
    monster_item_view_coordinates = true

The ^x display can list a customizable set of features controlled with regular
expressions. For example, to include all water in ^x set:
    monster_item_view_features += water

Mark the path taken by auto-travel and the exploration horizon with special
characters:
    show_travel_trail = true
    feature += travel trail {x25AA}
    feature += explore horizon {x25AB}

Set a separate glyph for unvisited stairs and transporters:
    feature += stone staircase leading up {<,x25C2}
    feature += stone staircase leading down {>,x25B8}
    feature += transporter {xA9, x25CE}

Visit squares with stacks of items when exploring to print all newly
encountered items:
    explore_greedy_visit += stacks
