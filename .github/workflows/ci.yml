name: Build

on:
  push: {}
  pull_request: {}
  release:
    types:
      - created

jobs:
  linting:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkwhite
        run: util/checkwhite -n
        working-directory: crawl-ref/source
      - name: Unbrace
        run: util/unbrace -n
        working-directory: crawl-ref/source
  build_linux:
    name: Linux ${{ matrix.compiler }} ${{ matrix.build_opts }} ${{ matrix.debug }} ${{ matrix.build_all }} tag_upgrade=${{ matrix.tag_upgrade }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - gcc
          - clang
        build_opts:
          - ""
          - WEBTILES=1
          - WEBTILES=1 USE_DGAMELAUNCH=1
          - TILES=1
        debug:
          - ""
          - FULLDEBUG=1
        tag_upgrade:
          - false
        build_all:
          - ""
        exclude:
          # Limit Clang jobs:
          # 1. Only build fulldebug
          - compiler: clang
            debug: ""
          # 2. Skip webtiles builds (all webtiles servers use GCC)
          - compiler: clang
            build_opts: WEBTILES=1 USE_DGAMELAUNCH=1
          - compiler: clang
            build_opts: WEBTILES=1
        include:
          # Jobs for tag_upgrade=true.
          - compiler: gcc
            build_opts: ""
            debug: FULLDEBUG=1
            tag_upgrade: true
            build_all: ""
          - compiler: gcc
            build_opts: WEBTILES=1 USE_DGAMELAUNCH=1
            debug: FULLDEBUG=1
            tag_upgrade: true
            build_all: ""
          - compiler: gcc
            build_opts: TILES=1
            debug: FULLDEBUG=1
            tag_upgrade: true
            build_all: ""
          - compiler: gcc
            build_opts: TILES=1
            debug: FULLDEBUG=1
            tag_upgrade: true
            build_all: ""
          - compiler: gcc
            build_opts: TILES=1
            debug: ""
            tag_upgrade: false
            build_all: BUILD_ALL=1
          - compiler: clang
            build_opts: TILES=1
            debug: ""
            tag_upgrade: false
            build_all: BUILD_ALL=1
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history
          submodules: true
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install requirements.txt
        run: |
            python -m pip install --upgrade pip
            pip install -r webserver/requirements/dev.py3.txt # use this until we have a repo-wide requirements.txt
        working-directory: crawl-ref/source
      - name: Install dependencies
        run: ./deps.py --compiler ${{ matrix.compiler }} --build-opts "${{ matrix.build_opts }}" --debug-opts "${{ matrix.debug }}"
        working-directory: .github/workflows
      - name: Cache compilation
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-linux-${{ matrix.compiler }}-${{ matrix.tag_upgrade }}-${{ matrix.build_opts }}-${{ matrix.debug }}-${{ matrix.build_all }}-${{ github.sha }}
          restore-keys: |
            ccache-linux-${{ matrix.compiler }}-${{ matrix.tag_upgrade }}-${{ matrix.build_opts }}-${{ matrix.debug }}-${{ matrix.build_all }}-
            ccache-linux-${{ matrix.compiler }}-${{ matrix.tag_upgrade }}-${{ matrix.build_opts }}-${{ matrix.debug }}-
            ccache-linux-${{ matrix.compiler }}-${{ matrix.tag_upgrade }}-${{ matrix.build_opts }}-
            ccache-linux-${{ matrix.compiler }}-${{ matrix.tag_upgrade }}-
            ccache-linux-${{ matrix.compiler }}-
      - name: Setup ccache
        uses: alexjurkiewicz/setup-ccache@master
      - name: "Setup ccache: prepend path"
        run: "echo /usr/lib/ccache >> $GITHUB_PATH"
      - name: "Setup ccache: update symlinks"
        run: "/usr/sbin/update-ccache-symlinks"
      - name: "Setup ccache: clear stats"
        run: ccache --zero-stats
      - name: Run tag upgrade scripts
        if: matrix.tag_upgrade == true
        run: |
          if ! grep -q '#define TAG_MAJOR_VERSION 34' tag-version.h ; then
            echo "::error ::CI job for TAG_MAJOR_VERSION testing needs to be updated for new major tag"
            exit 1
          fi
          sed -i'' -e 's/^#define TAG_MAJOR_VERSION 34$/#define TAG_MAJOR_VERSION 35/' tag-version.h
          util/tag-major-upgrade -t 35
          util/tag-35-upgrade.py
        working-directory: crawl-ref/source
      - run: make -j$(nproc) all i18n-tests ${{ matrix.build_opts }} ${{ matrix.debug }} ${{ matrix.build_all }}
        working-directory: crawl-ref/source
      # Only run `make test` with TAG_MAJOR_VERSION 34 (it fails with 35).
      - if: matrix.debug == 'FULLDEBUG=1' && (matrix.build_opts == '' || matrix.build_opts == 'WEBTILES=1') && matrix.tag_upgrade == false
        run: make -j$(nproc) ${{ matrix.build_opts }} ${{ matrix.debug }} ${{ matrix.build_all }} test
        working-directory: crawl-ref/source
        env:
          TERM: dumb
      - name: Print ccache stats
        run: ccache -s

  build_macos:
    name: macOS ${{ matrix.build_type }}
    runs-on: macos-latest
    strategy:
      matrix:
        build_type:
          - tiles
          - console
          # These rules need an os 11.0 runner, which is not yet publicly available.
          # https://github.com/actions/virtual-environments/issues/2486
          #- tiles-universal
          #- console-universal
        build_opts:
          - ""
          - TILES=y
        exclude:
          - build_type: tiles
            build_opts: ""
          - build_type: console
            build_opts: TILES=y
          - build_type: tiles-universal
            build_opts: ""
          - build_type: console-universal
            build_opts: TILES=y
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Install Dependencies
        run: |
          sudo pip3 install PyYAML --break-system-packages --user
      - name: Cache compilation
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-macos-clang-${{ matrix.build_type }}-${{ github.sha }}
          restore-keys: |
            ccache-macos-clang-${{ matrix.build_type }}-
            ccache-macos-clang-
      - name: Setup ccache
        uses: alexjurkiewicz/setup-ccache@master
      - name: "Setup ccache: prepend path"
        run: "echo $(brew --prefix)/opt/ccache/libexec >> $GITHUB_PATH"
      - name: "Setup ccache: clear stats"
        run: ccache --zero-stats
      - run: make all i18n-tests -j$(sysctl -n hw.ncpu) mac-app-${{ matrix.build_type }} ${{matrix.build_opts }}
        working-directory: crawl-ref/source
      - name: Print ccache stats
        run: ccache -s
      - name: Add build to release
        if: github.event.release.tag_name != null
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: crawl-ref/source/mac-app-zips/latest.zip
          asset_name: dcss-$tag-macos-${{ matrix.build_type}}.zip

  build_mingw64_crosscompile:
    name: mingw64 ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type:
          - tiles
          - console
          - installer
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Checkout submodules (for crosscompile)
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install requirements.txt
        run: |
            python -m pip install --upgrade pip
            pip install -r webserver/requirements/dev.py3.txt # use this until we have a repo-wide requirements.txt
        working-directory: crawl-ref/source
      - name: Install dependencies
        run: ./deps.py --crosscompile
        working-directory: .github/workflows
      - name: Cache compilation
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-mingw64-${{ matrix.build_type }}-${{ github.sha }}
          restore-keys: |
            ccache-mingw64-${{ matrix.build_type }}-
            ccache-mingw64-
      - name: Setup ccache
        uses: alexjurkiewicz/setup-ccache@master
      - name: "Setup ccache: prepend path"
        run: "echo /usr/lib/ccache >> $GITHUB_PATH"
      - name: "Setup ccache: update symlinks"
        run: "/usr/sbin/update-ccache-symlinks"
      - name: "Setup ccache: clear stats"
        run: ccache --zero-stats
      - run: make all i18n-tests -j$(nproc) CROSSHOST=i686-w64-mingw32 package-windows-${{ matrix.build_type }}
        working-directory: crawl-ref/source
      - name: Print ccache stats
        run: ccache -s
      # The zip & installer targets create different sorts of names, so we need
      # a little shell script magic here.
      - name: Determine release file names
        if: github.event.release.tag_name != null
        id: release-names
        run: |
          if [[ ${{ matrix.build_type }} != installer ]] ; then
            source='crawl-ref/source/stone_soup-latest-${{ matrix.build_type}}-win32.zip'
            dest='dcss-$tag-win32-${{ matrix.build_type}}.zip'
          else
            source='crawl-ref/source/stone_soup-latest-win32-installer.exe'
            dest='dcss-$tag-win32-installer.exe'
          fi
          echo "::set-output name=source::$source"
          echo "::set-output name=dest::$dest"
      - name: Add build to release
        if: github.event.release.tag_name != null
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: ${{ steps.release-names.outputs.source }}
          asset_name: ${{ steps.release-names.outputs.dest }}

  codecov_catch2:
    name: Catch2 (GCC/Linux) + Codecov
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install requirements.txt
        run: |
            python -m pip install --upgrade pip
            pip install -r webserver/requirements/dev.py3.txt # use this until we have a repo-wide requirements.txt
        working-directory: crawl-ref/source
      - name: Install dependencies
        run: ./deps.py --coverage
        working-directory: .github/workflows
      - name: Cache compilation
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-catch2-${{ github.sha }}
          restore-keys: |
            ccache-catch2-
      - name: Setup ccache
        uses: alexjurkiewicz/setup-ccache@master
      - name: "Setup ccache: prepend path"
        run: "echo /usr/lib/ccache >> $GITHUB_PATH"
      - name: "Setup ccache: update symlinks"
        run: "/usr/sbin/update-ccache-symlinks"
      - name: "Setup ccache: clear stats"
        run: ccache --zero-stats
      - run: make -j$(nproc) catch2-tests
        working-directory: crawl-ref/source
      - name: Print ccache stats
        run: ccache -s
      - name: Generate LCOV data
        working-directory: crawl-ref/source
        run: >
          lcov
          --capture
          --directory .
          --output-file ../../coverage.info
          --ignore-errors source
          --rc lcov_branch_coverage=1
      - name: Send coverage data to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.info
          flags: catch2
          fail_ci_if_error: false

  webserver:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies (py3)
      working-directory: crawl-ref/source/webserver
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.py3.txt
    - name: Lint (flake8)
      working-directory: crawl-ref/source/webserver
      run: make lint
    - name: Unit Tests (pytest)
      working-directory: crawl-ref/source/webserver
      run: pytest

  build_headers:
    name: Build headers ${{ matrix.compiler }} ${{ matrix.build_opts }} ${{ matrix.debug }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - gcc
          - clang
        build_opts:
          - ""
          - WEBTILES=1
          - TILES=1
        debug:
          - ""
          - FULLDEBUG=1
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install requirements.txt
        run: |
            python -m pip install --upgrade pip
            pip install -r webserver/requirements/dev.py3.txt # use this until we have a repo-wide requirements.txt
        working-directory: crawl-ref/source
      - name: Install dependencies
        run: ./deps.py --compiler ${{ matrix.compiler }} --build-opts "${{ matrix.build_opts }}" --debug-opts "${{ matrix.debug }}"
        working-directory: .github/workflows
      - name: Cache compilation
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-build-headers-${{ matrix.compiler }}-${{ matrix.build_opts }}-${{ matrix.debug }}-${{ github.sha }}
          restore-keys: |
            ccache-build-headers-${{ matrix.compiler }}-${{ matrix.build_opts }}-${{ matrix.debug }}-
            ccache-build-headers-${{ matrix.compiler }}-${{ matrix.build_opts }}-
            ccache-build-headers-${{ matrix.compiler }}-
            ccache-build-headers-
      - name: Setup ccache
        uses: alexjurkiewicz/setup-ccache@master
      - name: "Setup ccache: prepend path"
        run: "echo /usr/lib/ccache >> $GITHUB_PATH"
      - name: "Setup ccache: update symlinks"
        run: "/usr/sbin/update-ccache-symlinks"
      - name: "Setup ccache: clear stats"
        run: ccache --zero-stats
      - run: make -j$(nproc) header-build-tests
        working-directory: crawl-ref/source
      - name: Print ccache stats
        run: ccache -s

  notify_irc:
    name: "Notify #crawl-dev of build failure"
    needs:
      - linting
      - build_linux
      - build_macos
      - build_mingw64_crosscompile
      - codecov_catch2
      - webserver
    if: failure() && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Build message
        id: message
        run: |
          ref="${{ github.ref }}"
          branch="${ref##refs/heads/}"
          sha="${{ github.sha }}"
          short_sha="${sha:0:8}"

          # https://modern.ircdocs.horse/formatting.html
          bold=$(printf '\x02')
          col=$(printf '\x03')
          red="04"
          magenta="06"
          yellow="08"
          url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          message="${bold}${col}${red}Build failed${col}${bold} for ${col}${yellow}${branch}${col} @ $short_sha ${col}${magenta}${url}"

          echo "::set-output name=message::${message}"
      - uses: rectalogic/notify-irc@v1
        with:
          server: irc.libera.chat
          channel: ${{ secrets.IRC_CHANNEL }}
          nickname: dcss-ci
          message: ${{ steps.message.outputs.message }}
